// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"jljck":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "7dd44675b7a05eb9";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && ![
        "localhost",
        "127.0.0.1",
        "0.0.0.0"
    ].includes(hostname) ? "wss" : "ws";
    var ws;
    try {
        ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
    } catch (err) {
        if (err.message) console.error(err.message);
        ws = {};
    }
    // Web extension context
    var extCtx = typeof browser === "undefined" ? typeof chrome === "undefined" ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        if (e.message) console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute("href");
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", // $FlowFixMe
    href.split("?")[0] + "?" + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            });
            // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"jeorp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DATABASE_HOST", ()=>DATABASE_HOST);
parcelHelpers.export(exports, "DATABASE_PATH", ()=>DATABASE_PATH);
parcelHelpers.export(exports, "AUTH_PATH", ()=>AUTH_PATH);
/**
 * Main Controller class handling business logic.
 */ parcelHelpers.export(exports, "MainController", ()=>MainController);
var _slog = require("./slog");
var _loginModel = require("./model/LoginModel");
var _workspaceModel = require("./model/WorkspaceModel");
var _sidebarModel = require("./model/SidebarModel");
var _mainContentModel = require("./model/MainContentModel");
var _createWorkspaceModel = require("./model/CreateWorkspaceModel");
var _deleteWorkspaceModel = require("./model/DeleteWorkspaceModel");
var _createChannelModel = require("./model/CreateChannelModel");
var _deleteChannelModel = require("./model/DeleteChannelModel");
var _chatInputModel = require("./model/ChatInputModel");
var _loginComponents = require("./view/LoginComponents");
var _workspaceComponents = require("./view/WorkspaceComponents");
var _sidebarComponents = require("./view/SidebarComponents");
var _mainContentComponents = require("./view/MainContentComponents");
var _createWorkspaceDialog = require("./view/CreateWorkspaceDialog");
var _editworkspaceComponents = require("./view/EditworkspaceComponents");
var _deleteWorkspaceDialog = require("./view/DeleteWorkspaceDialog");
var _editChannelButton = require("./view/EditChannelButton");
var _createChannelDialog = require("./view/CreateChannelDialog");
var _deleteChannelDialog = require("./view/DeleteChannelDialog");
var _chatInputComponent = require("./view/ChatInputComponent");
function cov_f3xgw0fed() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/main.ts";
    var hash = "0be14c1cc00608fb555fdcdd4640f8132d437f0c";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/main.ts",
        statementMap: {
            "0": {
                start: {
                    line: 30,
                    column: 29
                },
                end: {
                    line: 30,
                    column: 60
                }
            },
            "1": {
                start: {
                    line: 31,
                    column: 29
                },
                end: {
                    line: 31,
                    column: 60
                }
            },
            "2": {
                start: {
                    line: 32,
                    column: 25
                },
                end: {
                    line: 32,
                    column: 52
                }
            },
            "3": {
                start: {
                    line: 54,
                    column: 30
                },
                end: {
                    line: 54,
                    column: 32
                }
            },
            "4": {
                start: {
                    line: 55,
                    column: 25
                },
                end: {
                    line: 55,
                    column: 27
                }
            },
            "5": {
                start: {
                    line: 56,
                    column: 37
                },
                end: {
                    line: 56,
                    column: 39
                }
            },
            "6": {
                start: {
                    line: 57,
                    column: 35
                },
                end: {
                    line: 57,
                    column: 37
                }
            },
            "7": {
                start: {
                    line: 58,
                    column: 34
                },
                end: {
                    line: 58,
                    column: 36
                }
            },
            "8": {
                start: {
                    line: 65,
                    column: 4
                },
                end: {
                    line: 65,
                    column: 26
                }
            },
            "9": {
                start: {
                    line: 66,
                    column: 27
                },
                end: {
                    line: 68,
                    column: 23
                }
            },
            "10": {
                start: {
                    line: 69,
                    column: 4
                },
                end: {
                    line: 71,
                    column: 5
                }
            },
            "11": {
                start: {
                    line: 70,
                    column: 6
                },
                end: {
                    line: 70,
                    column: 33
                }
            },
            "12": {
                start: {
                    line: 72,
                    column: 4
                },
                end: {
                    line: 74,
                    column: 24
                }
            },
            "13": {
                start: {
                    line: 75,
                    column: 4
                },
                end: {
                    line: 75,
                    column: 64
                }
            },
            "14": {
                start: {
                    line: 76,
                    column: 4
                },
                end: {
                    line: 76,
                    column: 69
                }
            },
            "15": {
                start: {
                    line: 77,
                    column: 4
                },
                end: {
                    line: 77,
                    column: 65
                }
            },
            "16": {
                start: {
                    line: 78,
                    column: 4
                },
                end: {
                    line: 78,
                    column: 74
                }
            },
            "17": {
                start: {
                    line: 79,
                    column: 4
                },
                end: {
                    line: 79,
                    column: 76
                }
            },
            "18": {
                start: {
                    line: 80,
                    column: 4
                },
                end: {
                    line: 80,
                    column: 72
                }
            },
            "19": {
                start: {
                    line: 81,
                    column: 4
                },
                end: {
                    line: 81,
                    column: 76
                }
            },
            "20": {
                start: {
                    line: 82,
                    column: 4
                },
                end: {
                    line: 82,
                    column: 68
                }
            },
            "21": {
                start: {
                    line: 83,
                    column: 4
                },
                end: {
                    line: 83,
                    column: 72
                }
            },
            "22": {
                start: {
                    line: 84,
                    column: 4
                },
                end: {
                    line: 84,
                    column: 72
                }
            },
            "23": {
                start: {
                    line: 85,
                    column: 4
                },
                end: {
                    line: 85,
                    column: 70
                }
            },
            "24": {
                start: {
                    line: 87,
                    column: 4
                },
                end: {
                    line: 87,
                    column: 76
                }
            },
            "25": {
                start: {
                    line: 88,
                    column: 4
                },
                end: {
                    line: 88,
                    column: 72
                }
            },
            "26": {
                start: {
                    line: 89,
                    column: 4
                },
                end: {
                    line: 89,
                    column: 80
                }
            },
            "27": {
                start: {
                    line: 90,
                    column: 4
                },
                end: {
                    line: 92,
                    column: 6
                }
            },
            "28": {
                start: {
                    line: 93,
                    column: 4
                },
                end: {
                    line: 95,
                    column: 6
                }
            },
            "29": {
                start: {
                    line: 96,
                    column: 4
                },
                end: {
                    line: 98,
                    column: 6
                }
            },
            "30": {
                start: {
                    line: 99,
                    column: 4
                },
                end: {
                    line: 101,
                    column: 6
                }
            },
            "31": {
                start: {
                    line: 102,
                    column: 4
                },
                end: {
                    line: 102,
                    column: 76
                }
            },
            "32": {
                start: {
                    line: 105,
                    column: 4
                },
                end: {
                    line: 107,
                    column: 28
                }
            },
            "33": {
                start: {
                    line: 108,
                    column: 4
                },
                end: {
                    line: 110,
                    column: 26
                }
            },
            "34": {
                start: {
                    line: 111,
                    column: 4
                },
                end: {
                    line: 113,
                    column: 30
                }
            },
            "35": {
                start: {
                    line: 114,
                    column: 4
                },
                end: {
                    line: 116,
                    column: 28
                }
            },
            "36": {
                start: {
                    line: 124,
                    column: 4
                },
                end: {
                    line: 124,
                    column: 31
                }
            },
            "37": {
                start: {
                    line: 133,
                    column: 4
                },
                end: {
                    line: 135,
                    column: 6
                }
            },
            "38": {
                start: {
                    line: 134,
                    column: 6
                },
                end: {
                    line: 134,
                    column: 36
                }
            },
            "39": {
                start: {
                    line: 136,
                    column: 4
                },
                end: {
                    line: 136,
                    column: 67
                }
            },
            "40": {
                start: {
                    line: 136,
                    column: 46
                },
                end: {
                    line: 136,
                    column: 65
                }
            },
            "41": {
                start: {
                    line: 139,
                    column: 4
                },
                end: {
                    line: 141,
                    column: 6
                }
            },
            "42": {
                start: {
                    line: 140,
                    column: 6
                },
                end: {
                    line: 140,
                    column: 32
                }
            },
            "43": {
                start: {
                    line: 144,
                    column: 4
                },
                end: {
                    line: 146,
                    column: 6
                }
            },
            "44": {
                start: {
                    line: 145,
                    column: 6
                },
                end: {
                    line: 145,
                    column: 38
                }
            },
            "45": {
                start: {
                    line: 147,
                    column: 4
                },
                end: {
                    line: 149,
                    column: 6
                }
            },
            "46": {
                start: {
                    line: 148,
                    column: 6
                },
                end: {
                    line: 148,
                    column: 37
                }
            },
            "47": {
                start: {
                    line: 152,
                    column: 4
                },
                end: {
                    line: 154,
                    column: 6
                }
            },
            "48": {
                start: {
                    line: 153,
                    column: 6
                },
                end: {
                    line: 153,
                    column: 39
                }
            },
            "49": {
                start: {
                    line: 155,
                    column: 4
                },
                end: {
                    line: 157,
                    column: 6
                }
            },
            "50": {
                start: {
                    line: 156,
                    column: 6
                },
                end: {
                    line: 156,
                    column: 39
                }
            },
            "51": {
                start: {
                    line: 159,
                    column: 4
                },
                end: {
                    line: 161,
                    column: 6
                }
            },
            "52": {
                start: {
                    line: 160,
                    column: 6
                },
                end: {
                    line: 160,
                    column: 37
                }
            },
            "53": {
                start: {
                    line: 162,
                    column: 4
                },
                end: {
                    line: 164,
                    column: 6
                }
            },
            "54": {
                start: {
                    line: 163,
                    column: 6
                },
                end: {
                    line: 163,
                    column: 37
                }
            },
            "55": {
                start: {
                    line: 165,
                    column: 4
                },
                end: {
                    line: 167,
                    column: 6
                }
            },
            "56": {
                start: {
                    line: 166,
                    column: 6
                },
                end: {
                    line: 166,
                    column: 34
                }
            },
            "57": {
                start: {
                    line: 168,
                    column: 4
                },
                end: {
                    line: 170,
                    column: 6
                }
            },
            "58": {
                start: {
                    line: 169,
                    column: 6
                },
                end: {
                    line: 169,
                    column: 33
                }
            },
            "59": {
                start: {
                    line: 172,
                    column: 4
                },
                end: {
                    line: 176,
                    column: 7
                }
            },
            "60": {
                start: {
                    line: 173,
                    column: 26
                },
                end: {
                    line: 173,
                    column: 46
                }
            },
            "61": {
                start: {
                    line: 174,
                    column: 41
                },
                end: {
                    line: 174,
                    column: 59
                }
            },
            "62": {
                start: {
                    line: 175,
                    column: 6
                },
                end: {
                    line: 175,
                    column: 50
                }
            },
            "63": {
                start: {
                    line: 183,
                    column: 54
                },
                end: {
                    line: 183,
                    column: 63
                }
            },
            "64": {
                start: {
                    line: 191,
                    column: 24
                },
                end: {
                    line: 191,
                    column: 53
                }
            },
            "65": {
                start: {
                    line: 192,
                    column: 4
                },
                end: {
                    line: 192,
                    column: 52
                }
            },
            "66": {
                start: {
                    line: 193,
                    column: 4
                },
                end: {
                    line: 196,
                    column: 6
                }
            },
            "67": {
                start: {
                    line: 198,
                    column: 4
                },
                end: {
                    line: 233,
                    column: 9
                }
            },
            "68": {
                start: {
                    line: 205,
                    column: 21
                },
                end: {
                    line: 205,
                    column: 59
                }
            },
            "69": {
                start: {
                    line: 205,
                    column: 39
                },
                end: {
                    line: 205,
                    column: 58
                }
            },
            "70": {
                start: {
                    line: 206,
                    column: 8
                },
                end: {
                    line: 206,
                    column: 48
                }
            },
            "71": {
                start: {
                    line: 207,
                    column: 8
                },
                end: {
                    line: 210,
                    column: 9
                }
            },
            "72": {
                start: {
                    line: 209,
                    column: 10
                },
                end: {
                    line: 209,
                    column: 62
                }
            },
            "73": {
                start: {
                    line: 213,
                    column: 10
                },
                end: {
                    line: 213,
                    column: 74
                }
            },
            "74": {
                start: {
                    line: 214,
                    column: 8
                },
                end: {
                    line: 214,
                    column: 61
                }
            },
            "75": {
                start: {
                    line: 215,
                    column: 23
                },
                end: {
                    line: 215,
                    column: 33
                }
            },
            "76": {
                start: {
                    line: 217,
                    column: 8
                },
                end: {
                    line: 225,
                    column: 13
                }
            },
            "77": {
                start: {
                    line: 221,
                    column: 12
                },
                end: {
                    line: 223,
                    column: 14
                }
            },
            "78": {
                start: {
                    line: 228,
                    column: 8
                },
                end: {
                    line: 228,
                    column: 37
                }
            },
            "79": {
                start: {
                    line: 232,
                    column: 8
                },
                end: {
                    line: 232,
                    column: 57
                }
            },
            "80": {
                start: {
                    line: 241,
                    column: 24
                },
                end: {
                    line: 241,
                    column: 44
                }
            },
            "81": {
                start: {
                    line: 242,
                    column: 29
                },
                end: {
                    line: 242,
                    column: 56
                }
            },
            "82": {
                start: {
                    line: 244,
                    column: 4
                },
                end: {
                    line: 247,
                    column: 5
                }
            },
            "83": {
                start: {
                    line: 245,
                    column: 6
                },
                end: {
                    line: 245,
                    column: 75
                }
            },
            "84": {
                start: {
                    line: 246,
                    column: 6
                },
                end: {
                    line: 246,
                    column: 13
                }
            },
            "85": {
                start: {
                    line: 249,
                    column: 4
                },
                end: {
                    line: 249,
                    column: 58
                }
            },
            "86": {
                start: {
                    line: 250,
                    column: 4
                },
                end: {
                    line: 268,
                    column: 9
                }
            },
            "87": {
                start: {
                    line: 253,
                    column: 8
                },
                end: {
                    line: 253,
                    column: 31
                }
            },
            "88": {
                start: {
                    line: 254,
                    column: 8
                },
                end: {
                    line: 254,
                    column: 29
                }
            },
            "89": {
                start: {
                    line: 255,
                    column: 8
                },
                end: {
                    line: 259,
                    column: 10
                }
            },
            "90": {
                start: {
                    line: 262,
                    column: 8
                },
                end: {
                    line: 262,
                    column: 50
                }
            },
            "91": {
                start: {
                    line: 266,
                    column: 8
                },
                end: {
                    line: 266,
                    column: 59
                }
            },
            "92": {
                start: {
                    line: 267,
                    column: 8
                },
                end: {
                    line: 267,
                    column: 48
                }
            },
            "93": {
                start: {
                    line: 275,
                    column: 4
                },
                end: {
                    line: 278,
                    column: 5
                }
            },
            "94": {
                start: {
                    line: 276,
                    column: 6
                },
                end: {
                    line: 276,
                    column: 55
                }
            },
            "95": {
                start: {
                    line: 277,
                    column: 6
                },
                end: {
                    line: 277,
                    column: 13
                }
            },
            "96": {
                start: {
                    line: 280,
                    column: 4
                },
                end: {
                    line: 292,
                    column: 9
                }
            },
            "97": {
                start: {
                    line: 283,
                    column: 8
                },
                end: {
                    line: 283,
                    column: 39
                }
            },
            "98": {
                start: {
                    line: 284,
                    column: 8
                },
                end: {
                    line: 284,
                    column: 28
                }
            },
            "99": {
                start: {
                    line: 286,
                    column: 8
                },
                end: {
                    line: 286,
                    column: 40
                }
            },
            "100": {
                start: {
                    line: 287,
                    column: 8
                },
                end: {
                    line: 287,
                    column: 51
                }
            },
            "101": {
                start: {
                    line: 290,
                    column: 8
                },
                end: {
                    line: 290,
                    column: 62
                }
            },
            "102": {
                start: {
                    line: 291,
                    column: 8
                },
                end: {
                    line: 291,
                    column: 69
                }
            },
            "103": {
                start: {
                    line: 301,
                    column: 4
                },
                end: {
                    line: 301,
                    column: 53
                }
            },
            "104": {
                start: {
                    line: 303,
                    column: 4
                },
                end: {
                    line: 303,
                    column: 49
                }
            },
            "105": {
                start: {
                    line: 304,
                    column: 4
                },
                end: {
                    line: 312,
                    column: 9
                }
            },
            "106": {
                start: {
                    line: 307,
                    column: 8
                },
                end: {
                    line: 307,
                    column: 62
                }
            },
            "107": {
                start: {
                    line: 310,
                    column: 8
                },
                end: {
                    line: 310,
                    column: 73
                }
            },
            "108": {
                start: {
                    line: 311,
                    column: 8
                },
                end: {
                    line: 311,
                    column: 69
                }
            },
            "109": {
                start: {
                    line: 320,
                    column: 24
                },
                end: {
                    line: 320,
                    column: 44
                }
            },
            "110": {
                start: {
                    line: 321,
                    column: 22
                },
                end: {
                    line: 321,
                    column: 50
                }
            },
            "111": {
                start: {
                    line: 323,
                    column: 4
                },
                end: {
                    line: 323,
                    column: 38
                }
            },
            "112": {
                start: {
                    line: 325,
                    column: 4
                },
                end: {
                    line: 325,
                    column: 50
                }
            },
            "113": {
                start: {
                    line: 326,
                    column: 4
                },
                end: {
                    line: 326,
                    column: 53
                }
            },
            "114": {
                start: {
                    line: 327,
                    column: 4
                },
                end: {
                    line: 336,
                    column: 9
                }
            },
            "115": {
                start: {
                    line: 330,
                    column: 8
                },
                end: {
                    line: 330,
                    column: 72
                }
            },
            "116": {
                start: {
                    line: 331,
                    column: 8
                },
                end: {
                    line: 331,
                    column: 74
                }
            },
            "117": {
                start: {
                    line: 334,
                    column: 8
                },
                end: {
                    line: 334,
                    column: 74
                }
            },
            "118": {
                start: {
                    line: 335,
                    column: 8
                },
                end: {
                    line: 335,
                    column: 67
                }
            },
            "119": {
                start: {
                    line: 344,
                    column: 24
                },
                end: {
                    line: 344,
                    column: 44
                }
            },
            "120": {
                start: {
                    line: 345,
                    column: 20
                },
                end: {
                    line: 345,
                    column: 46
                }
            },
            "121": {
                start: {
                    line: 347,
                    column: 6
                },
                end: {
                    line: 347,
                    column: 63
                }
            },
            "122": {
                start: {
                    line: 349,
                    column: 4
                },
                end: {
                    line: 349,
                    column: 56
                }
            },
            "123": {
                start: {
                    line: 351,
                    column: 4
                },
                end: {
                    line: 351,
                    column: 34
                }
            },
            "124": {
                start: {
                    line: 353,
                    column: 4
                },
                end: {
                    line: 353,
                    column: 47
                }
            },
            "125": {
                start: {
                    line: 355,
                    column: 4
                },
                end: {
                    line: 355,
                    column: 44
                }
            },
            "126": {
                start: {
                    line: 358,
                    column: 4
                },
                end: {
                    line: 358,
                    column: 33
                }
            },
            "127": {
                start: {
                    line: 365,
                    column: 31
                },
                end: {
                    line: 365,
                    column: 77
                }
            },
            "128": {
                start: {
                    line: 366,
                    column: 4
                },
                end: {
                    line: 369,
                    column: 5
                }
            },
            "129": {
                start: {
                    line: 367,
                    column: 6
                },
                end: {
                    line: 367,
                    column: 24
                }
            },
            "130": {
                start: {
                    line: 368,
                    column: 6
                },
                end: {
                    line: 368,
                    column: 34
                }
            },
            "131": {
                start: {
                    line: 372,
                    column: 31
                },
                end: {
                    line: 372,
                    column: 55
                }
            },
            "132": {
                start: {
                    line: 373,
                    column: 4
                },
                end: {
                    line: 373,
                    column: 49
                }
            },
            "133": {
                start: {
                    line: 375,
                    column: 23
                },
                end: {
                    line: 375,
                    column: 52
                }
            },
            "134": {
                start: {
                    line: 377,
                    column: 4
                },
                end: {
                    line: 384,
                    column: 5
                }
            },
            "135": {
                start: {
                    line: 378,
                    column: 25
                },
                end: {
                    line: 380,
                    column: 28
                }
            },
            "136": {
                start: {
                    line: 381,
                    column: 6
                },
                end: {
                    line: 383,
                    column: 7
                }
            },
            "137": {
                start: {
                    line: 382,
                    column: 8
                },
                end: {
                    line: 382,
                    column: 40
                }
            },
            "138": {
                start: {
                    line: 386,
                    column: 24
                },
                end: {
                    line: 386,
                    column: 63
                }
            },
            "139": {
                start: {
                    line: 387,
                    column: 4
                },
                end: {
                    line: 391,
                    column: 5
                }
            },
            "140": {
                start: {
                    line: 388,
                    column: 6
                },
                end: {
                    line: 388,
                    column: 50
                }
            },
            "141": {
                start: {
                    line: 390,
                    column: 6
                },
                end: {
                    line: 390,
                    column: 57
                }
            },
            "142": {
                start: {
                    line: 394,
                    column: 24
                },
                end: {
                    line: 394,
                    column: 63
                }
            },
            "143": {
                start: {
                    line: 395,
                    column: 4
                },
                end: {
                    line: 397,
                    column: 5
                }
            },
            "144": {
                start: {
                    line: 396,
                    column: 6
                },
                end: {
                    line: 396,
                    column: 27
                }
            },
            "145": {
                start: {
                    line: 407,
                    column: 4
                },
                end: {
                    line: 407,
                    column: 47
                }
            },
            "146": {
                start: {
                    line: 409,
                    column: 4
                },
                end: {
                    line: 409,
                    column: 80
                }
            },
            "147": {
                start: {
                    line: 410,
                    column: 4
                },
                end: {
                    line: 422,
                    column: 6
                }
            },
            "148": {
                start: {
                    line: 415,
                    column: 8
                },
                end: {
                    line: 415,
                    column: 51
                }
            },
            "149": {
                start: {
                    line: 416,
                    column: 8
                },
                end: {
                    line: 416,
                    column: 54
                }
            },
            "150": {
                start: {
                    line: 419,
                    column: 8
                },
                end: {
                    line: 419,
                    column: 68
                }
            },
            "151": {
                start: {
                    line: 420,
                    column: 8
                },
                end: {
                    line: 420,
                    column: 71
                }
            },
            "152": {
                start: {
                    line: 444,
                    column: 4
                },
                end: {
                    line: 444,
                    column: 80
                }
            },
            "153": {
                start: {
                    line: 445,
                    column: 4
                },
                end: {
                    line: 461,
                    column: 9
                }
            },
            "154": {
                start: {
                    line: 448,
                    column: 8
                },
                end: {
                    line: 448,
                    column: 54
                }
            },
            "155": {
                start: {
                    line: 452,
                    column: 8
                },
                end: {
                    line: 452,
                    column: 54
                }
            },
            "156": {
                start: {
                    line: 459,
                    column: 8
                },
                end: {
                    line: 459,
                    column: 68
                }
            },
            "157": {
                start: {
                    line: 460,
                    column: 8
                },
                end: {
                    line: 460,
                    column: 71
                }
            },
            "158": {
                start: {
                    line: 469,
                    column: 24
                },
                end: {
                    line: 469,
                    column: 44
                }
            },
            "159": {
                start: {
                    line: 470,
                    column: 24
                },
                end: {
                    line: 470,
                    column: 42
                }
            },
            "160": {
                start: {
                    line: 471,
                    column: 4
                },
                end: {
                    line: 471,
                    column: 67
                }
            },
            "161": {
                start: {
                    line: 474,
                    column: 23
                },
                end: {
                    line: 474,
                    column: 57
                }
            },
            "162": {
                start: {
                    line: 475,
                    column: 4
                },
                end: {
                    line: 478,
                    column: 5
                }
            },
            "163": {
                start: {
                    line: 476,
                    column: 6
                },
                end: {
                    line: 476,
                    column: 65
                }
            },
            "164": {
                start: {
                    line: 477,
                    column: 6
                },
                end: {
                    line: 477,
                    column: 13
                }
            },
            "165": {
                start: {
                    line: 480,
                    column: 19
                },
                end: {
                    line: 482,
                    column: 26
                }
            },
            "166": {
                start: {
                    line: 483,
                    column: 4
                },
                end: {
                    line: 486,
                    column: 5
                }
            },
            "167": {
                start: {
                    line: 484,
                    column: 6
                },
                end: {
                    line: 484,
                    column: 65
                }
            },
            "168": {
                start: {
                    line: 485,
                    column: 6
                },
                end: {
                    line: 485,
                    column: 13
                }
            },
            "169": {
                start: {
                    line: 487,
                    column: 4
                },
                end: {
                    line: 487,
                    column: 56
                }
            },
            "170": {
                start: {
                    line: 488,
                    column: 4
                },
                end: {
                    line: 507,
                    column: 5
                }
            },
            "171": {
                start: {
                    line: 490,
                    column: 6
                },
                end: {
                    line: 506,
                    column: 11
                }
            },
            "172": {
                start: {
                    line: 498,
                    column: 10
                },
                end: {
                    line: 498,
                    column: 59
                }
            },
            "173": {
                start: {
                    line: 505,
                    column: 10
                },
                end: {
                    line: 505,
                    column: 73
                }
            },
            "174": {
                start: {
                    line: 508,
                    column: 4
                },
                end: {
                    line: 525,
                    column: 5
                }
            },
            "175": {
                start: {
                    line: 510,
                    column: 6
                },
                end: {
                    line: 524,
                    column: 11
                }
            },
            "176": {
                start: {
                    line: 519,
                    column: 10
                },
                end: {
                    line: 519,
                    column: 59
                }
            },
            "177": {
                start: {
                    line: 523,
                    column: 10
                },
                end: {
                    line: 523,
                    column: 73
                }
            },
            "178": {
                start: {
                    line: 526,
                    column: 4
                },
                end: {
                    line: 526,
                    column: 33
                }
            },
            "179": {
                start: {
                    line: 536,
                    column: 24
                },
                end: {
                    line: 536,
                    column: 44
                }
            },
            "180": {
                start: {
                    line: 537,
                    column: 25
                },
                end: {
                    line: 537,
                    column: 43
                }
            },
            "181": {
                start: {
                    line: 539,
                    column: 27
                },
                end: {
                    line: 541,
                    column: 5
                }
            },
            "182": {
                start: {
                    line: 543,
                    column: 4
                },
                end: {
                    line: 543,
                    column: 34
                }
            },
            "183": {
                start: {
                    line: 544,
                    column: 4
                },
                end: {
                    line: 544,
                    column: 71
                }
            },
            "184": {
                start: {
                    line: 546,
                    column: 4
                },
                end: {
                    line: 548,
                    column: 28
                }
            },
            "185": {
                start: {
                    line: 549,
                    column: 31
                },
                end: {
                    line: 549,
                    column: 54
                }
            },
            "186": {
                start: {
                    line: 550,
                    column: 23
                },
                end: {
                    line: 550,
                    column: 57
                }
            },
            "187": {
                start: {
                    line: 551,
                    column: 4
                },
                end: {
                    line: 554,
                    column: 5
                }
            },
            "188": {
                start: {
                    line: 552,
                    column: 6
                },
                end: {
                    line: 552,
                    column: 65
                }
            },
            "189": {
                start: {
                    line: 553,
                    column: 6
                },
                end: {
                    line: 553,
                    column: 13
                }
            },
            "190": {
                start: {
                    line: 564,
                    column: 4
                },
                end: {
                    line: 584,
                    column: 5
                }
            },
            "191": {
                start: {
                    line: 566,
                    column: 6
                },
                end: {
                    line: 566,
                    column: 80
                }
            },
            "192": {
                start: {
                    line: 568,
                    column: 6
                },
                end: {
                    line: 571,
                    column: 9
                }
            },
            "193": {
                start: {
                    line: 574,
                    column: 27
                },
                end: {
                    line: 576,
                    column: 27
                }
            },
            "194": {
                start: {
                    line: 578,
                    column: 6
                },
                end: {
                    line: 582,
                    column: 7
                }
            },
            "195": {
                start: {
                    line: 579,
                    column: 8
                },
                end: {
                    line: 579,
                    column: 44
                }
            },
            "196": {
                start: {
                    line: 581,
                    column: 8
                },
                end: {
                    line: 581,
                    column: 73
                }
            },
            "197": {
                start: {
                    line: 583,
                    column: 6
                },
                end: {
                    line: 583,
                    column: 68
                }
            },
            "198": {
                start: {
                    line: 587,
                    column: 23
                },
                end: {
                    line: 589,
                    column: 26
                }
            },
            "199": {
                start: {
                    line: 591,
                    column: 4
                },
                end: {
                    line: 595,
                    column: 5
                }
            },
            "200": {
                start: {
                    line: 592,
                    column: 6
                },
                end: {
                    line: 592,
                    column: 39
                }
            },
            "201": {
                start: {
                    line: 594,
                    column: 6
                },
                end: {
                    line: 594,
                    column: 69
                }
            },
            "202": {
                start: {
                    line: 597,
                    column: 24
                },
                end: {
                    line: 599,
                    column: 26
                }
            },
            "203": {
                start: {
                    line: 600,
                    column: 4
                },
                end: {
                    line: 603,
                    column: 5
                }
            },
            "204": {
                start: {
                    line: 601,
                    column: 6
                },
                end: {
                    line: 601,
                    column: 42
                }
            },
            "205": {
                start: {
                    line: 602,
                    column: 6
                },
                end: {
                    line: 602,
                    column: 47
                }
            },
            "206": {
                start: {
                    line: 605,
                    column: 4
                },
                end: {
                    line: 607,
                    column: 7
                }
            },
            "207": {
                start: {
                    line: 606,
                    column: 6
                },
                end: {
                    line: 606,
                    column: 35
                }
            },
            "208": {
                start: {
                    line: 615,
                    column: 24
                },
                end: {
                    line: 615,
                    column: 44
                }
            },
            "209": {
                start: {
                    line: 616,
                    column: 30
                },
                end: {
                    line: 616,
                    column: 62
                }
            },
            "210": {
                start: {
                    line: 618,
                    column: 4
                },
                end: {
                    line: 622,
                    column: 5
                }
            },
            "211": {
                start: {
                    line: 619,
                    column: 6
                },
                end: {
                    line: 619,
                    column: 70
                }
            },
            "212": {
                start: {
                    line: 620,
                    column: 6
                },
                end: {
                    line: 620,
                    column: 75
                }
            },
            "213": {
                start: {
                    line: 621,
                    column: 6
                },
                end: {
                    line: 621,
                    column: 13
                }
            },
            "214": {
                start: {
                    line: 624,
                    column: 4
                },
                end: {
                    line: 624,
                    column: 66
                }
            },
            "215": {
                start: {
                    line: 626,
                    column: 4
                },
                end: {
                    line: 646,
                    column: 9
                }
            },
            "216": {
                start: {
                    line: 629,
                    column: 8
                },
                end: {
                    line: 629,
                    column: 44
                }
            },
            "217": {
                start: {
                    line: 630,
                    column: 8
                },
                end: {
                    line: 630,
                    column: 42
                }
            },
            "218": {
                start: {
                    line: 631,
                    column: 8
                },
                end: {
                    line: 631,
                    column: 42
                }
            },
            "219": {
                start: {
                    line: 634,
                    column: 8
                },
                end: {
                    line: 640,
                    column: 10
                }
            },
            "220": {
                start: {
                    line: 641,
                    column: 8
                },
                end: {
                    line: 641,
                    column: 51
                }
            },
            "221": {
                start: {
                    line: 644,
                    column: 8
                },
                end: {
                    line: 644,
                    column: 34
                }
            },
            "222": {
                start: {
                    line: 645,
                    column: 8
                },
                end: {
                    line: 645,
                    column: 62
                }
            },
            "223": {
                start: {
                    line: 654,
                    column: 24
                },
                end: {
                    line: 654,
                    column: 44
                }
            },
            "224": {
                start: {
                    line: 655,
                    column: 34
                },
                end: {
                    line: 655,
                    column: 66
                }
            },
            "225": {
                start: {
                    line: 657,
                    column: 4
                },
                end: {
                    line: 661,
                    column: 5
                }
            },
            "226": {
                start: {
                    line: 658,
                    column: 6
                },
                end: {
                    line: 658,
                    column: 70
                }
            },
            "227": {
                start: {
                    line: 659,
                    column: 6
                },
                end: {
                    line: 659,
                    column: 75
                }
            },
            "228": {
                start: {
                    line: 660,
                    column: 6
                },
                end: {
                    line: 660,
                    column: 13
                }
            },
            "229": {
                start: {
                    line: 663,
                    column: 4
                },
                end: {
                    line: 663,
                    column: 70
                }
            },
            "230": {
                start: {
                    line: 665,
                    column: 4
                },
                end: {
                    line: 676,
                    column: 9
                }
            },
            "231": {
                start: {
                    line: 668,
                    column: 8
                },
                end: {
                    line: 668,
                    column: 44
                }
            },
            "232": {
                start: {
                    line: 669,
                    column: 8
                },
                end: {
                    line: 669,
                    column: 72
                }
            },
            "233": {
                start: {
                    line: 670,
                    column: 8
                },
                end: {
                    line: 670,
                    column: 35
                }
            },
            "234": {
                start: {
                    line: 674,
                    column: 8
                },
                end: {
                    line: 674,
                    column: 56
                }
            },
            "235": {
                start: {
                    line: 675,
                    column: 8
                },
                end: {
                    line: 675,
                    column: 62
                }
            },
            "236": {
                start: {
                    line: 684,
                    column: 24
                },
                end: {
                    line: 684,
                    column: 44
                }
            },
            "237": {
                start: {
                    line: 685,
                    column: 32
                },
                end: {
                    line: 685,
                    column: 62
                }
            },
            "238": {
                start: {
                    line: 687,
                    column: 4
                },
                end: {
                    line: 691,
                    column: 5
                }
            },
            "239": {
                start: {
                    line: 688,
                    column: 6
                },
                end: {
                    line: 688,
                    column: 66
                }
            },
            "240": {
                start: {
                    line: 689,
                    column: 6
                },
                end: {
                    line: 689,
                    column: 71
                }
            },
            "241": {
                start: {
                    line: 690,
                    column: 6
                },
                end: {
                    line: 690,
                    column: 13
                }
            },
            "242": {
                start: {
                    line: 693,
                    column: 4
                },
                end: {
                    line: 697,
                    column: 5
                }
            },
            "243": {
                start: {
                    line: 694,
                    column: 6
                },
                end: {
                    line: 694,
                    column: 66
                }
            },
            "244": {
                start: {
                    line: 695,
                    column: 6
                },
                end: {
                    line: 695,
                    column: 74
                }
            },
            "245": {
                start: {
                    line: 696,
                    column: 6
                },
                end: {
                    line: 696,
                    column: 13
                }
            },
            "246": {
                start: {
                    line: 699,
                    column: 4
                },
                end: {
                    line: 703,
                    column: 6
                }
            },
            "247": {
                start: {
                    line: 705,
                    column: 22
                },
                end: {
                    line: 705,
                    column: 43
                }
            },
            "248": {
                start: {
                    line: 707,
                    column: 4
                },
                end: {
                    line: 723,
                    column: 9
                }
            },
            "249": {
                start: {
                    line: 710,
                    column: 8
                },
                end: {
                    line: 710,
                    column: 42
                }
            },
            "250": {
                start: {
                    line: 711,
                    column: 8
                },
                end: {
                    line: 717,
                    column: 10
                }
            },
            "251": {
                start: {
                    line: 718,
                    column: 8
                },
                end: {
                    line: 718,
                    column: 59
                }
            },
            "252": {
                start: {
                    line: 721,
                    column: 8
                },
                end: {
                    line: 721,
                    column: 34
                }
            },
            "253": {
                start: {
                    line: 722,
                    column: 8
                },
                end: {
                    line: 722,
                    column: 60
                }
            },
            "254": {
                start: {
                    line: 731,
                    column: 24
                },
                end: {
                    line: 731,
                    column: 44
                }
            },
            "255": {
                start: {
                    line: 732,
                    column: 32
                },
                end: {
                    line: 732,
                    column: 62
                }
            },
            "256": {
                start: {
                    line: 734,
                    column: 4
                },
                end: {
                    line: 738,
                    column: 5
                }
            },
            "257": {
                start: {
                    line: 735,
                    column: 6
                },
                end: {
                    line: 735,
                    column: 66
                }
            },
            "258": {
                start: {
                    line: 736,
                    column: 6
                },
                end: {
                    line: 736,
                    column: 71
                }
            },
            "259": {
                start: {
                    line: 737,
                    column: 6
                },
                end: {
                    line: 737,
                    column: 13
                }
            },
            "260": {
                start: {
                    line: 740,
                    column: 4
                },
                end: {
                    line: 744,
                    column: 5
                }
            },
            "261": {
                start: {
                    line: 741,
                    column: 6
                },
                end: {
                    line: 741,
                    column: 66
                }
            },
            "262": {
                start: {
                    line: 742,
                    column: 6
                },
                end: {
                    line: 742,
                    column: 74
                }
            },
            "263": {
                start: {
                    line: 743,
                    column: 6
                },
                end: {
                    line: 743,
                    column: 13
                }
            },
            "264": {
                start: {
                    line: 746,
                    column: 4
                },
                end: {
                    line: 750,
                    column: 6
                }
            },
            "265": {
                start: {
                    line: 752,
                    column: 4
                },
                end: {
                    line: 779,
                    column: 9
                }
            },
            "266": {
                start: {
                    line: 755,
                    column: 8
                },
                end: {
                    line: 755,
                    column: 42
                }
            },
            "267": {
                start: {
                    line: 756,
                    column: 8
                },
                end: {
                    line: 758,
                    column: 10
                }
            },
            "268": {
                start: {
                    line: 760,
                    column: 8
                },
                end: {
                    line: 766,
                    column: 9
                }
            },
            "269": {
                start: {
                    line: 761,
                    column: 10
                },
                end: {
                    line: 763,
                    column: 12
                }
            },
            "270": {
                start: {
                    line: 764,
                    column: 10
                },
                end: {
                    line: 764,
                    column: 53
                }
            },
            "271": {
                start: {
                    line: 765,
                    column: 10
                },
                end: {
                    line: 765,
                    column: 53
                }
            },
            "272": {
                start: {
                    line: 768,
                    column: 8
                },
                end: {
                    line: 774,
                    column: 10
                }
            },
            "273": {
                start: {
                    line: 777,
                    column: 8
                },
                end: {
                    line: 777,
                    column: 54
                }
            },
            "274": {
                start: {
                    line: 778,
                    column: 8
                },
                end: {
                    line: 778,
                    column: 60
                }
            },
            "275": {
                start: {
                    line: 787,
                    column: 4
                },
                end: {
                    line: 791,
                    column: 5
                }
            },
            "276": {
                start: {
                    line: 788,
                    column: 6
                },
                end: {
                    line: 788,
                    column: 49
                }
            },
            "277": {
                start: {
                    line: 790,
                    column: 6
                },
                end: {
                    line: 790,
                    column: 61
                }
            },
            "278": {
                start: {
                    line: 799,
                    column: 25
                },
                end: {
                    line: 799,
                    column: 45
                }
            },
            "279": {
                start: {
                    line: 800,
                    column: 2
                },
                end: {
                    line: 800,
                    column: 30
                }
            },
            "280": {
                start: {
                    line: 806,
                    column: 0
                },
                end: {
                    line: 808,
                    column: 3
                }
            },
            "281": {
                start: {
                    line: 807,
                    column: 2
                },
                end: {
                    line: 807,
                    column: 9
                }
            }
        },
        fnMap: {
            "0": {
                name: "(anonymous_0)",
                decl: {
                    start: {
                        line: 63,
                        column: 2
                    },
                    end: {
                        line: 63,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 63,
                        column: 16
                    },
                    end: {
                        line: 118,
                        column: 3
                    }
                },
                line: 63
            },
            "1": {
                name: "(anonymous_1)",
                decl: {
                    start: {
                        line: 123,
                        column: 2
                    },
                    end: {
                        line: 123,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 123,
                        column: 28
                    },
                    end: {
                        line: 126,
                        column: 3
                    }
                },
                line: 123
            },
            "2": {
                name: "(anonymous_2)",
                decl: {
                    start: {
                        line: 131,
                        column: 2
                    },
                    end: {
                        line: 131,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 131,
                        column: 38
                    },
                    end: {
                        line: 177,
                        column: 3
                    }
                },
                line: 131
            },
            "3": {
                name: "(anonymous_3)",
                decl: {
                    start: {
                        line: 133,
                        column: 47
                    },
                    end: {
                        line: 133,
                        column: 48
                    }
                },
                loc: {
                    start: {
                        line: 134,
                        column: 6
                    },
                    end: {
                        line: 134,
                        column: 36
                    }
                },
                line: 134
            },
            "4": {
                name: "(anonymous_4)",
                decl: {
                    start: {
                        line: 136,
                        column: 40
                    },
                    end: {
                        line: 136,
                        column: 41
                    }
                },
                loc: {
                    start: {
                        line: 136,
                        column: 46
                    },
                    end: {
                        line: 136,
                        column: 65
                    }
                },
                line: 136
            },
            "5": {
                name: "(anonymous_5)",
                decl: {
                    start: {
                        line: 139,
                        column: 48
                    },
                    end: {
                        line: 139,
                        column: 49
                    }
                },
                loc: {
                    start: {
                        line: 140,
                        column: 6
                    },
                    end: {
                        line: 140,
                        column: 32
                    }
                },
                line: 140
            },
            "6": {
                name: "(anonymous_6)",
                decl: {
                    start: {
                        line: 144,
                        column: 49
                    },
                    end: {
                        line: 144,
                        column: 50
                    }
                },
                loc: {
                    start: {
                        line: 145,
                        column: 6
                    },
                    end: {
                        line: 145,
                        column: 38
                    }
                },
                line: 145
            },
            "7": {
                name: "(anonymous_7)",
                decl: {
                    start: {
                        line: 147,
                        column: 43
                    },
                    end: {
                        line: 147,
                        column: 44
                    }
                },
                loc: {
                    start: {
                        line: 148,
                        column: 6
                    },
                    end: {
                        line: 148,
                        column: 37
                    }
                },
                line: 148
            },
            "8": {
                name: "(anonymous_8)",
                decl: {
                    start: {
                        line: 152,
                        column: 51
                    },
                    end: {
                        line: 152,
                        column: 52
                    }
                },
                loc: {
                    start: {
                        line: 153,
                        column: 6
                    },
                    end: {
                        line: 153,
                        column: 39
                    }
                },
                line: 153
            },
            "9": {
                name: "(anonymous_9)",
                decl: {
                    start: {
                        line: 155,
                        column: 51
                    },
                    end: {
                        line: 155,
                        column: 52
                    }
                },
                loc: {
                    start: {
                        line: 156,
                        column: 6
                    },
                    end: {
                        line: 156,
                        column: 39
                    }
                },
                line: 156
            },
            "10": {
                name: "(anonymous_10)",
                decl: {
                    start: {
                        line: 159,
                        column: 49
                    },
                    end: {
                        line: 159,
                        column: 50
                    }
                },
                loc: {
                    start: {
                        line: 160,
                        column: 6
                    },
                    end: {
                        line: 160,
                        column: 37
                    }
                },
                line: 160
            },
            "11": {
                name: "(anonymous_11)",
                decl: {
                    start: {
                        line: 162,
                        column: 49
                    },
                    end: {
                        line: 162,
                        column: 50
                    }
                },
                loc: {
                    start: {
                        line: 163,
                        column: 6
                    },
                    end: {
                        line: 163,
                        column: 37
                    }
                },
                line: 163
            },
            "12": {
                name: "(anonymous_12)",
                decl: {
                    start: {
                        line: 165,
                        column: 50
                    },
                    end: {
                        line: 165,
                        column: 51
                    }
                },
                loc: {
                    start: {
                        line: 166,
                        column: 6
                    },
                    end: {
                        line: 166,
                        column: 34
                    }
                },
                line: 166
            },
            "13": {
                name: "(anonymous_13)",
                decl: {
                    start: {
                        line: 168,
                        column: 46
                    },
                    end: {
                        line: 168,
                        column: 47
                    }
                },
                loc: {
                    start: {
                        line: 169,
                        column: 6
                    },
                    end: {
                        line: 169,
                        column: 33
                    }
                },
                line: 169
            },
            "14": {
                name: "(anonymous_14)",
                decl: {
                    start: {
                        line: 172,
                        column: 42
                    },
                    end: {
                        line: 172,
                        column: 43
                    }
                },
                loc: {
                    start: {
                        line: 172,
                        column: 60
                    },
                    end: {
                        line: 176,
                        column: 5
                    }
                },
                line: 172
            },
            "15": {
                name: "(anonymous_15)",
                decl: {
                    start: {
                        line: 190,
                        column: 2
                    },
                    end: {
                        line: 190,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 190,
                        column: 71
                    },
                    end: {
                        line: 234,
                        column: 3
                    }
                },
                line: 190
            },
            "16": {
                name: "(anonymous_16)",
                decl: {
                    start: {
                        line: 204,
                        column: 12
                    },
                    end: {
                        line: 204,
                        column: 13
                    }
                },
                loc: {
                    start: {
                        line: 204,
                        column: 23
                    },
                    end: {
                        line: 226,
                        column: 7
                    }
                },
                line: 204
            },
            "17": {
                name: "(anonymous_17)",
                decl: {
                    start: {
                        line: 205,
                        column: 32
                    },
                    end: {
                        line: 205,
                        column: 33
                    }
                },
                loc: {
                    start: {
                        line: 205,
                        column: 39
                    },
                    end: {
                        line: 205,
                        column: 58
                    }
                },
                line: 205
            },
            "18": {
                name: "(anonymous_18)",
                decl: {
                    start: {
                        line: 219,
                        column: 16
                    },
                    end: {
                        line: 219,
                        column: 17
                    }
                },
                loc: {
                    start: {
                        line: 219,
                        column: 22
                    },
                    end: {
                        line: 225,
                        column: 11
                    }
                },
                line: 219
            },
            "19": {
                name: "(anonymous_19)",
                decl: {
                    start: {
                        line: 227,
                        column: 13
                    },
                    end: {
                        line: 227,
                        column: 14
                    }
                },
                loc: {
                    start: {
                        line: 227,
                        column: 24
                    },
                    end: {
                        line: 229,
                        column: 7
                    }
                },
                line: 227
            },
            "20": {
                name: "(anonymous_20)",
                decl: {
                    start: {
                        line: 230,
                        column: 15
                    },
                    end: {
                        line: 230,
                        column: 16
                    }
                },
                loc: {
                    start: {
                        line: 230,
                        column: 21
                    },
                    end: {
                        line: 233,
                        column: 7
                    }
                },
                line: 230
            },
            "21": {
                name: "(anonymous_21)",
                decl: {
                    start: {
                        line: 240,
                        column: 2
                    },
                    end: {
                        line: 240,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 240,
                        column: 49
                    },
                    end: {
                        line: 269,
                        column: 3
                    }
                },
                line: 240
            },
            "22": {
                name: "(anonymous_22)",
                decl: {
                    start: {
                        line: 252,
                        column: 12
                    },
                    end: {
                        line: 252,
                        column: 13
                    }
                },
                loc: {
                    start: {
                        line: 252,
                        column: 23
                    },
                    end: {
                        line: 264,
                        column: 7
                    }
                },
                line: 252
            },
            "23": {
                name: "(anonymous_23)",
                decl: {
                    start: {
                        line: 265,
                        column: 13
                    },
                    end: {
                        line: 265,
                        column: 14
                    }
                },
                loc: {
                    start: {
                        line: 265,
                        column: 24
                    },
                    end: {
                        line: 268,
                        column: 7
                    }
                },
                line: 265
            },
            "24": {
                name: "(anonymous_24)",
                decl: {
                    start: {
                        line: 274,
                        column: 2
                    },
                    end: {
                        line: 274,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 274,
                        column: 31
                    },
                    end: {
                        line: 294,
                        column: 3
                    }
                },
                line: 274
            },
            "25": {
                name: "(anonymous_25)",
                decl: {
                    start: {
                        line: 282,
                        column: 12
                    },
                    end: {
                        line: 282,
                        column: 13
                    }
                },
                loc: {
                    start: {
                        line: 282,
                        column: 18
                    },
                    end: {
                        line: 288,
                        column: 7
                    }
                },
                line: 282
            },
            "26": {
                name: "(anonymous_26)",
                decl: {
                    start: {
                        line: 289,
                        column: 13
                    },
                    end: {
                        line: 289,
                        column: 14
                    }
                },
                loc: {
                    start: {
                        line: 289,
                        column: 24
                    },
                    end: {
                        line: 292,
                        column: 7
                    }
                },
                line: 289
            },
            "27": {
                name: "(anonymous_27)",
                decl: {
                    start: {
                        line: 300,
                        column: 2
                    },
                    end: {
                        line: 300,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 300,
                        column: 38
                    },
                    end: {
                        line: 313,
                        column: 3
                    }
                },
                line: 300
            },
            "28": {
                name: "(anonymous_28)",
                decl: {
                    start: {
                        line: 306,
                        column: 12
                    },
                    end: {
                        line: 306,
                        column: 13
                    }
                },
                loc: {
                    start: {
                        line: 306,
                        column: 31
                    },
                    end: {
                        line: 308,
                        column: 7
                    }
                },
                line: 306
            },
            "29": {
                name: "(anonymous_29)",
                decl: {
                    start: {
                        line: 309,
                        column: 13
                    },
                    end: {
                        line: 309,
                        column: 14
                    }
                },
                loc: {
                    start: {
                        line: 309,
                        column: 24
                    },
                    end: {
                        line: 312,
                        column: 7
                    }
                },
                line: 309
            },
            "30": {
                name: "(anonymous_30)",
                decl: {
                    start: {
                        line: 319,
                        column: 2
                    },
                    end: {
                        line: 319,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 319,
                        column: 51
                    },
                    end: {
                        line: 337,
                        column: 3
                    }
                },
                line: 319
            },
            "31": {
                name: "(anonymous_31)",
                decl: {
                    start: {
                        line: 329,
                        column: 12
                    },
                    end: {
                        line: 329,
                        column: 13
                    }
                },
                loc: {
                    start: {
                        line: 329,
                        column: 29
                    },
                    end: {
                        line: 332,
                        column: 7
                    }
                },
                line: 329
            },
            "32": {
                name: "(anonymous_32)",
                decl: {
                    start: {
                        line: 333,
                        column: 13
                    },
                    end: {
                        line: 333,
                        column: 14
                    }
                },
                loc: {
                    start: {
                        line: 333,
                        column: 24
                    },
                    end: {
                        line: 336,
                        column: 7
                    }
                },
                line: 333
            },
            "33": {
                name: "(anonymous_33)",
                decl: {
                    start: {
                        line: 343,
                        column: 2
                    },
                    end: {
                        line: 343,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 343,
                        column: 50
                    },
                    end: {
                        line: 359,
                        column: 3
                    }
                },
                line: 343
            },
            "34": {
                name: "(anonymous_34)",
                decl: {
                    start: {
                        line: 364,
                        column: 2
                    },
                    end: {
                        line: 364,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 364,
                        column: 40
                    },
                    end: {
                        line: 398,
                        column: 3
                    }
                },
                line: 364
            },
            "35": {
                name: "(anonymous_35)",
                decl: {
                    start: {
                        line: 405,
                        column: 2
                    },
                    end: {
                        line: 405,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 405,
                        column: 66
                    },
                    end: {
                        line: 436,
                        column: 3
                    }
                },
                line: 405
            },
            "36": {
                name: "(anonymous_36)",
                decl: {
                    start: {
                        line: 414,
                        column: 6
                    },
                    end: {
                        line: 414,
                        column: 7
                    }
                },
                loc: {
                    start: {
                        line: 414,
                        column: 16
                    },
                    end: {
                        line: 417,
                        column: 7
                    }
                },
                line: 414
            },
            "37": {
                name: "(anonymous_37)",
                decl: {
                    start: {
                        line: 418,
                        column: 6
                    },
                    end: {
                        line: 418,
                        column: 7
                    }
                },
                loc: {
                    start: {
                        line: 418,
                        column: 17
                    },
                    end: {
                        line: 421,
                        column: 7
                    }
                },
                line: 418
            },
            "38": {
                name: "(anonymous_38)",
                decl: {
                    start: {
                        line: 443,
                        column: 2
                    },
                    end: {
                        line: 443,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 443,
                        column: 63
                    },
                    end: {
                        line: 462,
                        column: 3
                    }
                },
                line: 443
            },
            "39": {
                name: "(anonymous_39)",
                decl: {
                    start: {
                        line: 447,
                        column: 12
                    },
                    end: {
                        line: 447,
                        column: 13
                    }
                },
                loc: {
                    start: {
                        line: 447,
                        column: 23
                    },
                    end: {
                        line: 457,
                        column: 7
                    }
                },
                line: 447
            },
            "40": {
                name: "(anonymous_40)",
                decl: {
                    start: {
                        line: 458,
                        column: 13
                    },
                    end: {
                        line: 458,
                        column: 14
                    }
                },
                loc: {
                    start: {
                        line: 458,
                        column: 24
                    },
                    end: {
                        line: 461,
                        column: 7
                    }
                },
                line: 458
            },
            "41": {
                name: "(anonymous_41)",
                decl: {
                    start: {
                        line: 468,
                        column: 2
                    },
                    end: {
                        line: 468,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 468,
                        column: 46
                    },
                    end: {
                        line: 529,
                        column: 3
                    }
                },
                line: 468
            },
            "42": {
                name: "(anonymous_42)",
                decl: {
                    start: {
                        line: 497,
                        column: 14
                    },
                    end: {
                        line: 497,
                        column: 15
                    }
                },
                loc: {
                    start: {
                        line: 497,
                        column: 24
                    },
                    end: {
                        line: 503,
                        column: 9
                    }
                },
                line: 497
            },
            "43": {
                name: "(anonymous_43)",
                decl: {
                    start: {
                        line: 504,
                        column: 15
                    },
                    end: {
                        line: 504,
                        column: 16
                    }
                },
                loc: {
                    start: {
                        line: 504,
                        column: 26
                    },
                    end: {
                        line: 506,
                        column: 9
                    }
                },
                line: 504
            },
            "44": {
                name: "(anonymous_44)",
                decl: {
                    start: {
                        line: 518,
                        column: 14
                    },
                    end: {
                        line: 518,
                        column: 15
                    }
                },
                loc: {
                    start: {
                        line: 518,
                        column: 24
                    },
                    end: {
                        line: 521,
                        column: 9
                    }
                },
                line: 518
            },
            "45": {
                name: "(anonymous_45)",
                decl: {
                    start: {
                        line: 522,
                        column: 15
                    },
                    end: {
                        line: 522,
                        column: 16
                    }
                },
                loc: {
                    start: {
                        line: 522,
                        column: 26
                    },
                    end: {
                        line: 524,
                        column: 9
                    }
                },
                line: 522
            },
            "46": {
                name: "(anonymous_46)",
                decl: {
                    start: {
                        line: 535,
                        column: 2
                    },
                    end: {
                        line: 535,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 535,
                        column: 47
                    },
                    end: {
                        line: 608,
                        column: 3
                    }
                },
                line: 535
            },
            "47": {
                name: "(anonymous_47)",
                decl: {
                    start: {
                        line: 605,
                        column: 42
                    },
                    end: {
                        line: 605,
                        column: 43
                    }
                },
                loc: {
                    start: {
                        line: 605,
                        column: 48
                    },
                    end: {
                        line: 607,
                        column: 5
                    }
                },
                line: 605
            },
            "48": {
                name: "(anonymous_48)",
                decl: {
                    start: {
                        line: 614,
                        column: 2
                    },
                    end: {
                        line: 614,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 614,
                        column: 52
                    },
                    end: {
                        line: 647,
                        column: 3
                    }
                },
                line: 614
            },
            "49": {
                name: "(anonymous_49)",
                decl: {
                    start: {
                        line: 628,
                        column: 12
                    },
                    end: {
                        line: 628,
                        column: 13
                    }
                },
                loc: {
                    start: {
                        line: 628,
                        column: 22
                    },
                    end: {
                        line: 632,
                        column: 7
                    }
                },
                line: 628
            },
            "50": {
                name: "(anonymous_50)",
                decl: {
                    start: {
                        line: 633,
                        column: 12
                    },
                    end: {
                        line: 633,
                        column: 13
                    }
                },
                loc: {
                    start: {
                        line: 633,
                        column: 18
                    },
                    end: {
                        line: 642,
                        column: 7
                    }
                },
                line: 633
            },
            "51": {
                name: "(anonymous_51)",
                decl: {
                    start: {
                        line: 643,
                        column: 13
                    },
                    end: {
                        line: 643,
                        column: 14
                    }
                },
                loc: {
                    start: {
                        line: 643,
                        column: 24
                    },
                    end: {
                        line: 646,
                        column: 7
                    }
                },
                line: 643
            },
            "52": {
                name: "(anonymous_52)",
                decl: {
                    start: {
                        line: 653,
                        column: 2
                    },
                    end: {
                        line: 653,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 653,
                        column: 52
                    },
                    end: {
                        line: 677,
                        column: 3
                    }
                },
                line: 653
            },
            "53": {
                name: "(anonymous_53)",
                decl: {
                    start: {
                        line: 667,
                        column: 12
                    },
                    end: {
                        line: 667,
                        column: 13
                    }
                },
                loc: {
                    start: {
                        line: 667,
                        column: 22
                    },
                    end: {
                        line: 672,
                        column: 7
                    }
                },
                line: 667
            },
            "54": {
                name: "(anonymous_54)",
                decl: {
                    start: {
                        line: 673,
                        column: 13
                    },
                    end: {
                        line: 673,
                        column: 14
                    }
                },
                loc: {
                    start: {
                        line: 673,
                        column: 24
                    },
                    end: {
                        line: 676,
                        column: 7
                    }
                },
                line: 673
            },
            "55": {
                name: "(anonymous_55)",
                decl: {
                    start: {
                        line: 683,
                        column: 2
                    },
                    end: {
                        line: 683,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 683,
                        column: 50
                    },
                    end: {
                        line: 724,
                        column: 3
                    }
                },
                line: 683
            },
            "56": {
                name: "(anonymous_56)",
                decl: {
                    start: {
                        line: 709,
                        column: 12
                    },
                    end: {
                        line: 709,
                        column: 13
                    }
                },
                loc: {
                    start: {
                        line: 709,
                        column: 22
                    },
                    end: {
                        line: 719,
                        column: 7
                    }
                },
                line: 709
            },
            "57": {
                name: "(anonymous_57)",
                decl: {
                    start: {
                        line: 720,
                        column: 13
                    },
                    end: {
                        line: 720,
                        column: 14
                    }
                },
                loc: {
                    start: {
                        line: 720,
                        column: 24
                    },
                    end: {
                        line: 723,
                        column: 7
                    }
                },
                line: 720
            },
            "58": {
                name: "(anonymous_58)",
                decl: {
                    start: {
                        line: 730,
                        column: 2
                    },
                    end: {
                        line: 730,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 730,
                        column: 50
                    },
                    end: {
                        line: 780,
                        column: 3
                    }
                },
                line: 730
            },
            "59": {
                name: "(anonymous_59)",
                decl: {
                    start: {
                        line: 754,
                        column: 12
                    },
                    end: {
                        line: 754,
                        column: 13
                    }
                },
                loc: {
                    start: {
                        line: 754,
                        column: 18
                    },
                    end: {
                        line: 775,
                        column: 7
                    }
                },
                line: 754
            },
            "60": {
                name: "(anonymous_60)",
                decl: {
                    start: {
                        line: 776,
                        column: 13
                    },
                    end: {
                        line: 776,
                        column: 14
                    }
                },
                loc: {
                    start: {
                        line: 776,
                        column: 24
                    },
                    end: {
                        line: 779,
                        column: 7
                    }
                },
                line: 776
            },
            "61": {
                name: "(anonymous_61)",
                decl: {
                    start: {
                        line: 786,
                        column: 2
                    },
                    end: {
                        line: 786,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 786,
                        column: 54
                    },
                    end: {
                        line: 792,
                        column: 3
                    }
                },
                line: 786
            },
            "62": {
                name: "main",
                decl: {
                    start: {
                        line: 798,
                        column: 9
                    },
                    end: {
                        line: 798,
                        column: 13
                    }
                },
                loc: {
                    start: {
                        line: 798,
                        column: 22
                    },
                    end: {
                        line: 803,
                        column: 1
                    }
                },
                line: 798
            },
            "63": {
                name: "(anonymous_63)",
                decl: {
                    start: {
                        line: 806,
                        column: 46
                    },
                    end: {
                        line: 806,
                        column: 47
                    }
                },
                loc: {
                    start: {
                        line: 806,
                        column: 52
                    },
                    end: {
                        line: 808,
                        column: 1
                    }
                },
                line: 806
            }
        },
        branchMap: {
            "0": {
                loc: {
                    start: {
                        line: 30,
                        column: 29
                    },
                    end: {
                        line: 30,
                        column: 60
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 30,
                            column: 29
                        },
                        end: {
                            line: 30,
                            column: 54
                        }
                    },
                    {
                        start: {
                            line: 30,
                            column: 58
                        },
                        end: {
                            line: 30,
                            column: 60
                        }
                    }
                ],
                line: 30
            },
            "1": {
                loc: {
                    start: {
                        line: 31,
                        column: 29
                    },
                    end: {
                        line: 31,
                        column: 60
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 31,
                            column: 29
                        },
                        end: {
                            line: 31,
                            column: 54
                        }
                    },
                    {
                        start: {
                            line: 31,
                            column: 58
                        },
                        end: {
                            line: 31,
                            column: 60
                        }
                    }
                ],
                line: 31
            },
            "2": {
                loc: {
                    start: {
                        line: 32,
                        column: 25
                    },
                    end: {
                        line: 32,
                        column: 52
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 32,
                            column: 25
                        },
                        end: {
                            line: 32,
                            column: 46
                        }
                    },
                    {
                        start: {
                            line: 32,
                            column: 50
                        },
                        end: {
                            line: 32,
                            column: 52
                        }
                    }
                ],
                line: 32
            },
            "3": {
                loc: {
                    start: {
                        line: 69,
                        column: 4
                    },
                    end: {
                        line: 71,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 69,
                            column: 4
                        },
                        end: {
                            line: 71,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 69
            },
            "4": {
                loc: {
                    start: {
                        line: 207,
                        column: 8
                    },
                    end: {
                        line: 210,
                        column: 9
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 207,
                            column: 8
                        },
                        end: {
                            line: 210,
                            column: 9
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 207
            },
            "5": {
                loc: {
                    start: {
                        line: 213,
                        column: 10
                    },
                    end: {
                        line: 213,
                        column: 74
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 213,
                            column: 10
                        },
                        end: {
                            line: 213,
                            column: 65
                        }
                    },
                    {
                        start: {
                            line: 213,
                            column: 69
                        },
                        end: {
                            line: 213,
                            column: 74
                        }
                    }
                ],
                line: 213
            },
            "6": {
                loc: {
                    start: {
                        line: 222,
                        column: 26
                    },
                    end: {
                        line: 222,
                        column: 54
                    }
                },
                type: "cond-expr",
                locations: [
                    {
                        start: {
                            line: 222,
                            column: 35
                        },
                        end: {
                            line: 222,
                            column: 44
                        }
                    },
                    {
                        start: {
                            line: 222,
                            column: 47
                        },
                        end: {
                            line: 222,
                            column: 54
                        }
                    }
                ],
                line: 222
            },
            "7": {
                loc: {
                    start: {
                        line: 244,
                        column: 4
                    },
                    end: {
                        line: 247,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 244,
                            column: 4
                        },
                        end: {
                            line: 247,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 244
            },
            "8": {
                loc: {
                    start: {
                        line: 275,
                        column: 4
                    },
                    end: {
                        line: 278,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 275,
                            column: 4
                        },
                        end: {
                            line: 278,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 275
            },
            "9": {
                loc: {
                    start: {
                        line: 347,
                        column: 6
                    },
                    end: {
                        line: 347,
                        column: 63
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 347,
                            column: 6
                        },
                        end: {
                            line: 347,
                            column: 38
                        }
                    },
                    {
                        start: {
                            line: 347,
                            column: 42
                        },
                        end: {
                            line: 347,
                            column: 63
                        }
                    }
                ],
                line: 347
            },
            "10": {
                loc: {
                    start: {
                        line: 366,
                        column: 4
                    },
                    end: {
                        line: 369,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 366,
                            column: 4
                        },
                        end: {
                            line: 369,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 366
            },
            "11": {
                loc: {
                    start: {
                        line: 377,
                        column: 4
                    },
                    end: {
                        line: 384,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 377,
                            column: 4
                        },
                        end: {
                            line: 384,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 377
            },
            "12": {
                loc: {
                    start: {
                        line: 381,
                        column: 6
                    },
                    end: {
                        line: 383,
                        column: 7
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 381,
                            column: 6
                        },
                        end: {
                            line: 383,
                            column: 7
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 381
            },
            "13": {
                loc: {
                    start: {
                        line: 387,
                        column: 4
                    },
                    end: {
                        line: 391,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 387,
                            column: 4
                        },
                        end: {
                            line: 391,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: 389,
                            column: 11
                        },
                        end: {
                            line: 391,
                            column: 5
                        }
                    }
                ],
                line: 387
            },
            "14": {
                loc: {
                    start: {
                        line: 395,
                        column: 4
                    },
                    end: {
                        line: 397,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 395,
                            column: 4
                        },
                        end: {
                            line: 397,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 395
            },
            "15": {
                loc: {
                    start: {
                        line: 475,
                        column: 4
                    },
                    end: {
                        line: 478,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 475,
                            column: 4
                        },
                        end: {
                            line: 478,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 475
            },
            "16": {
                loc: {
                    start: {
                        line: 483,
                        column: 4
                    },
                    end: {
                        line: 486,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 483,
                            column: 4
                        },
                        end: {
                            line: 486,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 483
            },
            "17": {
                loc: {
                    start: {
                        line: 488,
                        column: 4
                    },
                    end: {
                        line: 507,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 488,
                            column: 4
                        },
                        end: {
                            line: 507,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 488
            },
            "18": {
                loc: {
                    start: {
                        line: 508,
                        column: 4
                    },
                    end: {
                        line: 525,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 508,
                            column: 4
                        },
                        end: {
                            line: 525,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 508
            },
            "19": {
                loc: {
                    start: {
                        line: 551,
                        column: 4
                    },
                    end: {
                        line: 554,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 551,
                            column: 4
                        },
                        end: {
                            line: 554,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 551
            },
            "20": {
                loc: {
                    start: {
                        line: 564,
                        column: 4
                    },
                    end: {
                        line: 584,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 564,
                            column: 4
                        },
                        end: {
                            line: 584,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 564
            },
            "21": {
                loc: {
                    start: {
                        line: 564,
                        column: 8
                    },
                    end: {
                        line: 564,
                        column: 49
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 564,
                            column: 8
                        },
                        end: {
                            line: 564,
                            column: 22
                        }
                    },
                    {
                        start: {
                            line: 564,
                            column: 26
                        },
                        end: {
                            line: 564,
                            column: 49
                        }
                    }
                ],
                line: 564
            },
            "22": {
                loc: {
                    start: {
                        line: 578,
                        column: 6
                    },
                    end: {
                        line: 582,
                        column: 7
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 578,
                            column: 6
                        },
                        end: {
                            line: 582,
                            column: 7
                        }
                    },
                    {
                        start: {
                            line: 580,
                            column: 13
                        },
                        end: {
                            line: 582,
                            column: 7
                        }
                    }
                ],
                line: 578
            },
            "23": {
                loc: {
                    start: {
                        line: 591,
                        column: 4
                    },
                    end: {
                        line: 595,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 591,
                            column: 4
                        },
                        end: {
                            line: 595,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: 593,
                            column: 11
                        },
                        end: {
                            line: 595,
                            column: 5
                        }
                    }
                ],
                line: 591
            },
            "24": {
                loc: {
                    start: {
                        line: 600,
                        column: 4
                    },
                    end: {
                        line: 603,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 600,
                            column: 4
                        },
                        end: {
                            line: 603,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 600
            },
            "25": {
                loc: {
                    start: {
                        line: 618,
                        column: 4
                    },
                    end: {
                        line: 622,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 618,
                            column: 4
                        },
                        end: {
                            line: 622,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 618
            },
            "26": {
                loc: {
                    start: {
                        line: 657,
                        column: 4
                    },
                    end: {
                        line: 661,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 657,
                            column: 4
                        },
                        end: {
                            line: 661,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 657
            },
            "27": {
                loc: {
                    start: {
                        line: 687,
                        column: 4
                    },
                    end: {
                        line: 691,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 687,
                            column: 4
                        },
                        end: {
                            line: 691,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 687
            },
            "28": {
                loc: {
                    start: {
                        line: 693,
                        column: 4
                    },
                    end: {
                        line: 697,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 693,
                            column: 4
                        },
                        end: {
                            line: 697,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 693
            },
            "29": {
                loc: {
                    start: {
                        line: 734,
                        column: 4
                    },
                    end: {
                        line: 738,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 734,
                            column: 4
                        },
                        end: {
                            line: 738,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 734
            },
            "30": {
                loc: {
                    start: {
                        line: 740,
                        column: 4
                    },
                    end: {
                        line: 744,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 740,
                            column: 4
                        },
                        end: {
                            line: 744,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 740
            },
            "31": {
                loc: {
                    start: {
                        line: 760,
                        column: 8
                    },
                    end: {
                        line: 766,
                        column: 9
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 760,
                            column: 8
                        },
                        end: {
                            line: 766,
                            column: 9
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 760
            },
            "32": {
                loc: {
                    start: {
                        line: 787,
                        column: 4
                    },
                    end: {
                        line: 791,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 787,
                            column: 4
                        },
                        end: {
                            line: 791,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: 789,
                            column: 11
                        },
                        end: {
                            line: 791,
                            column: 5
                        }
                    }
                ],
                line: 787
            }
        },
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0,
            "18": 0,
            "19": 0,
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "31": 0,
            "32": 0,
            "33": 0,
            "34": 0,
            "35": 0,
            "36": 0,
            "37": 0,
            "38": 0,
            "39": 0,
            "40": 0,
            "41": 0,
            "42": 0,
            "43": 0,
            "44": 0,
            "45": 0,
            "46": 0,
            "47": 0,
            "48": 0,
            "49": 0,
            "50": 0,
            "51": 0,
            "52": 0,
            "53": 0,
            "54": 0,
            "55": 0,
            "56": 0,
            "57": 0,
            "58": 0,
            "59": 0,
            "60": 0,
            "61": 0,
            "62": 0,
            "63": 0,
            "64": 0,
            "65": 0,
            "66": 0,
            "67": 0,
            "68": 0,
            "69": 0,
            "70": 0,
            "71": 0,
            "72": 0,
            "73": 0,
            "74": 0,
            "75": 0,
            "76": 0,
            "77": 0,
            "78": 0,
            "79": 0,
            "80": 0,
            "81": 0,
            "82": 0,
            "83": 0,
            "84": 0,
            "85": 0,
            "86": 0,
            "87": 0,
            "88": 0,
            "89": 0,
            "90": 0,
            "91": 0,
            "92": 0,
            "93": 0,
            "94": 0,
            "95": 0,
            "96": 0,
            "97": 0,
            "98": 0,
            "99": 0,
            "100": 0,
            "101": 0,
            "102": 0,
            "103": 0,
            "104": 0,
            "105": 0,
            "106": 0,
            "107": 0,
            "108": 0,
            "109": 0,
            "110": 0,
            "111": 0,
            "112": 0,
            "113": 0,
            "114": 0,
            "115": 0,
            "116": 0,
            "117": 0,
            "118": 0,
            "119": 0,
            "120": 0,
            "121": 0,
            "122": 0,
            "123": 0,
            "124": 0,
            "125": 0,
            "126": 0,
            "127": 0,
            "128": 0,
            "129": 0,
            "130": 0,
            "131": 0,
            "132": 0,
            "133": 0,
            "134": 0,
            "135": 0,
            "136": 0,
            "137": 0,
            "138": 0,
            "139": 0,
            "140": 0,
            "141": 0,
            "142": 0,
            "143": 0,
            "144": 0,
            "145": 0,
            "146": 0,
            "147": 0,
            "148": 0,
            "149": 0,
            "150": 0,
            "151": 0,
            "152": 0,
            "153": 0,
            "154": 0,
            "155": 0,
            "156": 0,
            "157": 0,
            "158": 0,
            "159": 0,
            "160": 0,
            "161": 0,
            "162": 0,
            "163": 0,
            "164": 0,
            "165": 0,
            "166": 0,
            "167": 0,
            "168": 0,
            "169": 0,
            "170": 0,
            "171": 0,
            "172": 0,
            "173": 0,
            "174": 0,
            "175": 0,
            "176": 0,
            "177": 0,
            "178": 0,
            "179": 0,
            "180": 0,
            "181": 0,
            "182": 0,
            "183": 0,
            "184": 0,
            "185": 0,
            "186": 0,
            "187": 0,
            "188": 0,
            "189": 0,
            "190": 0,
            "191": 0,
            "192": 0,
            "193": 0,
            "194": 0,
            "195": 0,
            "196": 0,
            "197": 0,
            "198": 0,
            "199": 0,
            "200": 0,
            "201": 0,
            "202": 0,
            "203": 0,
            "204": 0,
            "205": 0,
            "206": 0,
            "207": 0,
            "208": 0,
            "209": 0,
            "210": 0,
            "211": 0,
            "212": 0,
            "213": 0,
            "214": 0,
            "215": 0,
            "216": 0,
            "217": 0,
            "218": 0,
            "219": 0,
            "220": 0,
            "221": 0,
            "222": 0,
            "223": 0,
            "224": 0,
            "225": 0,
            "226": 0,
            "227": 0,
            "228": 0,
            "229": 0,
            "230": 0,
            "231": 0,
            "232": 0,
            "233": 0,
            "234": 0,
            "235": 0,
            "236": 0,
            "237": 0,
            "238": 0,
            "239": 0,
            "240": 0,
            "241": 0,
            "242": 0,
            "243": 0,
            "244": 0,
            "245": 0,
            "246": 0,
            "247": 0,
            "248": 0,
            "249": 0,
            "250": 0,
            "251": 0,
            "252": 0,
            "253": 0,
            "254": 0,
            "255": 0,
            "256": 0,
            "257": 0,
            "258": 0,
            "259": 0,
            "260": 0,
            "261": 0,
            "262": 0,
            "263": 0,
            "264": 0,
            "265": 0,
            "266": 0,
            "267": 0,
            "268": 0,
            "269": 0,
            "270": 0,
            "271": 0,
            "272": 0,
            "273": 0,
            "274": 0,
            "275": 0,
            "276": 0,
            "277": 0,
            "278": 0,
            "279": 0,
            "280": 0,
            "281": 0
        },
        f: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0,
            "18": 0,
            "19": 0,
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "31": 0,
            "32": 0,
            "33": 0,
            "34": 0,
            "35": 0,
            "36": 0,
            "37": 0,
            "38": 0,
            "39": 0,
            "40": 0,
            "41": 0,
            "42": 0,
            "43": 0,
            "44": 0,
            "45": 0,
            "46": 0,
            "47": 0,
            "48": 0,
            "49": 0,
            "50": 0,
            "51": 0,
            "52": 0,
            "53": 0,
            "54": 0,
            "55": 0,
            "56": 0,
            "57": 0,
            "58": 0,
            "59": 0,
            "60": 0,
            "61": 0,
            "62": 0,
            "63": 0
        },
        b: {
            "0": [
                0,
                0
            ],
            "1": [
                0,
                0
            ],
            "2": [
                0,
                0
            ],
            "3": [
                0,
                0
            ],
            "4": [
                0,
                0
            ],
            "5": [
                0,
                0
            ],
            "6": [
                0,
                0
            ],
            "7": [
                0,
                0
            ],
            "8": [
                0,
                0
            ],
            "9": [
                0,
                0
            ],
            "10": [
                0,
                0
            ],
            "11": [
                0,
                0
            ],
            "12": [
                0,
                0
            ],
            "13": [
                0,
                0
            ],
            "14": [
                0,
                0
            ],
            "15": [
                0,
                0
            ],
            "16": [
                0,
                0
            ],
            "17": [
                0,
                0
            ],
            "18": [
                0,
                0
            ],
            "19": [
                0,
                0
            ],
            "20": [
                0,
                0
            ],
            "21": [
                0,
                0
            ],
            "22": [
                0,
                0
            ],
            "23": [
                0,
                0
            ],
            "24": [
                0,
                0
            ],
            "25": [
                0,
                0
            ],
            "26": [
                0,
                0
            ],
            "27": [
                0,
                0
            ],
            "28": [
                0,
                0
            ],
            "29": [
                0,
                0
            ],
            "30": [
                0,
                0
            ],
            "31": [
                0,
                0
            ],
            "32": [
                0,
                0
            ]
        },
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "0be14c1cc00608fb555fdcdd4640f8132d437f0c"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_f3xgw0fed = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_f3xgw0fed();
const DATABASE_HOST = (cov_f3xgw0fed().s[0]++, cov_f3xgw0fed().b[0][0]++, "http://localhost:4318");
const DATABASE_PATH = (cov_f3xgw0fed().s[1]++, cov_f3xgw0fed().b[1][0]++, "/v1/gp66/");
const AUTH_PATH = (cov_f3xgw0fed().s[2]++, cov_f3xgw0fed().b[2][0]++, "/auth");
class MainController {
    loginModel;
    workspaceModel;
    sidebarModel;
    mainContentModel;
    createWorkspaceModel;
    deleteworkspaceModel;
    createChannelModel;
    deleteChannelModel;
    chatInputModel;
    loginComponent;
    workspaceComponent;
    sidebarComponent;
    mainContentComponent;
    // private createWorkspaceDialog: CreateWorkspaceDialog;
    chatInputComponent;
    authToken = (cov_f3xgw0fed().s[3]++, "");
    user = (cov_f3xgw0fed().s[4]++, "");
    currentWorkspace = (cov_f3xgw0fed().s[5]++, "");
    currentChannel = (cov_f3xgw0fed().s[6]++, "");
    currentParent = (cov_f3xgw0fed().s[7]++, "");
    /**
   * Constructor initializes models and components.
   */ constructor(){
        cov_f3xgw0fed().f[0]++;
        cov_f3xgw0fed().s[8]++;
        // Initialize models
        (0, _loginComponents.initComponents)();
        const loginComponent = (cov_f3xgw0fed().s[9]++, document.querySelector("login-component"));
        cov_f3xgw0fed().s[10]++;
        if (loginComponent) {
            cov_f3xgw0fed().b[3][0]++;
            cov_f3xgw0fed().s[11]++;
            loginComponent.showPopup();
        } else cov_f3xgw0fed().b[3][1]++;
        cov_f3xgw0fed().s[12]++;
        this.loginComponent = document.querySelector("login-component");
        cov_f3xgw0fed().s[13]++;
        this.loginModel = new (0, _loginModel.LoginModel)(DATABASE_HOST + AUTH_PATH);
        cov_f3xgw0fed().s[14]++;
        customElements.define("workspace-component", (0, _workspaceComponents.WorkspaceComponent));
        cov_f3xgw0fed().s[15]++;
        customElements.define("sidebar-component", (0, _sidebarComponents.SidebarComponent));
        cov_f3xgw0fed().s[16]++;
        customElements.define("main-content-component", (0, _mainContentComponents.MainContentComponent));
        cov_f3xgw0fed().s[17]++;
        customElements.define("create-workspace-dialog", (0, _createWorkspaceDialog.CreateWorkspaceDialog));
        cov_f3xgw0fed().s[18]++;
        customElements.define("edit-workspace-dialog", (0, _editworkspaceComponents.EditWorkspaceButton));
        cov_f3xgw0fed().s[19]++;
        customElements.define("delete-workspace-dialog", (0, _deleteWorkspaceDialog.DeleteWorkspaceDialog));
        cov_f3xgw0fed().s[20]++;
        customElements.define("edit-channel-button", (0, _editChannelButton.EditChannelButton));
        cov_f3xgw0fed().s[21]++;
        customElements.define("create-channel-dialog", (0, _createChannelDialog.CreateChannelDialog));
        cov_f3xgw0fed().s[22]++;
        customElements.define("delete-channel-dialog", (0, _deleteChannelDialog.DeleteChannelDialog));
        cov_f3xgw0fed().s[23]++;
        customElements.define("chat-input-component", (0, _chatInputComponent.ChatInputComponent));
        cov_f3xgw0fed().s[24]++;
        this.workspaceModel = new (0, _workspaceModel.WorkspaceModel)(DATABASE_HOST + DATABASE_PATH);
        cov_f3xgw0fed().s[25]++;
        this.sidebarModel = new (0, _sidebarModel.SidebarModel)(DATABASE_HOST + DATABASE_PATH);
        cov_f3xgw0fed().s[26]++;
        this.mainContentModel = new (0, _mainContentModel.MainContentModel)(DATABASE_HOST + DATABASE_PATH);
        cov_f3xgw0fed().s[27]++;
        this.deleteworkspaceModel = new (0, _deleteWorkspaceModel.DeleteWorkspaceModel)(DATABASE_HOST + DATABASE_PATH);
        cov_f3xgw0fed().s[28]++;
        this.createWorkspaceModel = new (0, _createWorkspaceModel.CreateWorkspaceModel)(DATABASE_HOST + DATABASE_PATH);
        cov_f3xgw0fed().s[29]++;
        this.createChannelModel = new (0, _createChannelModel.CreateChannelModel)(DATABASE_HOST + DATABASE_PATH);
        cov_f3xgw0fed().s[30]++;
        this.deleteChannelModel = new (0, _deleteChannelModel.DeleteChannelModel)(DATABASE_HOST + DATABASE_PATH);
        cov_f3xgw0fed().s[31]++;
        this.chatInputModel = new (0, _chatInputModel.ChatInputModel)(DATABASE_HOST + DATABASE_PATH);
        // Initialize view components
        cov_f3xgw0fed().s[32]++;
        this.workspaceComponent = document.querySelector("workspace-component");
        cov_f3xgw0fed().s[33]++;
        this.sidebarComponent = document.querySelector("sidebar-component");
        cov_f3xgw0fed().s[34]++;
        this.mainContentComponent = document.querySelector("main-content-component");
        cov_f3xgw0fed().s[35]++;
        this.chatInputComponent = document.querySelector("chat-input-component");
    // this.deleteworkspaceDialog = document.querySelector("delete-workspace-dialog") as DeleteWorkspaceDialog;
    }
    /**
   * Initializes the controller by setting up event listeners.
   */ initialize() {
        cov_f3xgw0fed().f[1]++;
        cov_f3xgw0fed().s[36]++;
        this.setupEventListeners();
    // Show login popup on initialization
    }
    /**
   * Sets up event listeners for various components.
   */ setupEventListeners() {
        cov_f3xgw0fed().f[2]++;
        cov_f3xgw0fed().s[37]++;
        // LoginComponent events
        document.addEventListener("login-attempt", (event)=>{
            cov_f3xgw0fed().f[3]++;
            cov_f3xgw0fed().s[38]++;
            return this.handleLoginAttempt(event);
        });
        cov_f3xgw0fed().s[39]++;
        document.addEventListener("logout", ()=>{
            cov_f3xgw0fed().f[4]++;
            cov_f3xgw0fed().s[40]++;
            return this.handleLogout();
        });
        // WorkspaceComponent events
        cov_f3xgw0fed().s[41]++;
        document.addEventListener("get-workspaces", ()=>{
            cov_f3xgw0fed().f[5]++;
            cov_f3xgw0fed().s[42]++;
            return this.handleGetWorkspaces();
        });
        // SidebarComponent events
        cov_f3xgw0fed().s[43]++;
        document.addEventListener("get-collections", (event)=>{
            cov_f3xgw0fed().f[6]++;
            cov_f3xgw0fed().s[44]++;
            return this.handleGetCollections(event);
        });
        cov_f3xgw0fed().s[45]++;
        document.addEventListener("get-posts", (event)=>{
            cov_f3xgw0fed().f[7]++;
            cov_f3xgw0fed().s[46]++;
            return this.handleChannelSelect(event);
        });
        // CreateWorkspaceDialog events
        cov_f3xgw0fed().s[47]++;
        document.addEventListener("workspace-created", (event)=>{
            cov_f3xgw0fed().f[8]++;
            cov_f3xgw0fed().s[48]++;
            return this.handleCreateWorkspace(event);
        });
        cov_f3xgw0fed().s[49]++;
        document.addEventListener("workspace-deleted", (event)=>{
            cov_f3xgw0fed().f[9]++;
            cov_f3xgw0fed().s[50]++;
            return this.handleDeleteWorkspace(event);
        });
        cov_f3xgw0fed().s[51]++;
        document.addEventListener("channel-created", (event)=>{
            cov_f3xgw0fed().f[10]++;
            cov_f3xgw0fed().s[52]++;
            return this.handleCreateChannel(event);
        });
        cov_f3xgw0fed().s[53]++;
        document.addEventListener("channel-deleted", (event)=>{
            cov_f3xgw0fed().f[11]++;
            cov_f3xgw0fed().s[54]++;
            return this.handleDeleteChannel(event);
        });
        cov_f3xgw0fed().s[55]++;
        document.addEventListener("reply-to-message", (event)=>{
            cov_f3xgw0fed().f[12]++;
            cov_f3xgw0fed().s[56]++;
            return this.handleClickReply(event);
        });
        cov_f3xgw0fed().s[57]++;
        document.addEventListener("post-message", (event)=>{
            cov_f3xgw0fed().f[13]++;
            cov_f3xgw0fed().s[58]++;
            return this.handleClickPost(event);
        });
        cov_f3xgw0fed().s[59]++;
        document.addEventListener("reaction", (event)=>{
            cov_f3xgw0fed().f[14]++;
            const customEvent = (cov_f3xgw0fed().s[60]++, event);
            const { postPath, reactionType } = (cov_f3xgw0fed().s[61]++, customEvent.detail);
            cov_f3xgw0fed().s[62]++;
            this.handleReaction(postPath, reactionType);
        });
    }
    // Inside the MainController class
    /**
   * A map that tracks whether a reaction for a specific post has been debounced.
   */ reactionDebounceMap = (cov_f3xgw0fed().s[63]++, new Map());
    /**
   * Handles reactions.
   * @param postPath - The path of the post that the reaction is associated with.
   * @param reactionType - The type of reaction (e.g., "like", "dislike", etc.) to be applied to the post.
   */ handleReaction(postPath, reactionType) {
        cov_f3xgw0fed().f[15]++;
        const reactionKey = (cov_f3xgw0fed().s[64]++, `${postPath}-${reactionType}`);
        cov_f3xgw0fed().s[65]++;
        this.reactionDebounceMap.set(reactionKey, true);
        cov_f3xgw0fed().s[66]++;
        this.mainContentModel.setCurrentWorkspaceChannel(this.currentWorkspace, this.currentChannel);
        cov_f3xgw0fed().s[67]++;
        this.mainContentModel.getCollections(this.authToken, this.currentWorkspace, this.currentChannel).then((posts)=>{
            cov_f3xgw0fed().f[16]++;
            const post = (cov_f3xgw0fed().s[68]++, posts.find((p)=>{
                cov_f3xgw0fed().f[17]++;
                cov_f3xgw0fed().s[69]++;
                return p.path === postPath;
            }));
            cov_f3xgw0fed().s[70]++;
            (0, _slog.slog).info("Post found", [
                "post",
                post
            ]);
            cov_f3xgw0fed().s[71]++;
            if (!post) {
                cov_f3xgw0fed().b[4][0]++;
                cov_f3xgw0fed().s[72]++;
                // Reject the promise to skip to the catch block
                return Promise.reject(new Error("Post not found."));
            } else cov_f3xgw0fed().b[4][1]++;
            const hasReacted = (cov_f3xgw0fed().s[73]++, (cov_f3xgw0fed().b[5][0]++, post.doc.reactions?.[reactionType]?.includes(this.user)) || (cov_f3xgw0fed().b[5][1]++, false));
            cov_f3xgw0fed().s[74]++;
            (0, _slog.slog).info("Has reacted", [
                "hasReacted",
                hasReacted
            ]);
            const remove = (cov_f3xgw0fed().s[75]++, hasReacted);
            cov_f3xgw0fed().s[76]++;
            return this.mainContentModel.reactPost(postPath, remove, reactionType, this.user, this.authToken).then(()=>{
                cov_f3xgw0fed().f[18]++;
                cov_f3xgw0fed().s[77]++;
                // this.mainContentComponent.renderMessage(post);
                (0, _slog.slog).info(`Reaction ${remove ? (cov_f3xgw0fed().b[6][0]++, "removed") : (cov_f3xgw0fed().b[6][1]++, "added")} for ${reactionType} on post ${postPath}`);
            // Optionally, update local state or UI here if needed
            });
        }).catch((error)=>{
            cov_f3xgw0fed().f[19]++;
            cov_f3xgw0fed().s[78]++;
            console.error(error.message);
        }).finally(()=>{
            cov_f3xgw0fed().f[20]++;
            cov_f3xgw0fed().s[79]++;
            // Reset the debounce
            this.reactionDebounceMap.set(reactionKey, false);
        });
    }
    /**
   * Handles login attempts.
   * @param event - The event object associated with the login attempt.
   */ handleLoginAttempt(event) {
        cov_f3xgw0fed().f[21]++;
        const customEvent = (cov_f3xgw0fed().s[80]++, event);
        const username = (cov_f3xgw0fed().s[81]++, customEvent.detail.username);
        cov_f3xgw0fed().s[82]++;
        if (!username) {
            cov_f3xgw0fed().b[7][0]++;
            cov_f3xgw0fed().s[83]++;
            this.loginComponent.displayError(new Error("Username is required."));
            cov_f3xgw0fed().s[84]++;
            return;
        } else cov_f3xgw0fed().b[7][1]++;
        cov_f3xgw0fed().s[85]++;
        (0, _slog.slog).info("Submitting login", [
            "username",
            username
        ]);
        cov_f3xgw0fed().s[86]++;
        this.loginModel.authenticate(username).then((token)=>{
            cov_f3xgw0fed().f[22]++;
            cov_f3xgw0fed().s[87]++;
            this.authToken = token;
            cov_f3xgw0fed().s[88]++;
            this.user = username;
            cov_f3xgw0fed().s[89]++;
            (0, _slog.slog).info("Login successful", [
                "username",
                username
            ], [
                "token",
                this.authToken
            ]);
            // Update UI
            cov_f3xgw0fed().s[90]++;
            this.loginComponent.displaySuccess(token);
        // Optionally, fetch initial data here
        }).catch((error)=>{
            cov_f3xgw0fed().f[23]++;
            cov_f3xgw0fed().s[91]++;
            (0, _slog.slog).error("Login failed", [
                "username",
                username
            ]);
            cov_f3xgw0fed().s[92]++;
            this.loginComponent.displayError(error);
        });
    }
    /**
   * Handles user logout.
   */ handleLogout() {
        cov_f3xgw0fed().f[24]++;
        cov_f3xgw0fed().s[93]++;
        if (!this.authToken) {
            cov_f3xgw0fed().b[8][0]++;
            cov_f3xgw0fed().s[94]++;
            (0, _slog.slog).error("No auth token found during logout.");
            cov_f3xgw0fed().s[95]++;
            return;
        } else cov_f3xgw0fed().b[8][1]++;
        cov_f3xgw0fed().s[96]++;
        this.loginModel.logout(this.authToken).then(()=>{
            cov_f3xgw0fed().f[25]++;
            cov_f3xgw0fed().s[97]++;
            (0, _slog.slog).info("Logout successful");
            cov_f3xgw0fed().s[98]++;
            this.authToken = "";
            // Reset UI
            cov_f3xgw0fed().s[99]++;
            this.loginComponent.showPopup();
            cov_f3xgw0fed().s[100]++;
            this.mainContentModel.unsubscribeToPosts();
        }).catch((error)=>{
            cov_f3xgw0fed().f[26]++;
            cov_f3xgw0fed().s[101]++;
            (0, _slog.slog).error("Logout failed", [
                "error",
                error.message
            ]);
            cov_f3xgw0fed().s[102]++;
            this.loginComponent.displayError(new Error("Logout failed"));
        });
    // this.loginComponent.logout();
    }
    //don't know whether need to hide the error message or not
    /**
   * Handles fetching workspaces.
   */ handleGetWorkspaces() {
        cov_f3xgw0fed().f[27]++;
        cov_f3xgw0fed().s[103]++;
        (0, _slog.slog).info("authToken", [
            "auth",
            this.authToken
        ]);
        cov_f3xgw0fed().s[104]++;
        (0, _slog.slog).info("Getting workspaces (controller)");
        cov_f3xgw0fed().s[105]++;
        this.workspaceModel.getWorkspaces(this.authToken).then((workspaceList)=>{
            cov_f3xgw0fed().f[28]++;
            cov_f3xgw0fed().s[106]++;
            this.workspaceComponent.updateDropdown(workspaceList);
        }).catch((error)=>{
            cov_f3xgw0fed().f[29]++;
            cov_f3xgw0fed().s[107]++;
            (0, _slog.slog).error("Failed to get workspaces", [
                "error",
                error.message
            ]);
            cov_f3xgw0fed().s[108]++;
            this.workspaceComponent.showError(`Error: ${error.message}`);
        });
    }
    /**
   * Handles fetching collections (channels) for a workspace.
   * @param event - The event object containing details about the workspace.
   */ handleGetCollections(event) {
        cov_f3xgw0fed().f[30]++;
        const customEvent = (cov_f3xgw0fed().s[109]++, event);
        const workspace = (cov_f3xgw0fed().s[110]++, customEvent.detail.workspace);
        cov_f3xgw0fed().s[111]++;
        this.currentWorkspace = workspace;
        cov_f3xgw0fed().s[112]++;
        (0, _slog.slog).info("Getting collections (controller)");
        cov_f3xgw0fed().s[113]++;
        (0, _slog.slog).info("workspace", [
            "workspace",
            workspace
        ]);
        cov_f3xgw0fed().s[114]++;
        this.sidebarModel.getCollections(this.authToken, workspace).then((collections)=>{
            cov_f3xgw0fed().f[31]++;
            cov_f3xgw0fed().s[115]++;
            (0, _slog.slog).info("Collections received", [
                "collections",
                collections
            ]);
            cov_f3xgw0fed().s[116]++;
            this.sidebarComponent.populateCollections(collections, workspace);
        }).catch((error)=>{
            cov_f3xgw0fed().f[32]++;
            cov_f3xgw0fed().s[117]++;
            (0, _slog.slog).error("Failed to get collections", [
                "error",
                error.message
            ]);
            cov_f3xgw0fed().s[118]++;
            this.sidebarComponent.showError(`Error: ${error.message}`);
        });
    }
    /**
   * Handles channel selection.
   * @param event - The event object containing details about the selected channel and workspace.
   */ handleChannelSelect(event) {
        cov_f3xgw0fed().f[33]++;
        const customEvent = (cov_f3xgw0fed().s[119]++, event);
        const channel = (cov_f3xgw0fed().s[120]++, customEvent.detail.channel);
        const workspaceName = (cov_f3xgw0fed().s[121]++, (cov_f3xgw0fed().b[9][0]++, customEvent.detail.workspaceName) || (cov_f3xgw0fed().b[9][1]++, this.currentWorkspace));
        cov_f3xgw0fed().s[122]++;
        (0, _slog.slog).info("Channel selected", [
            "channel",
            channel
        ]);
        cov_f3xgw0fed().s[123]++;
        this.currentChannel = channel;
        // Fetch posts for the selected channel
        cov_f3xgw0fed().s[124]++;
        this.fetchPostsSSE(workspaceName, channel);
        cov_f3xgw0fed().s[125]++;
        this.fetchPosts(workspaceName, channel);
        // Re initialize chatInputComponent
        cov_f3xgw0fed().s[126]++;
        this.reinitializeChatInput();
    }
    /**
   * Re-initializes chatInputComponent.
   */ reinitializeChatInput() {
        cov_f3xgw0fed().f[34]++;
        const exisitingChatInput = (cov_f3xgw0fed().s[127]++, document.querySelector("chat-input-component"));
        cov_f3xgw0fed().s[128]++;
        if (exisitingChatInput) {
            cov_f3xgw0fed().b[10][0]++;
            cov_f3xgw0fed().s[129]++;
            (0, _slog.slog).info("HERE");
            cov_f3xgw0fed().s[130]++;
            exisitingChatInput.remove();
        } else cov_f3xgw0fed().b[10][1]++;
        // Create a new ChatInputComponent instance
        const chatInputComponent = (cov_f3xgw0fed().s[131]++, new (0, _chatInputComponent.ChatInputComponent)());
        cov_f3xgw0fed().s[132]++;
        this.chatInputComponent = chatInputComponent;
        // Update Reply/Post button text
        const shadowRoot = (cov_f3xgw0fed().s[133]++, chatInputComponent.shadowRoot);
        cov_f3xgw0fed().s[134]++;
        if (shadowRoot) {
            cov_f3xgw0fed().b[11][0]++;
            const sendButton = (cov_f3xgw0fed().s[135]++, shadowRoot.querySelector("#send-button"));
            cov_f3xgw0fed().s[136]++;
            if (sendButton) {
                cov_f3xgw0fed().b[12][0]++;
                cov_f3xgw0fed().s[137]++;
                sendButton.textContent = "Post"; // Reset text to "Post"
            } else cov_f3xgw0fed().b[12][1]++;
        } else cov_f3xgw0fed().b[11][1]++;
        // Append it to the main content or a specific container
        const mainContent = (cov_f3xgw0fed().s[138]++, document.querySelector("#main-content")); // Ensure this ID exists in your layout
        cov_f3xgw0fed().s[139]++;
        if (mainContent) {
            cov_f3xgw0fed().b[13][0]++;
            cov_f3xgw0fed().s[140]++;
            mainContent.appendChild(chatInputComponent);
        } else {
            cov_f3xgw0fed().b[13][1]++;
            cov_f3xgw0fed().s[141]++;
            (0, _slog.slog).error("Chat container not found in the DOM.");
        }
        // Remove the close button
        const closeButton = (cov_f3xgw0fed().s[142]++, document.querySelector("#close-button"));
        cov_f3xgw0fed().s[143]++;
        if (closeButton) {
            cov_f3xgw0fed().b[14][0]++;
            cov_f3xgw0fed().s[144]++;
            closeButton.remove();
        } else cov_f3xgw0fed().b[14][1]++;
    }
    /**
   * Fetches posts for a given workspace and channel.
   * @param workspace - The name of the workspace from which posts will be fetched.
   * @param channel - The name of the channel within the workspace for which posts will be fetched.
   */ fetchPostsSSE(workspace, channel) {
        cov_f3xgw0fed().f[35]++;
        cov_f3xgw0fed().s[145]++;
        // TODO: use subscribeToPosts and
        this.mainContentModel.unsubscribeToPosts();
        cov_f3xgw0fed().s[146]++;
        (0, _slog.slog).info("Fetching posts", [
            "workspace",
            workspace
        ], [
            "channel",
            channel
        ]);
        cov_f3xgw0fed().s[147]++;
        this.mainContentModel.subscribeToPosts(this.authToken, workspace, channel, (post)=>{
            cov_f3xgw0fed().f[36]++;
            cov_f3xgw0fed().s[148]++;
            (0, _slog.slog).info("Post received", [
                "post",
                post
            ]);
            cov_f3xgw0fed().s[149]++;
            this.mainContentComponent.renderMessage(post);
        }, (error)=>{
            cov_f3xgw0fed().f[37]++;
            cov_f3xgw0fed().s[150]++;
            (0, _slog.slog).error("Failed to get posts", [
                "error",
                error.message
            ]);
            cov_f3xgw0fed().s[151]++;
            this.mainContentComponent.showError(`Error: ${error.message}`);
        });
    // this.mainContentModel
    //   .getCollections(this.authToken, workspace, channel)
    //   .then((posts) => {
    //     slog.info("Posts received", ["posts", posts]);
    //     // this.mainContentComponent.displayPosts(posts);
    //     // TEMPORARY TO JUST TEST NEW NESTED STRUCTURE
    //     for (const post of posts) {
    //       this.mainContentComponent.renderMessage(post);
    //     }
    //   })
    //   .catch((error) => {
    //     slog.error("Failed to get posts", ["error", error.message]);
    //   });
    }
    /**
   * Fetches posts for a given workspace and channel.
   * @param workspace - The name of the workspace from which posts will be fetched.
   * @param channel - The name of the channel within the workspace for which posts will be fetched.
   */ fetchPosts(workspace, channel) {
        cov_f3xgw0fed().f[38]++;
        cov_f3xgw0fed().s[152]++;
        (0, _slog.slog).info("Fetching posts", [
            "workspace",
            workspace
        ], [
            "channel",
            channel
        ]);
        cov_f3xgw0fed().s[153]++;
        this.mainContentModel.getCollections(this.authToken, workspace, channel).then((posts)=>{
            cov_f3xgw0fed().f[39]++;
            cov_f3xgw0fed().s[154]++;
            (0, _slog.slog).info("Posts received", [
                "posts",
                posts
            ]);
            // for (const post of posts) {
            //   this.mainContentComponent.renderMessage(post);
            // }
            cov_f3xgw0fed().s[155]++;
            this.mainContentComponent.displayPosts(posts);
        // TEMPORARY TO JUST TEST NEW NESTED STRUCTURE
        // for (const post of posts) {
        //   this.mainContentComponent.renderMessage(post);
        // }
        }).catch((error)=>{
            cov_f3xgw0fed().f[40]++;
            cov_f3xgw0fed().s[156]++;
            (0, _slog.slog).error("Failed to get posts", [
                "error",
                error.message
            ]);
            cov_f3xgw0fed().s[157]++;
            this.mainContentComponent.showError(`Error: ${error.message}`);
        });
    }
    /**
   * Handles the event when the "Post" button is clicked on a post.
   * @param event - The event object representing the click event on the "Post" button.
   */ handleClickPost(event) {
        cov_f3xgw0fed().f[41]++;
        const customEvent = (cov_f3xgw0fed().s[158]++, event);
        const { message } = (cov_f3xgw0fed().s[159]++, customEvent.detail);
        cov_f3xgw0fed().s[160]++;
        (0, _slog.slog).info("Message received in main.ts", [
            "message",
            message
        ]);
        // Access the shadow root and query the send-button
        const shadowRoot = (cov_f3xgw0fed().s[161]++, this.chatInputComponent.shadowRoot);
        cov_f3xgw0fed().s[162]++;
        if (!shadowRoot) {
            cov_f3xgw0fed().b[15][0]++;
            cov_f3xgw0fed().s[163]++;
            (0, _slog.slog).error("Shadow root not found in ChatInputComponent.");
            cov_f3xgw0fed().s[164]++;
            return;
        } else cov_f3xgw0fed().b[15][1]++;
        const button = (cov_f3xgw0fed().s[165]++, shadowRoot.querySelector("#send-button"));
        cov_f3xgw0fed().s[166]++;
        if (!button) {
            cov_f3xgw0fed().b[16][0]++;
            cov_f3xgw0fed().s[167]++;
            (0, _slog.slog).error("Send button not found in ChatInputComponent.");
            cov_f3xgw0fed().s[168]++;
            return;
        } else cov_f3xgw0fed().b[16][1]++;
        cov_f3xgw0fed().s[169]++;
        (0, _slog.slog).info("Button", [
            "button",
            button.textContent
        ]);
        cov_f3xgw0fed().s[170]++;
        if (button?.textContent == "Post") {
            cov_f3xgw0fed().b[17][0]++;
            cov_f3xgw0fed().s[171]++;
            // Send Message to server
            this.chatInputModel.postToChat(this.authToken, this.currentWorkspace, this.currentChannel, message).then((data)=>{
                cov_f3xgw0fed().f[42]++;
                cov_f3xgw0fed().s[172]++;
                (0, _slog.slog).info("Message sent, URI: ", [
                    "data",
                    data
                ]);
            //TODO: will call on View function to insert
            // this.mainContentComponent.renderMessage();
            // this.fetchPostsSSE(this.currentWorkspace, this.currentChannel);
            }).catch((error)=>{
                cov_f3xgw0fed().f[43]++;
                cov_f3xgw0fed().s[173]++;
                (0, _slog.slog).error("Failed to send message", [
                    "error",
                    error.message
                ]);
            });
        } else cov_f3xgw0fed().b[17][1]++;
        cov_f3xgw0fed().s[174]++;
        if (button?.textContent == "Reply") {
            cov_f3xgw0fed().b[18][0]++;
            cov_f3xgw0fed().s[175]++;
            // Send Message to server with reply model
            this.chatInputModel.replyToChat(this.authToken, this.currentWorkspace, this.currentChannel, message, this.currentParent).then((data)=>{
                cov_f3xgw0fed().f[44]++;
                cov_f3xgw0fed().s[176]++;
                (0, _slog.slog).info("Message sent, URI: ", [
                    "data",
                    data
                ]);
            // this.fetchPostsSSE(this.currentWorkspace, this.currentChannel);
            }).catch((error)=>{
                cov_f3xgw0fed().f[45]++;
                cov_f3xgw0fed().s[177]++;
                (0, _slog.slog).error("Failed to send message", [
                    "error",
                    error.message
                ]);
            });
        } else cov_f3xgw0fed().b[18][1]++;
        cov_f3xgw0fed().s[178]++;
        this.reinitializeChatInput();
    // clear the text box in chat input
    // chat should update with sse
    }
    /**
   * Handles the event when the "Reply" button is clicked on a post.
   * @param event - The event object representing the click event on the "Reply" button.
   */ handleClickReply(event) {
        cov_f3xgw0fed().f[46]++;
        const customEvent = (cov_f3xgw0fed().s[179]++, event);
        const { postPath } = (cov_f3xgw0fed().s[180]++, customEvent.detail);
        const messageElement = (cov_f3xgw0fed().s[181]++, document.querySelector(`.message[data-path="${postPath}"]`));
        cov_f3xgw0fed().s[182]++;
        this.currentParent = postPath;
        cov_f3xgw0fed().s[183]++;
        (0, _slog.slog).info("current parent", [
            "currentParent",
            this.currentParent
        ]);
        // Switched out for chat-input-component
        cov_f3xgw0fed().s[184]++;
        this.chatInputComponent = document.querySelector("chat-input-component");
        const chatInputContainer = (cov_f3xgw0fed().s[185]++, this.chatInputComponent);
        const shadowRoot = (cov_f3xgw0fed().s[186]++, this.chatInputComponent.shadowRoot);
        cov_f3xgw0fed().s[187]++;
        if (!shadowRoot) {
            cov_f3xgw0fed().b[19][0]++;
            cov_f3xgw0fed().s[188]++;
            (0, _slog.slog).error("Shadow root not found in ChatInputComponent.");
            cov_f3xgw0fed().s[189]++;
            return;
        } else cov_f3xgw0fed().b[19][1]++;
        // // Check if already replying to the same post
        // const currentReplyPath = chatInputContainer.getAttribute("data-replying-to");
        // if (currentReplyPath === postPath) {
        //   // Call reinitializeChatInput to reset the chat box
        //   this.reinitializeChatInput();
        //   return;
        // }
        cov_f3xgw0fed().s[190]++;
        if ((cov_f3xgw0fed().b[21][0]++, messageElement) && (cov_f3xgw0fed().b[21][1]++, this.chatInputComponent)) {
            cov_f3xgw0fed().b[20][0]++;
            cov_f3xgw0fed().s[191]++;
            // Move the chat input container after the message
            messageElement.insertAdjacentElement("afterend", this.chatInputComponent);
            cov_f3xgw0fed().s[192]++;
            chatInputContainer.scrollIntoView({
                behavior: "smooth",
                block: "center"
            });
            // Directly access the inputElement inside the ChatInputComponent
            const inputElement = (cov_f3xgw0fed().s[193]++, shadowRoot.querySelector("#chat-input"));
            cov_f3xgw0fed().s[194]++;
            if (inputElement) {
                cov_f3xgw0fed().b[22][0]++;
                cov_f3xgw0fed().s[195]++;
                inputElement.placeholder = `Reply:`;
            } else {
                cov_f3xgw0fed().b[22][1]++;
                cov_f3xgw0fed().s[196]++;
                (0, _slog.slog).error("Input element not found inside ChatInputComponent.");
            }
            cov_f3xgw0fed().s[197]++;
            chatInputContainer.setAttribute("data-replying-to", postPath);
        } else cov_f3xgw0fed().b[20][1]++;
        // Change the text of the button from "Post" to "Reply"
        const sendButton = (cov_f3xgw0fed().s[198]++, shadowRoot.querySelector("#send-button"));
        cov_f3xgw0fed().s[199]++;
        if (sendButton) {
            cov_f3xgw0fed().b[23][0]++;
            cov_f3xgw0fed().s[200]++;
            sendButton.textContent = "Reply";
        } else {
            cov_f3xgw0fed().b[23][1]++;
            cov_f3xgw0fed().s[201]++;
            (0, _slog.slog).error("Send button not found inside ChatInputComponent.");
        }
        // Dynamically add the "X" button
        const closeButton = (cov_f3xgw0fed().s[202]++, shadowRoot.querySelector("#close-button"));
        cov_f3xgw0fed().s[203]++;
        if (closeButton) {
            cov_f3xgw0fed().b[24][0]++;
            cov_f3xgw0fed().s[204]++;
            closeButton.style.display = "block";
            cov_f3xgw0fed().s[205]++;
            closeButton.style.visibility = "visible";
        } else cov_f3xgw0fed().b[24][1]++;
        // On click of closeButton, call on reinitializeChatInput
        cov_f3xgw0fed().s[206]++;
        closeButton.addEventListener("click", ()=>{
            cov_f3xgw0fed().f[47]++;
            cov_f3xgw0fed().s[207]++;
            this.reinitializeChatInput();
        });
    }
    /**
   * Handles workspace creation.
   * @param event - The event object representing the workspace creation event.
   */ handleCreateWorkspace(event) {
        cov_f3xgw0fed().f[48]++;
        const customEvent = (cov_f3xgw0fed().s[208]++, event);
        const workspace = (cov_f3xgw0fed().s[209]++, customEvent.detail.workspaceName);
        cov_f3xgw0fed().s[210]++;
        if (!workspace) {
            cov_f3xgw0fed().b[25][0]++;
            cov_f3xgw0fed().s[211]++;
            (0, _slog.slog).error("Workspace name is empty. Cannot create workspace.");
            cov_f3xgw0fed().s[212]++;
            this.workspaceComponent.showError("Workspace name cannot be empty.");
            cov_f3xgw0fed().s[213]++;
            return;
        } else cov_f3xgw0fed().b[25][1]++;
        cov_f3xgw0fed().s[214]++;
        (0, _slog.slog).info("Creating workspace", [
            "workspaceName",
            workspace
        ]);
        cov_f3xgw0fed().s[215]++;
        this.createWorkspaceModel.createWorkspace(this.authToken, workspace).then((data)=>{
            cov_f3xgw0fed().f[49]++;
            cov_f3xgw0fed().s[216]++;
            this.workspaceComponent.hideError();
            cov_f3xgw0fed().s[217]++;
            this.currentWorkspace = workspace;
            cov_f3xgw0fed().s[218]++;
            return this.handleGetWorkspaces();
        }).then(()=>{
            cov_f3xgw0fed().f[50]++;
            cov_f3xgw0fed().s[219]++;
            document.dispatchEvent(new CustomEvent("get-collections", {
                detail: {
                    workspace
                },
                bubbles: true,
                composed: true
            }));
            cov_f3xgw0fed().s[220]++;
            this.mainContentComponent.clearpost(event);
        }).catch((error)=>{
            cov_f3xgw0fed().f[51]++;
            cov_f3xgw0fed().s[221]++;
            (0, _slog.slog).error(error.message);
            cov_f3xgw0fed().s[222]++;
            this.workspaceComponent.showError(`${error.message}`);
        });
    }
    /**
   * Handles workspace deletion.
   * @param event - The event object representing the workspace deletion event.
   */ handleDeleteWorkspace(event) {
        cov_f3xgw0fed().f[52]++;
        const customEvent = (cov_f3xgw0fed().s[223]++, event);
        const workspaceName = (cov_f3xgw0fed().s[224]++, customEvent.detail.workspaceName);
        cov_f3xgw0fed().s[225]++;
        if (!workspaceName) {
            cov_f3xgw0fed().b[26][0]++;
            cov_f3xgw0fed().s[226]++;
            (0, _slog.slog).error("Workspace name is empty. Cannot delete workspace.");
            cov_f3xgw0fed().s[227]++;
            this.workspaceComponent.showError("Workspace name cannot be empty.");
            cov_f3xgw0fed().s[228]++;
            return;
        } else cov_f3xgw0fed().b[26][1]++;
        cov_f3xgw0fed().s[229]++;
        (0, _slog.slog).info("Deleting workspace", [
            "workspaceName",
            workspaceName
        ]);
        cov_f3xgw0fed().s[230]++;
        this.deleteworkspaceModel.deleteWorkspace(this.authToken, workspaceName).then((data)=>{
            cov_f3xgw0fed().f[53]++;
            cov_f3xgw0fed().s[231]++;
            this.workspaceComponent.hideError();
            cov_f3xgw0fed().s[232]++;
            (0, _slog.slog).info(`Workspace "${workspaceName}" deleted successfully.`);
            cov_f3xgw0fed().s[233]++;
            this.handleGetWorkspaces();
        // no need for components here, since we are not updating any UI ? or we can call view? need discussion
        }).catch((error)=>{
            cov_f3xgw0fed().f[54]++;
            cov_f3xgw0fed().s[234]++;
            (0, _slog.slog).error("Failed to delete workspace", error);
            cov_f3xgw0fed().s[235]++;
            this.workspaceComponent.showError(`${error.message}`);
        });
    }
    /**
   * Handles channel creation.
   * @param event - The event object representing the channel creation event.
   */ handleCreateChannel(event) {
        cov_f3xgw0fed().f[55]++;
        const customEvent = (cov_f3xgw0fed().s[236]++, event);
        const channelName = (cov_f3xgw0fed().s[237]++, customEvent.detail.channelName);
        cov_f3xgw0fed().s[238]++;
        if (!channelName) {
            cov_f3xgw0fed().b[27][0]++;
            cov_f3xgw0fed().s[239]++;
            (0, _slog.slog).error("Channel name is empty. Cannot create channel.");
            cov_f3xgw0fed().s[240]++;
            this.sidebarComponent.showError("Channel name cannot be empty.");
            cov_f3xgw0fed().s[241]++;
            return;
        } else cov_f3xgw0fed().b[27][1]++;
        cov_f3xgw0fed().s[242]++;
        if (!this.currentWorkspace) {
            cov_f3xgw0fed().b[28][0]++;
            cov_f3xgw0fed().s[243]++;
            (0, _slog.slog).error("No workspace selected. Cannot create channel.");
            cov_f3xgw0fed().s[244]++;
            this.sidebarComponent.showError("Please select a workspace first.");
            cov_f3xgw0fed().s[245]++;
            return;
        } else cov_f3xgw0fed().b[28][1]++;
        cov_f3xgw0fed().s[246]++;
        (0, _slog.slog).info("Creating channel", [
            "workspaceName",
            this.currentWorkspace
        ], [
            "channelName",
            channelName
        ]);
        const workspace = (cov_f3xgw0fed().s[247]++, this.currentWorkspace);
        cov_f3xgw0fed().s[248]++;
        this.createChannelModel.createChannel(this.authToken, this.currentWorkspace, channelName).then((data)=>{
            cov_f3xgw0fed().f[56]++;
            cov_f3xgw0fed().s[249]++;
            this.sidebarComponent.hideError();
            cov_f3xgw0fed().s[250]++;
            document.dispatchEvent(new CustomEvent("get-collections", {
                detail: {
                    workspace
                },
                bubbles: true,
                composed: true
            }));
            cov_f3xgw0fed().s[251]++;
            this.sidebarComponent.onChannelSelect(channelName);
        }).catch((error)=>{
            cov_f3xgw0fed().f[57]++;
            cov_f3xgw0fed().s[252]++;
            (0, _slog.slog).error(error.message);
            cov_f3xgw0fed().s[253]++;
            this.sidebarComponent.showError(`${error.message}`);
        });
    }
    /**
   * Handles channel deletion.
   * @param event - The event object representing the channel deletion event.
   */ handleDeleteChannel(event) {
        cov_f3xgw0fed().f[58]++;
        const customEvent = (cov_f3xgw0fed().s[254]++, event);
        const channelName = (cov_f3xgw0fed().s[255]++, customEvent.detail.channelName);
        cov_f3xgw0fed().s[256]++;
        if (!channelName) {
            cov_f3xgw0fed().b[29][0]++;
            cov_f3xgw0fed().s[257]++;
            (0, _slog.slog).error("Channel name is empty. Cannot delete channel.");
            cov_f3xgw0fed().s[258]++;
            this.sidebarComponent.showError("Channel name cannot be empty.");
            cov_f3xgw0fed().s[259]++;
            return;
        } else cov_f3xgw0fed().b[29][1]++;
        cov_f3xgw0fed().s[260]++;
        if (!this.currentWorkspace) {
            cov_f3xgw0fed().b[30][0]++;
            cov_f3xgw0fed().s[261]++;
            (0, _slog.slog).error("No workspace selected. Cannot delete channel.");
            cov_f3xgw0fed().s[262]++;
            this.sidebarComponent.showError("Please select a workspace first.");
            cov_f3xgw0fed().s[263]++;
            return;
        } else cov_f3xgw0fed().b[30][1]++;
        cov_f3xgw0fed().s[264]++;
        (0, _slog.slog).info("Deleting channel", [
            "workspaceName",
            this.currentWorkspace
        ], [
            "channelName",
            channelName
        ]);
        cov_f3xgw0fed().s[265]++;
        this.deleteChannelModel.deleteChannel(this.authToken, this.currentWorkspace, channelName).then(()=>{
            cov_f3xgw0fed().f[59]++;
            cov_f3xgw0fed().s[266]++;
            this.sidebarComponent.hideError();
            cov_f3xgw0fed().s[267]++;
            (0, _slog.slog).info(`Channel "${channelName}" deleted successfully in workspace "${this.currentWorkspace}".`);
            cov_f3xgw0fed().s[268]++;
            if (this.currentChannel === channelName) {
                cov_f3xgw0fed().b[31][0]++;
                cov_f3xgw0fed().s[269]++;
                (0, _slog.slog).info(`Current channel "${this.currentChannel}" matches the deleted channel. Clearing posts.`);
                cov_f3xgw0fed().s[270]++;
                this.mainContentModel.unsubscribeToPosts();
                cov_f3xgw0fed().s[271]++;
                this.mainContentComponent.clearpost(event);
            } else cov_f3xgw0fed().b[31][1]++;
            // Refresh the channel list in the sidebar
            cov_f3xgw0fed().s[272]++;
            document.dispatchEvent(new CustomEvent("get-collections", {
                detail: {
                    workspace: this.currentWorkspace
                },
                bubbles: true,
                composed: true
            }));
        }).catch((error)=>{
            cov_f3xgw0fed().f[60]++;
            cov_f3xgw0fed().s[273]++;
            (0, _slog.slog).error("Failed to delete channel", error);
            cov_f3xgw0fed().s[274]++;
            this.sidebarComponent.showError(`${error.message}`);
        });
    }
    /**
   * Displays an error message in the WorkspaceComponent.
   * @param message - The error message to display.
   */ displayWorkspaceError(message) {
        cov_f3xgw0fed().f[61]++;
        cov_f3xgw0fed().s[275]++;
        if (this.workspaceComponent) {
            cov_f3xgw0fed().b[32][0]++;
            cov_f3xgw0fed().s[276]++;
            this.workspaceComponent.showError(message);
        } else {
            cov_f3xgw0fed().b[32][1]++;
            cov_f3xgw0fed().s[277]++;
            (0, _slog.slog).error("WorkspaceComponent reference is missing.");
        }
    }
}
/**
 * Entry point of the application.
 */ function main() {
    cov_f3xgw0fed().f[62]++;
    const mainController = (cov_f3xgw0fed().s[278]++, new MainController());
    cov_f3xgw0fed().s[279]++;
    mainController.initialize();
// The controller handles its own initialization and shows the login popup
}
/* Register event handler to run after the page is fully loaded. */ cov_f3xgw0fed().s[280]++;
document.addEventListener("DOMContentLoaded", ()=>{
    cov_f3xgw0fed().f[63]++;
    cov_f3xgw0fed().s[281]++;
    main();
});

},{"./slog":"jExiC","./model/LoginModel":"bxFEF","./model/WorkspaceModel":"aiwRY","./model/SidebarModel":"7PeKs","./model/MainContentModel":"5D2Ai","./model/CreateWorkspaceModel":"8X7Jr","./model/DeleteWorkspaceModel":"gxmSB","./model/CreateChannelModel":"aaDLm","./model/DeleteChannelModel":"1wCAl","./model/ChatInputModel":"7paXj","./view/LoginComponents":"bqQKr","./view/WorkspaceComponents":"kJ80C","./view/SidebarComponents":"lr558","./view/MainContentComponents":"3fr3u","./view/CreateWorkspaceDialog":"Aff8i","./view/EditworkspaceComponents":"gVgck","./view/DeleteWorkspaceDialog":"lkYA9","./view/EditChannelButton":"cU8E5","./view/CreateChannelDialog":"lNNBj","./view/DeleteChannelDialog":"euRwK","./view/ChatInputComponent":"3F2sy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jExiC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Structured Log class that uses log levels and KVPair's to log to the console.
 */ parcelHelpers.export(exports, "SLog", ()=>SLog);
parcelHelpers.export(exports, "slog", ()=>slog);
function cov_247ejbh1tn() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/slog.ts";
    var hash = "a3d215976e8f4445d954443dbe711d4d643a6d74";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/slog.ts",
        statementMap: {
            "0": {
                start: {
                    line: 15,
                    column: 32
                },
                end: {
                    line: 15,
                    column: 34
                }
            },
            "1": {
                start: {
                    line: 18,
                    column: 31
                },
                end: {
                    line: 18,
                    column: 32
                }
            },
            "2": {
                start: {
                    line: 21,
                    column: 31
                },
                end: {
                    line: 21,
                    column: 32
                }
            },
            "3": {
                start: {
                    line: 24,
                    column: 32
                },
                end: {
                    line: 24,
                    column: 33
                }
            },
            "4": {
                start: {
                    line: 27,
                    column: 26
                },
                end: {
                    line: 27,
                    column: 40
                }
            },
            "5": {
                start: {
                    line: 37,
                    column: 4
                },
                end: {
                    line: 37,
                    column: 42
                }
            },
            "6": {
                start: {
                    line: 38,
                    column: 4
                },
                end: {
                    line: 41,
                    column: 5
                }
            },
            "7": {
                start: {
                    line: 39,
                    column: 6
                },
                end: {
                    line: 39,
                    column: 27
                }
            },
            "8": {
                start: {
                    line: 40,
                    column: 6
                },
                end: {
                    line: 40,
                    column: 27
                }
            },
            "9": {
                start: {
                    line: 42,
                    column: 4
                },
                end: {
                    line: 42,
                    column: 40
                }
            },
            "10": {
                start: {
                    line: 52,
                    column: 4
                },
                end: {
                    line: 52,
                    column: 23
                }
            },
            "11": {
                start: {
                    line: 62,
                    column: 4
                },
                end: {
                    line: 64,
                    column: 5
                }
            },
            "12": {
                start: {
                    line: 63,
                    column: 6
                },
                end: {
                    line: 63,
                    column: 36
                }
            },
            "13": {
                start: {
                    line: 74,
                    column: 4
                },
                end: {
                    line: 76,
                    column: 5
                }
            },
            "14": {
                start: {
                    line: 75,
                    column: 6
                },
                end: {
                    line: 75,
                    column: 35
                }
            },
            "15": {
                start: {
                    line: 86,
                    column: 4
                },
                end: {
                    line: 88,
                    column: 5
                }
            },
            "16": {
                start: {
                    line: 87,
                    column: 6
                },
                end: {
                    line: 87,
                    column: 38
                }
            },
            "17": {
                start: {
                    line: 98,
                    column: 4
                },
                end: {
                    line: 100,
                    column: 5
                }
            },
            "18": {
                start: {
                    line: 99,
                    column: 6
                },
                end: {
                    line: 99,
                    column: 36
                }
            },
            "19": {
                start: {
                    line: 105,
                    column: 26
                },
                end: {
                    line: 105,
                    column: 36
                }
            }
        },
        fnMap: {
            "0": {
                name: "(anonymous_0)",
                decl: {
                    start: {
                        line: 36,
                        column: 2
                    },
                    end: {
                        line: 36,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 36,
                        column: 64
                    },
                    end: {
                        line: 43,
                        column: 3
                    }
                },
                line: 36
            },
            "1": {
                name: "(anonymous_1)",
                decl: {
                    start: {
                        line: 51,
                        column: 2
                    },
                    end: {
                        line: 51,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 51,
                        column: 32
                    },
                    end: {
                        line: 53,
                        column: 3
                    }
                },
                line: 51
            },
            "2": {
                name: "(anonymous_2)",
                decl: {
                    start: {
                        line: 61,
                        column: 2
                    },
                    end: {
                        line: 61,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 61,
                        column: 52
                    },
                    end: {
                        line: 65,
                        column: 3
                    }
                },
                line: 61
            },
            "3": {
                name: "(anonymous_3)",
                decl: {
                    start: {
                        line: 73,
                        column: 2
                    },
                    end: {
                        line: 73,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 73,
                        column: 51
                    },
                    end: {
                        line: 77,
                        column: 3
                    }
                },
                line: 73
            },
            "4": {
                name: "(anonymous_4)",
                decl: {
                    start: {
                        line: 85,
                        column: 2
                    },
                    end: {
                        line: 85,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 85,
                        column: 51
                    },
                    end: {
                        line: 89,
                        column: 3
                    }
                },
                line: 85
            },
            "5": {
                name: "(anonymous_5)",
                decl: {
                    start: {
                        line: 97,
                        column: 2
                    },
                    end: {
                        line: 97,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 97,
                        column: 52
                    },
                    end: {
                        line: 101,
                        column: 3
                    }
                },
                line: 97
            }
        },
        branchMap: {
            "0": {
                loc: {
                    start: {
                        line: 62,
                        column: 4
                    },
                    end: {
                        line: 64,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 62,
                            column: 4
                        },
                        end: {
                            line: 64,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 62
            },
            "1": {
                loc: {
                    start: {
                        line: 74,
                        column: 4
                    },
                    end: {
                        line: 76,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 74,
                            column: 4
                        },
                        end: {
                            line: 76,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 74
            },
            "2": {
                loc: {
                    start: {
                        line: 86,
                        column: 4
                    },
                    end: {
                        line: 88,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 86,
                            column: 4
                        },
                        end: {
                            line: 88,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 86
            },
            "3": {
                loc: {
                    start: {
                        line: 98,
                        column: 4
                    },
                    end: {
                        line: 100,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 98,
                            column: 4
                        },
                        end: {
                            line: 100,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 98
            }
        },
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0,
            "18": 0,
            "19": 0
        },
        f: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0
        },
        b: {
            "0": [
                0,
                0
            ],
            "1": [
                0,
                0
            ],
            "2": [
                0,
                0
            ],
            "3": [
                0,
                0
            ]
        },
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "a3d215976e8f4445d954443dbe711d4d643a6d74"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_247ejbh1tn = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_247ejbh1tn();
class SLog {
    /** Debug log level. */ LevelDebug = (cov_247ejbh1tn().s[0]++, -4);
    /** Info log level. */ LevelInfo = (cov_247ejbh1tn().s[1]++, 0);
    /** Warning log level. */ LevelWarn = (cov_247ejbh1tn().s[2]++, 4);
    /** Error log level. */ LevelError = (cov_247ejbh1tn().s[3]++, 8);
    /** Current log severity level. Should only be changed by setLevel. */ level = (cov_247ejbh1tn().s[4]++, this.LevelInfo);
    /**
   * Internal function to actually write to the log.
   *
   * @param level string name of level
   * @param msg message to be printed
   * @param pairs structured pairs to be logged
   */ log(level, msg, pairs) {
        cov_247ejbh1tn().f[0]++;
        cov_247ejbh1tn().s[5]++;
        console.log(`START ${level}: ${msg}`);
        cov_247ejbh1tn().s[6]++;
        for (let pair of pairs){
            cov_247ejbh1tn().s[7]++;
            console.log(pair[0]);
            cov_247ejbh1tn().s[8]++;
            console.log(pair[1]);
        }
        cov_247ejbh1tn().s[9]++;
        console.log(`END ${level}: ${msg}`);
    }
    /**
   * Set the logging severity level to control what messages will appear in the
   * logs.  Messages at or above this severity will be logged.
   *
   * @param level log severity level to use
   */ setLevel(level) {
        cov_247ejbh1tn().f[1]++;
        cov_247ejbh1tn().s[10]++;
        this.level = level;
    }
    /**
   * Log debug message.
   *
   * @param msg log message
   * @param pairs key/value pairs to be logged
   */ debug(msg, ...pairs) {
        cov_247ejbh1tn().f[2]++;
        cov_247ejbh1tn().s[11]++;
        if (this.level <= this.LevelDebug) {
            cov_247ejbh1tn().b[0][0]++;
            cov_247ejbh1tn().s[12]++;
            this.log("DEBUG", msg, pairs);
        } else cov_247ejbh1tn().b[0][1]++;
    }
    /**
   * Log informational message.
   *
   * @param msg log message
   * @param pairs key/value pairs to be logged
   */ info(msg, ...pairs) {
        cov_247ejbh1tn().f[3]++;
        cov_247ejbh1tn().s[13]++;
        if (this.level <= this.LevelInfo) {
            cov_247ejbh1tn().b[1][0]++;
            cov_247ejbh1tn().s[14]++;
            this.log("INFO", msg, pairs);
        } else cov_247ejbh1tn().b[1][1]++;
    }
    /**
   * Log warning message.
   *
   * @param msg log message
   * @param pairs key/value pairs to be logged
   */ warn(msg, ...pairs) {
        cov_247ejbh1tn().f[4]++;
        cov_247ejbh1tn().s[15]++;
        if (this.level <= this.LevelWarn) {
            cov_247ejbh1tn().b[2][0]++;
            cov_247ejbh1tn().s[16]++;
            this.log("WARNING", msg, pairs);
        } else cov_247ejbh1tn().b[2][1]++;
    }
    /**
   * Log error message.
   *
   * @param msg log message
   * @param pairs key/value pairs to be logged
   */ error(msg, ...pairs) {
        cov_247ejbh1tn().f[5]++;
        cov_247ejbh1tn().s[17]++;
        if (this.level <= this.LevelError) {
            cov_247ejbh1tn().b[3][0]++;
            cov_247ejbh1tn().s[18]++;
            this.log("ERROR", msg, pairs);
        } else cov_247ejbh1tn().b[3][1]++;
    }
}
const slog = (cov_247ejbh1tn().s[19]++, new SLog());

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || Object.prototype.hasOwnProperty.call(dest, key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"bxFEF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Handles user authentication and logout operations.
 */ parcelHelpers.export(exports, "LoginModel", ()=>LoginModel);
var _validation = require("./Validation");
function cov_2pdisp23mg() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/model/LoginModel.ts";
    var hash = "37e952d0718618ce3a475680f8aaff8d93cbb913";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/model/LoginModel.ts",
        statementMap: {
            "0": {
                start: {
                    line: 15,
                    column: 4
                },
                end: {
                    line: 15,
                    column: 29
                }
            },
            "1": {
                start: {
                    line: 25,
                    column: 4
                },
                end: {
                    line: 37,
                    column: 5
                }
            },
            "2": {
                start: {
                    line: 26,
                    column: 23
                },
                end: {
                    line: 33,
                    column: 8
                }
            },
            "3": {
                start: {
                    line: 34,
                    column: 6
                },
                end: {
                    line: 34,
                    column: 28
                }
            },
            "4": {
                start: {
                    line: 36,
                    column: 6
                },
                end: {
                    line: 36,
                    column: 48
                }
            },
            "5": {
                start: {
                    line: 47,
                    column: 4
                },
                end: {
                    line: 60,
                    column: 5
                }
            },
            "6": {
                start: {
                    line: 48,
                    column: 23
                },
                end: {
                    line: 53,
                    column: 8
                }
            },
            "7": {
                start: {
                    line: 55,
                    column: 6
                },
                end: {
                    line: 57,
                    column: 7
                }
            },
            "8": {
                start: {
                    line: 56,
                    column: 8
                },
                end: {
                    line: 56,
                    column: 51
                }
            },
            "9": {
                start: {
                    line: 59,
                    column: 6
                },
                end: {
                    line: 59,
                    column: 49
                }
            }
        },
        fnMap: {
            "0": {
                name: "(anonymous_0)",
                decl: {
                    start: {
                        line: 14,
                        column: 2
                    },
                    end: {
                        line: 14,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 14,
                        column: 32
                    },
                    end: {
                        line: 16,
                        column: 3
                    }
                },
                line: 14
            },
            "1": {
                name: "(anonymous_1)",
                decl: {
                    start: {
                        line: 24,
                        column: 2
                    },
                    end: {
                        line: 24,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 24,
                        column: 63
                    },
                    end: {
                        line: 38,
                        column: 3
                    }
                },
                line: 24
            },
            "2": {
                name: "(anonymous_2)",
                decl: {
                    start: {
                        line: 46,
                        column: 2
                    },
                    end: {
                        line: 46,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 46,
                        column: 56
                    },
                    end: {
                        line: 61,
                        column: 3
                    }
                },
                line: 46
            }
        },
        branchMap: {
            "0": {
                loc: {
                    start: {
                        line: 55,
                        column: 6
                    },
                    end: {
                        line: 57,
                        column: 7
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 55,
                            column: 6
                        },
                        end: {
                            line: 57,
                            column: 7
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 55
            }
        },
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0
        },
        f: {
            "0": 0,
            "1": 0,
            "2": 0
        },
        b: {
            "0": [
                0,
                0
            ]
        },
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "37e952d0718618ce3a475680f8aaff8d93cbb913"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_2pdisp23mg = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_2pdisp23mg();
class LoginModel {
    authPath;
    /**
   * Initializes with the API endpoint for authentication.
   * @param authPath - The base API endpoint for authentication.
   */ constructor(authPath){
        cov_2pdisp23mg().f[0]++;
        cov_2pdisp23mg().s[0]++;
        this.authPath = authPath;
    }
    /**
   * Submits the username to owlDB and returns the token.
   * @param username - The username entered by the user.
   * @returns Promise that resolves with the authentication token.
   * @throws An error if the request fails.
   */ async authenticate(username) {
        cov_2pdisp23mg().f[1]++;
        cov_2pdisp23mg().s[1]++;
        try {
            const response = (cov_2pdisp23mg().s[2]++, await (0, _validation.typedFetch)(this.authPath, (0, _validation.isAuth), {
                method: "POST",
                headers: {
                    accept: "application/json",
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    username
                })
            }));
            cov_2pdisp23mg().s[3]++;
            return response.token;
        } catch (error) {
            cov_2pdisp23mg().s[4]++;
            throw new Error("Authentication failed.");
        }
    }
    /**
   * Sends a DELETE request to log out the user.
   * @param authToken - The authentication token for authorization.
   * @returns Promise that resolves when the user is logged out.
   * @throws An error if the request fails.
   */ async logout(authToken) {
        cov_2pdisp23mg().f[2]++;
        cov_2pdisp23mg().s[5]++;
        try {
            const response = (cov_2pdisp23mg().s[6]++, await fetch(this.authPath, {
                method: "DELETE",
                headers: {
                    Authorization: `Bearer ${authToken}`
                }
            }));
            cov_2pdisp23mg().s[7]++;
            if (!response.ok) {
                cov_2pdisp23mg().b[0][0]++;
                cov_2pdisp23mg().s[8]++;
                throw new Error("Logout failed in model.");
            } else cov_2pdisp23mg().b[0][1]++;
        } catch (error) {
            cov_2pdisp23mg().s[9]++;
            throw new Error("Logout failed in model.");
        }
    }
}

},{"./Validation":"87EXf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"87EXf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isPostMeta", ()=>isPostMeta);
parcelHelpers.export(exports, "isPostDoc", ()=>isPostDoc);
parcelHelpers.export(exports, "isPost", ()=>isPost);
parcelHelpers.export(exports, "isPostArray", ()=>isPostArray);
parcelHelpers.export(exports, "isAuth", ()=>isAuth);
parcelHelpers.export(exports, "isURI", ()=>isURI);
parcelHelpers.export(exports, "isPATCHResponse", ()=>isPATCHResponse);
/**
 * A utility function to fetch and validate data against a schema
 * @param url - The URL to fetch data from.
 * @param validate - A type guard function that checks if data conforms to type T.
 * @param options - Optional fetch configuration.
 * @returns A promise resolving to type T[] if validation passes.
 * @throws Error if validation fails or request is unsuccessful.
 */ parcelHelpers.export(exports, "typedFetch", ()=>typedFetch);
var _jsonSchemaToTs = require("json-schema-to-ts");
var _slog = require("../slog");
var _ajv = require("ajv");
function cov_ely8s5375() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/model/Validation.ts";
    var hash = "01bbdbd6f8ea97fde6e9da0bf04113b52e80c28c";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/model/Validation.ts",
        statementMap: {
            "0": {
                start: {
                    line: 11,
                    column: 23
                },
                end: {
                    line: 24,
                    column: 31
                }
            },
            "1": {
                start: {
                    line: 29,
                    column: 22
                },
                end: {
                    line: 48,
                    column: 31
                }
            },
            "2": {
                start: {
                    line: 53,
                    column: 19
                },
                end: {
                    line: 65,
                    column: 31
                }
            },
            "3": {
                start: {
                    line: 70,
                    column: 24
                },
                end: {
                    line: 76,
                    column: 31
                }
            },
            "4": {
                start: {
                    line: 81,
                    column: 19
                },
                end: {
                    line: 91,
                    column: 31
                }
            },
            "5": {
                start: {
                    line: 96,
                    column: 18
                },
                end: {
                    line: 106,
                    column: 31
                }
            },
            "6": {
                start: {
                    line: 111,
                    column: 28
                },
                end: {
                    line: 123,
                    column: 31
                }
            },
            "7": {
                start: {
                    line: 146,
                    column: 12
                },
                end: {
                    line: 146,
                    column: 21
                }
            },
            "8": {
                start: {
                    line: 147,
                    column: 28
                },
                end: {
                    line: 147,
                    column: 59
                }
            },
            "9": {
                start: {
                    line: 147,
                    column: 40
                },
                end: {
                    line: 147,
                    column: 59
                }
            },
            "10": {
                start: {
                    line: 148,
                    column: 16
                },
                end: {
                    line: 148,
                    column: 49
                }
            },
            "11": {
                start: {
                    line: 151,
                    column: 26
                },
                end: {
                    line: 151,
                    column: 49
                }
            },
            "12": {
                start: {
                    line: 152,
                    column: 25
                },
                end: {
                    line: 152,
                    column: 47
                }
            },
            "13": {
                start: {
                    line: 153,
                    column: 22
                },
                end: {
                    line: 153,
                    column: 41
                }
            },
            "14": {
                start: {
                    line: 154,
                    column: 27
                },
                end: {
                    line: 154,
                    column: 51
                }
            },
            "15": {
                start: {
                    line: 155,
                    column: 22
                },
                end: {
                    line: 155,
                    column: 41
                }
            },
            "16": {
                start: {
                    line: 156,
                    column: 21
                },
                end: {
                    line: 156,
                    column: 39
                }
            },
            "17": {
                start: {
                    line: 157,
                    column: 31
                },
                end: {
                    line: 157,
                    column: 59
                }
            },
            "18": {
                start: {
                    line: 172,
                    column: 19
                },
                end: {
                    line: 172,
                    column: 44
                }
            },
            "19": {
                start: {
                    line: 174,
                    column: 2
                },
                end: {
                    line: 176,
                    column: 3
                }
            },
            "20": {
                start: {
                    line: 175,
                    column: 4
                },
                end: {
                    line: 175,
                    column: 60
                }
            },
            "21": {
                start: {
                    line: 177,
                    column: 24
                },
                end: {
                    line: 177,
                    column: 45
                }
            },
            "22": {
                start: {
                    line: 178,
                    column: 2
                },
                end: {
                    line: 178,
                    column: 44
                }
            },
            "23": {
                start: {
                    line: 179,
                    column: 2
                },
                end: {
                    line: 179,
                    column: 76
                }
            },
            "24": {
                start: {
                    line: 180,
                    column: 2
                },
                end: {
                    line: 184,
                    column: 3
                }
            },
            "25": {
                start: {
                    line: 181,
                    column: 4
                },
                end: {
                    line: 181,
                    column: 16
                }
            },
            "26": {
                start: {
                    line: 183,
                    column: 4
                },
                end: {
                    line: 183,
                    column: 75
                }
            }
        },
        fnMap: {
            "0": {
                name: "(anonymous_0)",
                decl: {
                    start: {
                        line: 147,
                        column: 28
                    },
                    end: {
                        line: 147,
                        column: 29
                    }
                },
                loc: {
                    start: {
                        line: 147,
                        column: 40
                    },
                    end: {
                        line: 147,
                        column: 59
                    }
                },
                line: 147
            },
            "1": {
                name: "typedFetch",
                decl: {
                    start: {
                        line: 167,
                        column: 22
                    },
                    end: {
                        line: 167,
                        column: 32
                    }
                },
                loc: {
                    start: {
                        line: 171,
                        column: 14
                    },
                    end: {
                        line: 185,
                        column: 1
                    }
                },
                line: 171
            }
        },
        branchMap: {
            "0": {
                loc: {
                    start: {
                        line: 174,
                        column: 2
                    },
                    end: {
                        line: 176,
                        column: 3
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 174,
                            column: 2
                        },
                        end: {
                            line: 176,
                            column: 3
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 174
            },
            "1": {
                loc: {
                    start: {
                        line: 180,
                        column: 2
                    },
                    end: {
                        line: 184,
                        column: 3
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 180,
                            column: 2
                        },
                        end: {
                            line: 184,
                            column: 3
                        }
                    },
                    {
                        start: {
                            line: 182,
                            column: 9
                        },
                        end: {
                            line: 184,
                            column: 3
                        }
                    }
                ],
                line: 180
            }
        },
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0,
            "18": 0,
            "19": 0,
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0
        },
        f: {
            "0": 0,
            "1": 0
        },
        b: {
            "0": [
                0,
                0
            ],
            "1": [
                0,
                0
            ]
        },
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "01bbdbd6f8ea97fde6e9da0bf04113b52e80c28c"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_ely8s5375 = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_ely8s5375();
/**
 * JSON Schema definition for the metadata of a post.
 */ const PostMetaSchema = (cov_ely8s5375().s[0]++, {
    $id: "postMeta.json",
    $schema: "http://json-schema.org/draft-07/schema",
    title: "PostMeta",
    type: "object",
    required: [
        "createdBy",
        "createdAt",
        "lastModifiedBy",
        "lastModifiedAt"
    ],
    properties: {
        createdBy: {
            type: "string"
        },
        createdAt: {
            type: "number"
        },
        lastModifiedBy: {
            type: "string"
        },
        lastModifiedAt: {
            type: "number"
        }
    },
    additionalProperties: false
});
/**
 * JSON Schema definition for the document structure of a post.
 */ const PostDocSchema = (cov_ely8s5375().s[1]++, {
    $id: "postDoc.json",
    $schema: "http://json-schema.org/draft-07/schema",
    title: "PostDoc",
    type: "object",
    required: [],
    properties: {
        msg: {
            type: "string"
        },
        parent: {
            type: "string"
        },
        reactions: {
            type: "object",
            additionalProperties: {
                type: "array",
                items: {
                    type: "string"
                }
            }
        }
    },
    additionalProperties: true // Allow other arbitrary fields, but ignore them (other exntensions that arent ours)
});
/**
 * JSON Schema definition for the structure of a post.
 */ const PostSchema = (cov_ely8s5375().s[2]++, {
    $id: "post.json",
    $schema: "http://json-schema.org/draft-07/schema",
    title: "Post",
    type: "object",
    required: [
        "path",
        "doc",
        "meta"
    ],
    properties: {
        path: {
            type: "string"
        },
        doc: {
            $ref: "postDoc.json"
        },
        meta: {
            $ref: "postMeta.json"
        }
    },
    additionalProperties: false
});
/**
 * This schema defines an array structure for `Post` objects.
 */ const PostArraySchema = (cov_ely8s5375().s[3]++, {
    $id: "postArray.json",
    $schema: "http://json-schema.org/draft-07/schema",
    title: "PostArray",
    type: "array",
    items: {
        $ref: "post.json"
    }
});
/**
 * This schema defines the structure of an authentication object.
 */ const authSchema = (cov_ely8s5375().s[4]++, {
    $id: "auth.json",
    $schema: "http://json-schema.org/draft-07/schema",
    title: "Auth",
    type: "object",
    required: [
        "token"
    ],
    properties: {
        token: {
            type: "string"
        }
    },
    additionalProperties: false
});
/**
 * This schema defines the structure of a URI object.
 */ const URISchema = (cov_ely8s5375().s[5]++, {
    $id: "URI.json",
    $schema: "http://json-schema.org/draft-07/schema",
    title: "URI",
    type: "object",
    required: [
        "uri"
    ],
    properties: {
        uri: {
            type: "string"
        }
    },
    additionalProperties: false
});
/**
 * This schema defines the structure of a response for a PATCH operation.
 */ const PATCHResponseSchema = (cov_ely8s5375().s[6]++, {
    $id: "PATCHResponse.json",
    $schema: "http://json-schema.org/draft-07/schema",
    title: "PATCHResponse",
    type: "object",
    required: [
        "uri",
        "patchFailed",
        "message"
    ],
    properties: {
        uri: {
            type: "string"
        },
        patchFailed: {
            type: "boolean"
        },
        message: {
            type: "string"
        }
    },
    additionalProperties: false
});
const ajv = (cov_ely8s5375().s[7]++, new (0, _ajv.Ajv)());
cov_ely8s5375().s[8]++;
const $compile = (schema)=>{
    cov_ely8s5375().f[0]++;
    cov_ely8s5375().s[9]++;
    return ajv.compile(schema);
};
const compile = (cov_ely8s5375().s[10]++, (0, _jsonSchemaToTs.wrapCompilerAsTypeGuard)($compile));
const isPostMeta = (cov_ely8s5375().s[11]++, compile(PostMetaSchema));
const isPostDoc = (cov_ely8s5375().s[12]++, compile(PostDocSchema));
const isPost = (cov_ely8s5375().s[13]++, compile(PostSchema));
const isPostArray = (cov_ely8s5375().s[14]++, compile(PostArraySchema));
const isAuth = (cov_ely8s5375().s[15]++, compile(authSchema));
const isURI = (cov_ely8s5375().s[16]++, compile(URISchema));
const isPATCHResponse = (cov_ely8s5375().s[17]++, compile(PATCHResponseSchema));
async function typedFetch(url, validate, options) {
    cov_ely8s5375().f[1]++;
    const response = (cov_ely8s5375().s[18]++, await fetch(url, options));
    cov_ely8s5375().s[19]++;
    if (!response.ok) {
        cov_ely8s5375().b[0][0]++;
        cov_ely8s5375().s[20]++;
        throw new Error(`Fetch failed: ${response.statusText}`);
    } else cov_ely8s5375().b[0][1]++;
    const data = (cov_ely8s5375().s[21]++, await response.json());
    cov_ely8s5375().s[22]++;
    (0, _slog.slog).info("Fetched data", [
        "data",
        data
    ]);
    cov_ely8s5375().s[23]++;
    (0, _slog.slog).info("Validation result for workspaces:", [
        "valid",
        validate(data)
    ]);
    cov_ely8s5375().s[24]++;
    if (validate(data)) {
        cov_ely8s5375().b[1][0]++;
        cov_ely8s5375().s[25]++;
        return data;
    } else {
        cov_ely8s5375().b[1][1]++;
        cov_ely8s5375().s[26]++;
        throw new Error(`Response validation failed: ${JSON.stringify(data)}`);
    }
}

},{"json-schema-to-ts":"lKfjE","../slog":"jExiC","ajv":"anPq0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lKfjE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "wrapCompilerAsTypeGuard", ()=>(0, _utils.wrapCompilerAsTypeGuard)) /**
 * Given a JSON schema defined with the `as const` statement, infers the type of valid instances
 * @param SCHEMA JSON schema
 */  /**
 * Given an extended JSON schema defined with the `as const` statement, infers the type of valid instances
 * @param SCHEMA JSON schema
 */ ;
parcelHelpers.export(exports, "wrapValidatorAsTypeGuard", ()=>(0, _utils.wrapValidatorAsTypeGuard));
parcelHelpers.export(exports, "asConst", ()=>(0, _utils.asConst));
var _utils = require("./utils");

},{"./utils":"8OZgw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8OZgw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "wrapCompilerAsTypeGuard", ()=>(0, _typeGuards.wrapCompilerAsTypeGuard));
parcelHelpers.export(exports, "wrapValidatorAsTypeGuard", ()=>(0, _typeGuards.wrapValidatorAsTypeGuard));
parcelHelpers.export(exports, "asConst", ()=>(0, _asConst.asConst));
var _typeGuards = require("./type-guards");
var _asConst = require("./asConst");

},{"./type-guards":"hm8rc","./asConst":"bRUce","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hm8rc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "wrapCompilerAsTypeGuard", ()=>(0, _compiler.wrapCompilerAsTypeGuard));
parcelHelpers.export(exports, "wrapValidatorAsTypeGuard", ()=>(0, _validator.wrapValidatorAsTypeGuard));
var _compiler = require("./compiler");
var _validator = require("./validator");

},{"./compiler":"jNhiX","./validator":"kxHjQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jNhiX":[function(require,module,exports) {
/**
 * Any compiler function type (non type-guarding)
 */ /**
 * Adds type guarding to a validator function
 *
 * ```ts
 * const compiler: Compiler = <S extends JSONSchema, T = FromSchema<S>>(
 *   schema: S,
 * ) => (data: unknown): data is T => {
 *   const isDataValid: boolean = ... // Implement validation here
 *   return isDataValid;
 * };
 * ```
 */ /**
 * Type definition for `wrapCompilerAsTypeGuard`
 */ /**
 * Adds type guarding to any compiler function (doesn't modify it)
 * @param compiler Compiler function
 * @returns Compiler function with type guarding
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "wrapCompilerAsTypeGuard", ()=>wrapCompilerAsTypeGuard);
var wrapCompilerAsTypeGuard = function wrapCompilerAsTypeGuard(compiler) {
    return function(schema) {
        for(var _len = arguments.length, compilingOptions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)compilingOptions[_key - 1] = arguments[_key];
        var validator = compiler.apply(void 0, [
            schema
        ].concat(compilingOptions));
        return function(data) {
            for(var _len2 = arguments.length, validationOptions = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)validationOptions[_key2 - 1] = arguments[_key2];
            return validator.apply(void 0, [
                data
            ].concat(validationOptions));
        };
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kxHjQ":[function(require,module,exports) {
/**
 * Any validator function type (non type-guarding)
 */ /**
 * Adds type guarding to a validator function
 *
 * ```ts
 * const validate: Validator = <S extends JSONSchema, T = FromSchema<S>>(
 *   schema: S,
 *   data: unknown
 * ): data is T => {
 *   const isDataValid: boolean = ... // Implement validation here
 *   return isDataValid;
 * };
 * ```
 */ /**
 * Type definition for wrapValidatorAsTypeGuard
 */ /**
 * Adds type guarding to any validator function (doesn't modify it)
 * @param validator Validator function
 * @returns Validator function with type guarding
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "wrapValidatorAsTypeGuard", ()=>wrapValidatorAsTypeGuard);
var wrapValidatorAsTypeGuard = function wrapValidatorAsTypeGuard(validator) {
    return function(schema, data) {
        for(var _len = arguments.length, validationOptions = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++)validationOptions[_key - 2] = arguments[_key];
        return validator.apply(void 0, [
            schema,
            data
        ].concat(validationOptions));
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bRUce":[function(require,module,exports) {
/**
 * Returns the input parameter without muting it, but narrowing its inferred type. Similar to using the `as const` statement functionnally.
 * @param input Input
 * @returns Input, narrowly typed
 *
 * ```ts
 * const object = { foo: "bar" }
 * // { foo: string }
 *
 * const narrowedObject = asConst({ foo: "bar "})
 * // => { foo: "bar" }
 * ```
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "asConst", ()=>asConst);
var asConst = function asConst(input) {
    return input;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"anPq0":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MissingRefError = exports.ValidationError = exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = exports.Ajv = void 0;
const core_1 = require("f64656127e08982d");
const draft7_1 = require("f1543da9385b944c");
const discriminator_1 = require("be8496814b704dbb");
const draft7MetaSchema = require("38bd7a84a0bf1522");
const META_SUPPORT_DATA = [
    "/properties"
];
const META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
class Ajv extends core_1.default {
    _addVocabularies() {
        super._addVocabularies();
        draft7_1.default.forEach((v)=>this.addVocabulary(v));
        if (this.opts.discriminator) this.addKeyword(discriminator_1.default);
    }
    _addDefaultMetaSchema() {
        super._addDefaultMetaSchema();
        if (!this.opts.meta) return;
        const metaSchema = this.opts.$data ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA) : draft7MetaSchema;
        this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);
        this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
    }
    defaultMeta() {
        return this.opts.defaultMeta = super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined);
    }
}
exports.Ajv = Ajv;
module.exports = exports = Ajv;
module.exports.Ajv = Ajv;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = Ajv;
var validate_1 = require("e0cfa52b6e683bc7");
Object.defineProperty(exports, "KeywordCxt", {
    enumerable: true,
    get: function() {
        return validate_1.KeywordCxt;
    }
});
var codegen_1 = require("3d074431b417a468");
Object.defineProperty(exports, "_", {
    enumerable: true,
    get: function() {
        return codegen_1._;
    }
});
Object.defineProperty(exports, "str", {
    enumerable: true,
    get: function() {
        return codegen_1.str;
    }
});
Object.defineProperty(exports, "stringify", {
    enumerable: true,
    get: function() {
        return codegen_1.stringify;
    }
});
Object.defineProperty(exports, "nil", {
    enumerable: true,
    get: function() {
        return codegen_1.nil;
    }
});
Object.defineProperty(exports, "Name", {
    enumerable: true,
    get: function() {
        return codegen_1.Name;
    }
});
Object.defineProperty(exports, "CodeGen", {
    enumerable: true,
    get: function() {
        return codegen_1.CodeGen;
    }
});
var validation_error_1 = require("dc5ef56e4c544902");
Object.defineProperty(exports, "ValidationError", {
    enumerable: true,
    get: function() {
        return validation_error_1.default;
    }
});
var ref_error_1 = require("1f676e068a0a0b03");
Object.defineProperty(exports, "MissingRefError", {
    enumerable: true,
    get: function() {
        return ref_error_1.default;
    }
});

},{"f64656127e08982d":"7gtOe","f1543da9385b944c":"ahp09","be8496814b704dbb":"k3AWl","38bd7a84a0bf1522":"k348E","e0cfa52b6e683bc7":"bpnTE","3d074431b417a468":"9wlmn","dc5ef56e4c544902":"j2YyX","1f676e068a0a0b03":"khkIe"}],"7gtOe":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
var validate_1 = require("8eae9e8df37feb7a");
Object.defineProperty(exports, "KeywordCxt", {
    enumerable: true,
    get: function() {
        return validate_1.KeywordCxt;
    }
});
var codegen_1 = require("ffa9e7efa8fd1e4a");
Object.defineProperty(exports, "_", {
    enumerable: true,
    get: function() {
        return codegen_1._;
    }
});
Object.defineProperty(exports, "str", {
    enumerable: true,
    get: function() {
        return codegen_1.str;
    }
});
Object.defineProperty(exports, "stringify", {
    enumerable: true,
    get: function() {
        return codegen_1.stringify;
    }
});
Object.defineProperty(exports, "nil", {
    enumerable: true,
    get: function() {
        return codegen_1.nil;
    }
});
Object.defineProperty(exports, "Name", {
    enumerable: true,
    get: function() {
        return codegen_1.Name;
    }
});
Object.defineProperty(exports, "CodeGen", {
    enumerable: true,
    get: function() {
        return codegen_1.CodeGen;
    }
});
const validation_error_1 = require("eaa88e3aaccf251");
const ref_error_1 = require("f63f87f091d36ef7");
const rules_1 = require("5a4bc288296cc41c");
const compile_1 = require("2ea5240ba3b7911d");
const codegen_2 = require("ffa9e7efa8fd1e4a");
const resolve_1 = require("d28de041b2cba4fb");
const dataType_1 = require("53d10d85530b6b99");
const util_1 = require("66ed8b4de95754e9");
const $dataRefSchema = require("420a5d11860e6768");
const uri_1 = require("fe7cd4bb08eb811");
const defaultRegExp = (str, flags)=>new RegExp(str, flags);
defaultRegExp.code = "new RegExp";
const META_IGNORE_OPTIONS = [
    "removeAdditional",
    "useDefaults",
    "coerceTypes"
];
const EXT_SCOPE_NAMES = new Set([
    "validate",
    "serialize",
    "parse",
    "wrapper",
    "root",
    "schema",
    "keyword",
    "pattern",
    "formats",
    "validate$data",
    "func",
    "obj",
    "Error"
]);
const removedOptions = {
    errorDataPath: "",
    format: "`validateFormats: false` can be used instead.",
    nullable: '"nullable" keyword is supported by default.',
    jsonPointers: "Deprecated jsPropertySyntax can be used instead.",
    extendRefs: "Deprecated ignoreKeywordsWithRef can be used instead.",
    missingRefs: "Pass empty schema with $id that should be ignored to ajv.addSchema.",
    processCode: "Use option `code: {process: (code, schemaEnv: object) => string}`",
    sourceCode: "Use option `code: {source: true}`",
    strictDefaults: "It is default now, see option `strict`.",
    strictKeywords: "It is default now, see option `strict`.",
    uniqueItems: '"uniqueItems" keyword is always validated.',
    unknownFormats: "Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",
    cache: "Map is used as cache, schema object as key.",
    serialize: "Map is used as cache, schema object as key.",
    ajvErrors: "It is default now."
};
const deprecatedOptions = {
    ignoreKeywordsWithRef: "",
    jsPropertySyntax: "",
    unicode: '"minLength"/"maxLength" account for unicode characters by default.'
};
const MAX_EXPRESSION = 200;
// eslint-disable-next-line complexity
function requiredOptions(o) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
    const s = o.strict;
    const _optz = (_a = o.code) === null || _a === void 0 ? void 0 : _a.optimize;
    const optimize = _optz === true || _optz === undefined ? 1 : _optz || 0;
    const regExp = (_c = (_b = o.code) === null || _b === void 0 ? void 0 : _b.regExp) !== null && _c !== void 0 ? _c : defaultRegExp;
    const uriResolver = (_d = o.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;
    return {
        strictSchema: (_f = (_e = o.strictSchema) !== null && _e !== void 0 ? _e : s) !== null && _f !== void 0 ? _f : true,
        strictNumbers: (_h = (_g = o.strictNumbers) !== null && _g !== void 0 ? _g : s) !== null && _h !== void 0 ? _h : true,
        strictTypes: (_k = (_j = o.strictTypes) !== null && _j !== void 0 ? _j : s) !== null && _k !== void 0 ? _k : "log",
        strictTuples: (_m = (_l = o.strictTuples) !== null && _l !== void 0 ? _l : s) !== null && _m !== void 0 ? _m : "log",
        strictRequired: (_p = (_o = o.strictRequired) !== null && _o !== void 0 ? _o : s) !== null && _p !== void 0 ? _p : false,
        code: o.code ? {
            ...o.code,
            optimize,
            regExp
        } : {
            optimize,
            regExp
        },
        loopRequired: (_q = o.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,
        loopEnum: (_r = o.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,
        meta: (_s = o.meta) !== null && _s !== void 0 ? _s : true,
        messages: (_t = o.messages) !== null && _t !== void 0 ? _t : true,
        inlineRefs: (_u = o.inlineRefs) !== null && _u !== void 0 ? _u : true,
        schemaId: (_v = o.schemaId) !== null && _v !== void 0 ? _v : "$id",
        addUsedSchema: (_w = o.addUsedSchema) !== null && _w !== void 0 ? _w : true,
        validateSchema: (_x = o.validateSchema) !== null && _x !== void 0 ? _x : true,
        validateFormats: (_y = o.validateFormats) !== null && _y !== void 0 ? _y : true,
        unicodeRegExp: (_z = o.unicodeRegExp) !== null && _z !== void 0 ? _z : true,
        int32range: (_0 = o.int32range) !== null && _0 !== void 0 ? _0 : true,
        uriResolver: uriResolver
    };
}
class Ajv {
    constructor(opts = {}){
        this.schemas = {};
        this.refs = {};
        this.formats = {};
        this._compilations = new Set();
        this._loading = {};
        this._cache = new Map();
        opts = this.opts = {
            ...opts,
            ...requiredOptions(opts)
        };
        const { es5, lines } = this.opts.code;
        this.scope = new codegen_2.ValueScope({
            scope: {},
            prefixes: EXT_SCOPE_NAMES,
            es5,
            lines
        });
        this.logger = getLogger(opts.logger);
        const formatOpt = opts.validateFormats;
        opts.validateFormats = false;
        this.RULES = (0, rules_1.getRules)();
        checkOptions.call(this, removedOptions, opts, "NOT SUPPORTED");
        checkOptions.call(this, deprecatedOptions, opts, "DEPRECATED", "warn");
        this._metaOpts = getMetaSchemaOptions.call(this);
        if (opts.formats) addInitialFormats.call(this);
        this._addVocabularies();
        this._addDefaultMetaSchema();
        if (opts.keywords) addInitialKeywords.call(this, opts.keywords);
        if (typeof opts.meta == "object") this.addMetaSchema(opts.meta);
        addInitialSchemas.call(this);
        opts.validateFormats = formatOpt;
    }
    _addVocabularies() {
        this.addKeyword("$async");
    }
    _addDefaultMetaSchema() {
        const { $data, meta, schemaId } = this.opts;
        let _dataRefSchema = $dataRefSchema;
        if (schemaId === "id") {
            _dataRefSchema = {
                ...$dataRefSchema
            };
            _dataRefSchema.id = _dataRefSchema.$id;
            delete _dataRefSchema.$id;
        }
        if (meta && $data) this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);
    }
    defaultMeta() {
        const { meta, schemaId } = this.opts;
        return this.opts.defaultMeta = typeof meta == "object" ? meta[schemaId] || meta : undefined;
    }
    validate(schemaKeyRef, // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents
    data // to be validated
    ) {
        let v;
        if (typeof schemaKeyRef == "string") {
            v = this.getSchema(schemaKeyRef);
            if (!v) throw new Error(`no schema with key or ref "${schemaKeyRef}"`);
        } else v = this.compile(schemaKeyRef);
        const valid = v(data);
        if (!("$async" in v)) this.errors = v.errors;
        return valid;
    }
    compile(schema, _meta) {
        const sch = this._addSchema(schema, _meta);
        return sch.validate || this._compileSchemaEnv(sch);
    }
    compileAsync(schema, meta) {
        if (typeof this.opts.loadSchema != "function") throw new Error("options.loadSchema should be a function");
        const { loadSchema } = this.opts;
        return runCompileAsync.call(this, schema, meta);
        async function runCompileAsync(_schema, _meta) {
            await loadMetaSchema.call(this, _schema.$schema);
            const sch = this._addSchema(_schema, _meta);
            return sch.validate || _compileAsync.call(this, sch);
        }
        async function loadMetaSchema($ref) {
            if ($ref && !this.getSchema($ref)) await runCompileAsync.call(this, {
                $ref
            }, true);
        }
        async function _compileAsync(sch) {
            try {
                return this._compileSchemaEnv(sch);
            } catch (e) {
                if (!(e instanceof ref_error_1.default)) throw e;
                checkLoaded.call(this, e);
                await loadMissingSchema.call(this, e.missingSchema);
                return _compileAsync.call(this, sch);
            }
        }
        function checkLoaded({ missingSchema: ref, missingRef }) {
            if (this.refs[ref]) throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);
        }
        async function loadMissingSchema(ref) {
            const _schema = await _loadSchema.call(this, ref);
            if (!this.refs[ref]) await loadMetaSchema.call(this, _schema.$schema);
            if (!this.refs[ref]) this.addSchema(_schema, ref, meta);
        }
        async function _loadSchema(ref) {
            const p = this._loading[ref];
            if (p) return p;
            try {
                return await (this._loading[ref] = loadSchema(ref));
            } finally{
                delete this._loading[ref];
            }
        }
    }
    // Adds schema to the instance
    addSchema(schema, key, _meta, _validateSchema = this.opts.validateSchema // false to skip schema validation. Used internally, option validateSchema should be used instead.
    ) {
        if (Array.isArray(schema)) {
            for (const sch of schema)this.addSchema(sch, undefined, _meta, _validateSchema);
            return this;
        }
        let id;
        if (typeof schema === "object") {
            const { schemaId } = this.opts;
            id = schema[schemaId];
            if (id !== undefined && typeof id != "string") throw new Error(`schema ${schemaId} must be string`);
        }
        key = (0, resolve_1.normalizeId)(key || id);
        this._checkUnique(key);
        this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true);
        return this;
    }
    // Add schema that will be used to validate other schemas
    // options in META_IGNORE_OPTIONS are alway set to false
    addMetaSchema(schema, key, _validateSchema = this.opts.validateSchema // false to skip schema validation, can be used to override validateSchema option for meta-schema
    ) {
        this.addSchema(schema, key, true, _validateSchema);
        return this;
    }
    //  Validate schema against its meta-schema
    validateSchema(schema, throwOrLogError) {
        if (typeof schema == "boolean") return true;
        let $schema;
        $schema = schema.$schema;
        if ($schema !== undefined && typeof $schema != "string") throw new Error("$schema must be a string");
        $schema = $schema || this.opts.defaultMeta || this.defaultMeta();
        if (!$schema) {
            this.logger.warn("meta-schema not available");
            this.errors = null;
            return true;
        }
        const valid = this.validate($schema, schema);
        if (!valid && throwOrLogError) {
            const message = "schema is invalid: " + this.errorsText();
            if (this.opts.validateSchema === "log") this.logger.error(message);
            else throw new Error(message);
        }
        return valid;
    }
    // Get compiled schema by `key` or `ref`.
    // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)
    getSchema(keyRef) {
        let sch;
        while(typeof (sch = getSchEnv.call(this, keyRef)) == "string")keyRef = sch;
        if (sch === undefined) {
            const { schemaId } = this.opts;
            const root = new compile_1.SchemaEnv({
                schema: {},
                schemaId
            });
            sch = compile_1.resolveSchema.call(this, root, keyRef);
            if (!sch) return;
            this.refs[keyRef] = sch;
        }
        return sch.validate || this._compileSchemaEnv(sch);
    }
    // Remove cached schema(s).
    // If no parameter is passed all schemas but meta-schemas are removed.
    // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
    // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
    removeSchema(schemaKeyRef) {
        if (schemaKeyRef instanceof RegExp) {
            this._removeAllSchemas(this.schemas, schemaKeyRef);
            this._removeAllSchemas(this.refs, schemaKeyRef);
            return this;
        }
        switch(typeof schemaKeyRef){
            case "undefined":
                this._removeAllSchemas(this.schemas);
                this._removeAllSchemas(this.refs);
                this._cache.clear();
                return this;
            case "string":
                {
                    const sch = getSchEnv.call(this, schemaKeyRef);
                    if (typeof sch == "object") this._cache.delete(sch.schema);
                    delete this.schemas[schemaKeyRef];
                    delete this.refs[schemaKeyRef];
                    return this;
                }
            case "object":
                {
                    const cacheKey = schemaKeyRef;
                    this._cache.delete(cacheKey);
                    let id = schemaKeyRef[this.opts.schemaId];
                    if (id) {
                        id = (0, resolve_1.normalizeId)(id);
                        delete this.schemas[id];
                        delete this.refs[id];
                    }
                    return this;
                }
            default:
                throw new Error("ajv.removeSchema: invalid parameter");
        }
    }
    // add "vocabulary" - a collection of keywords
    addVocabulary(definitions) {
        for (const def of definitions)this.addKeyword(def);
        return this;
    }
    addKeyword(kwdOrDef, def // deprecated
    ) {
        let keyword;
        if (typeof kwdOrDef == "string") {
            keyword = kwdOrDef;
            if (typeof def == "object") {
                this.logger.warn("these parameters are deprecated, see docs for addKeyword");
                def.keyword = keyword;
            }
        } else if (typeof kwdOrDef == "object" && def === undefined) {
            def = kwdOrDef;
            keyword = def.keyword;
            if (Array.isArray(keyword) && !keyword.length) throw new Error("addKeywords: keyword must be string or non-empty array");
        } else throw new Error("invalid addKeywords parameters");
        checkKeyword.call(this, keyword, def);
        if (!def) {
            (0, util_1.eachItem)(keyword, (kwd)=>addRule.call(this, kwd));
            return this;
        }
        keywordMetaschema.call(this, def);
        const definition = {
            ...def,
            type: (0, dataType_1.getJSONTypes)(def.type),
            schemaType: (0, dataType_1.getJSONTypes)(def.schemaType)
        };
        (0, util_1.eachItem)(keyword, definition.type.length === 0 ? (k)=>addRule.call(this, k, definition) : (k)=>definition.type.forEach((t)=>addRule.call(this, k, definition, t)));
        return this;
    }
    getKeyword(keyword) {
        const rule = this.RULES.all[keyword];
        return typeof rule == "object" ? rule.definition : !!rule;
    }
    // Remove keyword
    removeKeyword(keyword) {
        // TODO return type should be Ajv
        const { RULES } = this;
        delete RULES.keywords[keyword];
        delete RULES.all[keyword];
        for (const group of RULES.rules){
            const i = group.rules.findIndex((rule)=>rule.keyword === keyword);
            if (i >= 0) group.rules.splice(i, 1);
        }
        return this;
    }
    // Add format
    addFormat(name, format) {
        if (typeof format == "string") format = new RegExp(format);
        this.formats[name] = format;
        return this;
    }
    errorsText(errors = this.errors, { separator = ", ", dataVar = "data" } = {} // optional options with properties `separator` and `dataVar`
    ) {
        if (!errors || errors.length === 0) return "No errors";
        return errors.map((e)=>`${dataVar}${e.instancePath} ${e.message}`).reduce((text, msg)=>text + separator + msg);
    }
    $dataMetaSchema(metaSchema, keywordsJsonPointers) {
        const rules = this.RULES.all;
        metaSchema = JSON.parse(JSON.stringify(metaSchema));
        for (const jsonPointer of keywordsJsonPointers){
            const segments = jsonPointer.split("/").slice(1); // first segment is an empty string
            let keywords = metaSchema;
            for (const seg of segments)keywords = keywords[seg];
            for(const key in rules){
                const rule = rules[key];
                if (typeof rule != "object") continue;
                const { $data } = rule.definition;
                const schema = keywords[key];
                if ($data && schema) keywords[key] = schemaOrData(schema);
            }
        }
        return metaSchema;
    }
    _removeAllSchemas(schemas, regex) {
        for(const keyRef in schemas){
            const sch = schemas[keyRef];
            if (!regex || regex.test(keyRef)) {
                if (typeof sch == "string") delete schemas[keyRef];
                else if (sch && !sch.meta) {
                    this._cache.delete(sch.schema);
                    delete schemas[keyRef];
                }
            }
        }
    }
    _addSchema(schema, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {
        let id;
        const { schemaId } = this.opts;
        if (typeof schema == "object") id = schema[schemaId];
        else {
            if (this.opts.jtd) throw new Error("schema must be object");
            else if (typeof schema != "boolean") throw new Error("schema must be object or boolean");
        }
        let sch = this._cache.get(schema);
        if (sch !== undefined) return sch;
        baseId = (0, resolve_1.normalizeId)(id || baseId);
        const localRefs = resolve_1.getSchemaRefs.call(this, schema, baseId);
        sch = new compile_1.SchemaEnv({
            schema,
            schemaId,
            meta,
            baseId,
            localRefs
        });
        this._cache.set(sch.schema, sch);
        if (addSchema && !baseId.startsWith("#")) {
            // TODO atm it is allowed to overwrite schemas without id (instead of not adding them)
            if (baseId) this._checkUnique(baseId);
            this.refs[baseId] = sch;
        }
        if (validateSchema) this.validateSchema(schema, true);
        return sch;
    }
    _checkUnique(id) {
        if (this.schemas[id] || this.refs[id]) throw new Error(`schema with key or id "${id}" already exists`);
    }
    _compileSchemaEnv(sch) {
        if (sch.meta) this._compileMetaSchema(sch);
        else compile_1.compileSchema.call(this, sch);
        /* istanbul ignore if */ if (!sch.validate) throw new Error("ajv implementation error");
        return sch.validate;
    }
    _compileMetaSchema(sch) {
        const currentOpts = this.opts;
        this.opts = this._metaOpts;
        try {
            compile_1.compileSchema.call(this, sch);
        } finally{
            this.opts = currentOpts;
        }
    }
}
Ajv.ValidationError = validation_error_1.default;
Ajv.MissingRefError = ref_error_1.default;
exports.default = Ajv;
function checkOptions(checkOpts, options, msg, log = "error") {
    for(const key in checkOpts){
        const opt = key;
        if (opt in options) this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);
    }
}
function getSchEnv(keyRef) {
    keyRef = (0, resolve_1.normalizeId)(keyRef); // TODO tests fail without this line
    return this.schemas[keyRef] || this.refs[keyRef];
}
function addInitialSchemas() {
    const optsSchemas = this.opts.schemas;
    if (!optsSchemas) return;
    if (Array.isArray(optsSchemas)) this.addSchema(optsSchemas);
    else for(const key in optsSchemas)this.addSchema(optsSchemas[key], key);
}
function addInitialFormats() {
    for(const name in this.opts.formats){
        const format = this.opts.formats[name];
        if (format) this.addFormat(name, format);
    }
}
function addInitialKeywords(defs) {
    if (Array.isArray(defs)) {
        this.addVocabulary(defs);
        return;
    }
    this.logger.warn("keywords option as map is deprecated, pass array");
    for(const keyword in defs){
        const def = defs[keyword];
        if (!def.keyword) def.keyword = keyword;
        this.addKeyword(def);
    }
}
function getMetaSchemaOptions() {
    const metaOpts = {
        ...this.opts
    };
    for (const opt of META_IGNORE_OPTIONS)delete metaOpts[opt];
    return metaOpts;
}
const noLogs = {
    log () {},
    warn () {},
    error () {}
};
function getLogger(logger) {
    if (logger === false) return noLogs;
    if (logger === undefined) return console;
    if (logger.log && logger.warn && logger.error) return logger;
    throw new Error("logger must implement log, warn and error methods");
}
const KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;
function checkKeyword(keyword, def) {
    const { RULES } = this;
    (0, util_1.eachItem)(keyword, (kwd)=>{
        if (RULES.keywords[kwd]) throw new Error(`Keyword ${kwd} is already defined`);
        if (!KEYWORD_NAME.test(kwd)) throw new Error(`Keyword ${kwd} has invalid name`);
    });
    if (!def) return;
    if (def.$data && !("code" in def || "validate" in def)) throw new Error('$data keyword must have "code" or "validate" function');
}
function addRule(keyword, definition, dataType) {
    var _a;
    const post = definition === null || definition === void 0 ? void 0 : definition.post;
    if (dataType && post) throw new Error('keyword with "post" flag cannot have "type"');
    const { RULES } = this;
    let ruleGroup = post ? RULES.post : RULES.rules.find(({ type: t })=>t === dataType);
    if (!ruleGroup) {
        ruleGroup = {
            type: dataType,
            rules: []
        };
        RULES.rules.push(ruleGroup);
    }
    RULES.keywords[keyword] = true;
    if (!definition) return;
    const rule = {
        keyword,
        definition: {
            ...definition,
            type: (0, dataType_1.getJSONTypes)(definition.type),
            schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType)
        }
    };
    if (definition.before) addBeforeRule.call(this, ruleGroup, rule, definition.before);
    else ruleGroup.rules.push(rule);
    RULES.all[keyword] = rule;
    (_a = definition.implements) === null || _a === void 0 || _a.forEach((kwd)=>this.addKeyword(kwd));
}
function addBeforeRule(ruleGroup, rule, before) {
    const i = ruleGroup.rules.findIndex((_rule)=>_rule.keyword === before);
    if (i >= 0) ruleGroup.rules.splice(i, 0, rule);
    else {
        ruleGroup.rules.push(rule);
        this.logger.warn(`rule ${before} is not defined`);
    }
}
function keywordMetaschema(def) {
    let { metaSchema } = def;
    if (metaSchema === undefined) return;
    if (def.$data && this.opts.$data) metaSchema = schemaOrData(metaSchema);
    def.validateSchema = this.compile(metaSchema, true);
}
const $dataRef = {
    $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"
};
function schemaOrData(schema) {
    return {
        anyOf: [
            schema,
            $dataRef
        ]
    };
}

},{"8eae9e8df37feb7a":"bpnTE","ffa9e7efa8fd1e4a":"9wlmn","eaa88e3aaccf251":"j2YyX","f63f87f091d36ef7":"khkIe","5a4bc288296cc41c":"ivJ7c","2ea5240ba3b7911d":"41z82","d28de041b2cba4fb":"7lpjd","53d10d85530b6b99":"iSvmi","66ed8b4de95754e9":"7vNtM","420a5d11860e6768":"29Tr5","fe7cd4bb08eb811":"iM407"}],"bpnTE":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getData = exports.KeywordCxt = exports.validateFunctionCode = void 0;
const boolSchema_1 = require("1872624698c52350");
const dataType_1 = require("30e941be85fe7fe1");
const applicability_1 = require("4efae0989d707fc9");
const dataType_2 = require("30e941be85fe7fe1");
const defaults_1 = require("59b5b06ee813874");
const keyword_1 = require("833ade6d8e5d7ac7");
const subschema_1 = require("721d23bc0d70f9c5");
const codegen_1 = require("dd369f53d36c1331");
const names_1 = require("3b360641a0a45156");
const resolve_1 = require("c00dd44166cd9602");
const util_1 = require("b5aac0cdec5ecfd");
const errors_1 = require("eda806e054ff0f41");
// schema compilation - generates validation function, subschemaCode (below) is used for subschemas
function validateFunctionCode(it) {
    if (isSchemaObj(it)) {
        checkKeywords(it);
        if (schemaCxtHasRules(it)) {
            topSchemaObjCode(it);
            return;
        }
    }
    validateFunction(it, ()=>(0, boolSchema_1.topBoolOrEmptySchema)(it));
}
exports.validateFunctionCode = validateFunctionCode;
function validateFunction({ gen, validateName, schema, schemaEnv, opts }, body) {
    if (opts.code.es5) gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${names_1.default.valCxt}`, schemaEnv.$async, ()=>{
        gen.code((0, codegen_1._)`"use strict"; ${funcSourceUrl(schema, opts)}`);
        destructureValCxtES5(gen, opts);
        gen.code(body);
    });
    else gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, ()=>gen.code(funcSourceUrl(schema, opts)).code(body));
}
function destructureValCxt(opts) {
    return (0, codegen_1._)`{${names_1.default.instancePath}="", ${names_1.default.parentData}, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${names_1.default.data}${opts.dynamicRef ? (0, codegen_1._)`, ${names_1.default.dynamicAnchors}={}` : codegen_1.nil}}={}`;
}
function destructureValCxtES5(gen, opts) {
    gen.if(names_1.default.valCxt, ()=>{
        gen.var(names_1.default.instancePath, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.instancePath}`);
        gen.var(names_1.default.parentData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentData}`);
        gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentDataProperty}`);
        gen.var(names_1.default.rootData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.rootData}`);
        if (opts.dynamicRef) gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`);
    }, ()=>{
        gen.var(names_1.default.instancePath, (0, codegen_1._)`""`);
        gen.var(names_1.default.parentData, (0, codegen_1._)`undefined`);
        gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`undefined`);
        gen.var(names_1.default.rootData, names_1.default.data);
        if (opts.dynamicRef) gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`{}`);
    });
}
function topSchemaObjCode(it) {
    const { schema, opts, gen } = it;
    validateFunction(it, ()=>{
        if (opts.$comment && schema.$comment) commentKeyword(it);
        checkNoDefault(it);
        gen.let(names_1.default.vErrors, null);
        gen.let(names_1.default.errors, 0);
        if (opts.unevaluated) resetEvaluated(it);
        typeAndKeywords(it);
        returnResults(it);
    });
    return;
}
function resetEvaluated(it) {
    // TODO maybe some hook to execute it in the end to check whether props/items are Name, as in assignEvaluated
    const { gen, validateName } = it;
    it.evaluated = gen.const("evaluated", (0, codegen_1._)`${validateName}.evaluated`);
    gen.if((0, codegen_1._)`${it.evaluated}.dynamicProps`, ()=>gen.assign((0, codegen_1._)`${it.evaluated}.props`, (0, codegen_1._)`undefined`));
    gen.if((0, codegen_1._)`${it.evaluated}.dynamicItems`, ()=>gen.assign((0, codegen_1._)`${it.evaluated}.items`, (0, codegen_1._)`undefined`));
}
function funcSourceUrl(schema, opts) {
    const schId = typeof schema == "object" && schema[opts.schemaId];
    return schId && (opts.code.source || opts.code.process) ? (0, codegen_1._)`/*# sourceURL=${schId} */` : codegen_1.nil;
}
// schema compilation - this function is used recursively to generate code for sub-schemas
function subschemaCode(it, valid) {
    if (isSchemaObj(it)) {
        checkKeywords(it);
        if (schemaCxtHasRules(it)) {
            subSchemaObjCode(it, valid);
            return;
        }
    }
    (0, boolSchema_1.boolOrEmptySchema)(it, valid);
}
function schemaCxtHasRules({ schema, self }) {
    if (typeof schema == "boolean") return !schema;
    for(const key in schema)if (self.RULES.all[key]) return true;
    return false;
}
function isSchemaObj(it) {
    return typeof it.schema != "boolean";
}
function subSchemaObjCode(it, valid) {
    const { schema, gen, opts } = it;
    if (opts.$comment && schema.$comment) commentKeyword(it);
    updateContext(it);
    checkAsyncSchema(it);
    const errsCount = gen.const("_errs", names_1.default.errors);
    typeAndKeywords(it, errsCount);
    // TODO var
    gen.var(valid, (0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
}
function checkKeywords(it) {
    (0, util_1.checkUnknownRules)(it);
    checkRefsAndKeywords(it);
}
function typeAndKeywords(it, errsCount) {
    if (it.opts.jtd) return schemaKeywords(it, [], false, errsCount);
    const types = (0, dataType_1.getSchemaTypes)(it.schema);
    const checkedTypes = (0, dataType_1.coerceAndCheckDataType)(it, types);
    schemaKeywords(it, types, !checkedTypes, errsCount);
}
function checkRefsAndKeywords(it) {
    const { schema, errSchemaPath, opts, self } = it;
    if (schema.$ref && opts.ignoreKeywordsWithRef && (0, util_1.schemaHasRulesButRef)(schema, self.RULES)) self.logger.warn(`$ref: keywords ignored in schema at path "${errSchemaPath}"`);
}
function checkNoDefault(it) {
    const { schema, opts } = it;
    if (schema.default !== undefined && opts.useDefaults && opts.strictSchema) (0, util_1.checkStrictMode)(it, "default is ignored in the schema root");
}
function updateContext(it) {
    const schId = it.schema[it.opts.schemaId];
    if (schId) it.baseId = (0, resolve_1.resolveUrl)(it.opts.uriResolver, it.baseId, schId);
}
function checkAsyncSchema(it) {
    if (it.schema.$async && !it.schemaEnv.$async) throw new Error("async schema in sync schema");
}
function commentKeyword({ gen, schemaEnv, schema, errSchemaPath, opts }) {
    const msg = schema.$comment;
    if (opts.$comment === true) gen.code((0, codegen_1._)`${names_1.default.self}.logger.log(${msg})`);
    else if (typeof opts.$comment == "function") {
        const schemaPath = (0, codegen_1.str)`${errSchemaPath}/$comment`;
        const rootName = gen.scopeValue("root", {
            ref: schemaEnv.root
        });
        gen.code((0, codegen_1._)`${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);
    }
}
function returnResults(it) {
    const { gen, schemaEnv, validateName, ValidationError, opts } = it;
    if (schemaEnv.$async) // TODO assign unevaluated
    gen.if((0, codegen_1._)`${names_1.default.errors} === 0`, ()=>gen.return(names_1.default.data), ()=>gen.throw((0, codegen_1._)`new ${ValidationError}(${names_1.default.vErrors})`));
    else {
        gen.assign((0, codegen_1._)`${validateName}.errors`, names_1.default.vErrors);
        if (opts.unevaluated) assignEvaluated(it);
        gen.return((0, codegen_1._)`${names_1.default.errors} === 0`);
    }
}
function assignEvaluated({ gen, evaluated, props, items }) {
    if (props instanceof codegen_1.Name) gen.assign((0, codegen_1._)`${evaluated}.props`, props);
    if (items instanceof codegen_1.Name) gen.assign((0, codegen_1._)`${evaluated}.items`, items);
}
function schemaKeywords(it, types, typeErrors, errsCount) {
    const { gen, schema, data, allErrors, opts, self } = it;
    const { RULES } = self;
    if (schema.$ref && (opts.ignoreKeywordsWithRef || !(0, util_1.schemaHasRulesButRef)(schema, RULES))) {
        gen.block(()=>keywordCode(it, "$ref", RULES.all.$ref.definition)); // TODO typecast
        return;
    }
    if (!opts.jtd) checkStrictTypes(it, types);
    gen.block(()=>{
        for (const group of RULES.rules)groupKeywords(group);
        groupKeywords(RULES.post);
    });
    function groupKeywords(group) {
        if (!(0, applicability_1.shouldUseGroup)(schema, group)) return;
        if (group.type) {
            gen.if((0, dataType_2.checkDataType)(group.type, data, opts.strictNumbers));
            iterateKeywords(it, group);
            if (types.length === 1 && types[0] === group.type && typeErrors) {
                gen.else();
                (0, dataType_2.reportTypeError)(it);
            }
            gen.endIf();
        } else iterateKeywords(it, group);
        // TODO make it "ok" call?
        if (!allErrors) gen.if((0, codegen_1._)`${names_1.default.errors} === ${errsCount || 0}`);
    }
}
function iterateKeywords(it, group) {
    const { gen, schema, opts: { useDefaults } } = it;
    if (useDefaults) (0, defaults_1.assignDefaults)(it, group.type);
    gen.block(()=>{
        for (const rule of group.rules)if ((0, applicability_1.shouldUseRule)(schema, rule)) keywordCode(it, rule.keyword, rule.definition, group.type);
    });
}
function checkStrictTypes(it, types) {
    if (it.schemaEnv.meta || !it.opts.strictTypes) return;
    checkContextTypes(it, types);
    if (!it.opts.allowUnionTypes) checkMultipleTypes(it, types);
    checkKeywordTypes(it, it.dataTypes);
}
function checkContextTypes(it, types) {
    if (!types.length) return;
    if (!it.dataTypes.length) {
        it.dataTypes = types;
        return;
    }
    types.forEach((t)=>{
        if (!includesType(it.dataTypes, t)) strictTypesError(it, `type "${t}" not allowed by context "${it.dataTypes.join(",")}"`);
    });
    narrowSchemaTypes(it, types);
}
function checkMultipleTypes(it, ts) {
    if (ts.length > 1 && !(ts.length === 2 && ts.includes("null"))) strictTypesError(it, "use allowUnionTypes to allow union type keyword");
}
function checkKeywordTypes(it, ts) {
    const rules = it.self.RULES.all;
    for(const keyword in rules){
        const rule = rules[keyword];
        if (typeof rule == "object" && (0, applicability_1.shouldUseRule)(it.schema, rule)) {
            const { type } = rule.definition;
            if (type.length && !type.some((t)=>hasApplicableType(ts, t))) strictTypesError(it, `missing type "${type.join(",")}" for keyword "${keyword}"`);
        }
    }
}
function hasApplicableType(schTs, kwdT) {
    return schTs.includes(kwdT) || kwdT === "number" && schTs.includes("integer");
}
function includesType(ts, t) {
    return ts.includes(t) || t === "integer" && ts.includes("number");
}
function narrowSchemaTypes(it, withTypes) {
    const ts = [];
    for (const t of it.dataTypes){
        if (includesType(withTypes, t)) ts.push(t);
        else if (withTypes.includes("integer") && t === "number") ts.push("integer");
    }
    it.dataTypes = ts;
}
function strictTypesError(it, msg) {
    const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
    msg += ` at "${schemaPath}" (strictTypes)`;
    (0, util_1.checkStrictMode)(it, msg, it.opts.strictTypes);
}
class KeywordCxt {
    constructor(it, def, keyword){
        (0, keyword_1.validateKeywordUsage)(it, def, keyword);
        this.gen = it.gen;
        this.allErrors = it.allErrors;
        this.keyword = keyword;
        this.data = it.data;
        this.schema = it.schema[keyword];
        this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;
        this.schemaValue = (0, util_1.schemaRefOrVal)(it, this.schema, keyword, this.$data);
        this.schemaType = def.schemaType;
        this.parentSchema = it.schema;
        this.params = {};
        this.it = it;
        this.def = def;
        if (this.$data) this.schemaCode = it.gen.const("vSchema", getData(this.$data, it));
        else {
            this.schemaCode = this.schemaValue;
            if (!(0, keyword_1.validSchemaType)(this.schema, def.schemaType, def.allowUndefined)) throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);
        }
        if ("code" in def ? def.trackErrors : def.errors !== false) this.errsCount = it.gen.const("_errs", names_1.default.errors);
    }
    result(condition, successAction, failAction) {
        this.failResult((0, codegen_1.not)(condition), successAction, failAction);
    }
    failResult(condition, successAction, failAction) {
        this.gen.if(condition);
        if (failAction) failAction();
        else this.error();
        if (successAction) {
            this.gen.else();
            successAction();
            if (this.allErrors) this.gen.endIf();
        } else if (this.allErrors) this.gen.endIf();
        else this.gen.else();
    }
    pass(condition, failAction) {
        this.failResult((0, codegen_1.not)(condition), undefined, failAction);
    }
    fail(condition) {
        if (condition === undefined) {
            this.error();
            if (!this.allErrors) this.gen.if(false); // this branch will be removed by gen.optimize
            return;
        }
        this.gen.if(condition);
        this.error();
        if (this.allErrors) this.gen.endIf();
        else this.gen.else();
    }
    fail$data(condition) {
        if (!this.$data) return this.fail(condition);
        const { schemaCode } = this;
        this.fail((0, codegen_1._)`${schemaCode} !== undefined && (${(0, codegen_1.or)(this.invalid$data(), condition)})`);
    }
    error(append, errorParams, errorPaths) {
        if (errorParams) {
            this.setParams(errorParams);
            this._error(append, errorPaths);
            this.setParams({});
            return;
        }
        this._error(append, errorPaths);
    }
    _error(append, errorPaths) {
        (append ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error, errorPaths);
    }
    $dataError() {
        (0, errors_1.reportError)(this, this.def.$dataError || errors_1.keyword$DataError);
    }
    reset() {
        if (this.errsCount === undefined) throw new Error('add "trackErrors" to keyword definition');
        (0, errors_1.resetErrorsCount)(this.gen, this.errsCount);
    }
    ok(cond) {
        if (!this.allErrors) this.gen.if(cond);
    }
    setParams(obj, assign) {
        if (assign) Object.assign(this.params, obj);
        else this.params = obj;
    }
    block$data(valid, codeBlock, $dataValid = codegen_1.nil) {
        this.gen.block(()=>{
            this.check$data(valid, $dataValid);
            codeBlock();
        });
    }
    check$data(valid = codegen_1.nil, $dataValid = codegen_1.nil) {
        if (!this.$data) return;
        const { gen, schemaCode, schemaType, def } = this;
        gen.if((0, codegen_1.or)((0, codegen_1._)`${schemaCode} === undefined`, $dataValid));
        if (valid !== codegen_1.nil) gen.assign(valid, true);
        if (schemaType.length || def.validateSchema) {
            gen.elseIf(this.invalid$data());
            this.$dataError();
            if (valid !== codegen_1.nil) gen.assign(valid, false);
        }
        gen.else();
    }
    invalid$data() {
        const { gen, schemaCode, schemaType, def, it } = this;
        return (0, codegen_1.or)(wrong$DataType(), invalid$DataSchema());
        function wrong$DataType() {
            if (schemaType.length) {
                /* istanbul ignore if */ if (!(schemaCode instanceof codegen_1.Name)) throw new Error("ajv implementation error");
                const st = Array.isArray(schemaType) ? schemaType : [
                    schemaType
                ];
                return (0, codegen_1._)`${(0, dataType_2.checkDataTypes)(st, schemaCode, it.opts.strictNumbers, dataType_2.DataType.Wrong)}`;
            }
            return codegen_1.nil;
        }
        function invalid$DataSchema() {
            if (def.validateSchema) {
                const validateSchemaRef = gen.scopeValue("validate$data", {
                    ref: def.validateSchema
                }); // TODO value.code for standalone
                return (0, codegen_1._)`!${validateSchemaRef}(${schemaCode})`;
            }
            return codegen_1.nil;
        }
    }
    subschema(appl, valid) {
        const subschema = (0, subschema_1.getSubschema)(this.it, appl);
        (0, subschema_1.extendSubschemaData)(subschema, this.it, appl);
        (0, subschema_1.extendSubschemaMode)(subschema, appl);
        const nextContext = {
            ...this.it,
            ...subschema,
            items: undefined,
            props: undefined
        };
        subschemaCode(nextContext, valid);
        return nextContext;
    }
    mergeEvaluated(schemaCxt, toName) {
        const { it, gen } = this;
        if (!it.opts.unevaluated) return;
        if (it.props !== true && schemaCxt.props !== undefined) it.props = util_1.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);
        if (it.items !== true && schemaCxt.items !== undefined) it.items = util_1.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);
    }
    mergeValidEvaluated(schemaCxt, valid) {
        const { it, gen } = this;
        if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {
            gen.if(valid, ()=>this.mergeEvaluated(schemaCxt, codegen_1.Name));
            return true;
        }
    }
}
exports.KeywordCxt = KeywordCxt;
function keywordCode(it, keyword, def, ruleType) {
    const cxt = new KeywordCxt(it, def, keyword);
    if ("code" in def) def.code(cxt, ruleType);
    else if (cxt.$data && def.validate) (0, keyword_1.funcKeywordCode)(cxt, def);
    else if ("macro" in def) (0, keyword_1.macroKeywordCode)(cxt, def);
    else if (def.compile || def.validate) (0, keyword_1.funcKeywordCode)(cxt, def);
}
const JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
const RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
function getData($data, { dataLevel, dataNames, dataPathArr }) {
    let jsonPointer;
    let data;
    if ($data === "") return names_1.default.rootData;
    if ($data[0] === "/") {
        if (!JSON_POINTER.test($data)) throw new Error(`Invalid JSON-pointer: ${$data}`);
        jsonPointer = $data;
        data = names_1.default.rootData;
    } else {
        const matches = RELATIVE_JSON_POINTER.exec($data);
        if (!matches) throw new Error(`Invalid JSON-pointer: ${$data}`);
        const up = +matches[1];
        jsonPointer = matches[2];
        if (jsonPointer === "#") {
            if (up >= dataLevel) throw new Error(errorMsg("property/index", up));
            return dataPathArr[dataLevel - up];
        }
        if (up > dataLevel) throw new Error(errorMsg("data", up));
        data = dataNames[dataLevel - up];
        if (!jsonPointer) return data;
    }
    let expr = data;
    const segments = jsonPointer.split("/");
    for (const segment of segments)if (segment) {
        data = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)((0, util_1.unescapeJsonPointer)(segment))}`;
        expr = (0, codegen_1._)`${expr} && ${data}`;
    }
    return expr;
    function errorMsg(pointerType, up) {
        return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;
    }
}
exports.getData = getData;

},{"1872624698c52350":"6ubH1","30e941be85fe7fe1":"iSvmi","4efae0989d707fc9":"c7b8J","59b5b06ee813874":"ijhNQ","833ade6d8e5d7ac7":"aRSM4","721d23bc0d70f9c5":"izDHS","dd369f53d36c1331":"9wlmn","3b360641a0a45156":"jxdzO","c00dd44166cd9602":"7lpjd","b5aac0cdec5ecfd":"7vNtM","eda806e054ff0f41":"kJxry"}],"6ubH1":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.boolOrEmptySchema = exports.topBoolOrEmptySchema = void 0;
const errors_1 = require("7ae78570b5c98751");
const codegen_1 = require("382afaf0f5449a0b");
const names_1 = require("b14bdfeaa9e2911c");
const boolError = {
    message: "boolean schema is false"
};
function topBoolOrEmptySchema(it) {
    const { gen, schema, validateName } = it;
    if (schema === false) falseSchemaError(it, false);
    else if (typeof schema == "object" && schema.$async === true) gen.return(names_1.default.data);
    else {
        gen.assign((0, codegen_1._)`${validateName}.errors`, null);
        gen.return(true);
    }
}
exports.topBoolOrEmptySchema = topBoolOrEmptySchema;
function boolOrEmptySchema(it, valid) {
    const { gen, schema } = it;
    if (schema === false) {
        gen.var(valid, false); // TODO var
        falseSchemaError(it);
    } else gen.var(valid, true); // TODO var
}
exports.boolOrEmptySchema = boolOrEmptySchema;
function falseSchemaError(it, overrideAllErrors) {
    const { gen, data } = it;
    // TODO maybe some other interface should be used for non-keyword validation errors...
    const cxt = {
        gen,
        keyword: "false schema",
        data,
        schema: false,
        schemaCode: false,
        schemaValue: false,
        params: {},
        it
    };
    (0, errors_1.reportError)(cxt, boolError, undefined, overrideAllErrors);
}

},{"7ae78570b5c98751":"kJxry","382afaf0f5449a0b":"9wlmn","b14bdfeaa9e2911c":"jxdzO"}],"kJxry":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;
const codegen_1 = require("b0db63a8d522181c");
const util_1 = require("2ba06fec19fee9a0");
const names_1 = require("e68108f0fa66567d");
exports.keywordError = {
    message: ({ keyword })=>(0, codegen_1.str)`must pass "${keyword}" keyword validation`
};
exports.keyword$DataError = {
    message: ({ keyword, schemaType })=>schemaType ? (0, codegen_1.str)`"${keyword}" keyword must be ${schemaType} ($data)` : (0, codegen_1.str)`"${keyword}" keyword is invalid ($data)`
};
function reportError(cxt, error = exports.keywordError, errorPaths, overrideAllErrors) {
    const { it } = cxt;
    const { gen, compositeRule, allErrors } = it;
    const errObj = errorObjectCode(cxt, error, errorPaths);
    if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : compositeRule || allErrors) addError(gen, errObj);
    else returnErrors(it, (0, codegen_1._)`[${errObj}]`);
}
exports.reportError = reportError;
function reportExtraError(cxt, error = exports.keywordError, errorPaths) {
    const { it } = cxt;
    const { gen, compositeRule, allErrors } = it;
    const errObj = errorObjectCode(cxt, error, errorPaths);
    addError(gen, errObj);
    if (!(compositeRule || allErrors)) returnErrors(it, names_1.default.vErrors);
}
exports.reportExtraError = reportExtraError;
function resetErrorsCount(gen, errsCount) {
    gen.assign(names_1.default.errors, errsCount);
    gen.if((0, codegen_1._)`${names_1.default.vErrors} !== null`, ()=>gen.if(errsCount, ()=>gen.assign((0, codegen_1._)`${names_1.default.vErrors}.length`, errsCount), ()=>gen.assign(names_1.default.vErrors, null)));
}
exports.resetErrorsCount = resetErrorsCount;
function extendErrors({ gen, keyword, schemaValue, data, errsCount, it }) {
    /* istanbul ignore if */ if (errsCount === undefined) throw new Error("ajv implementation error");
    const err = gen.name("err");
    gen.forRange("i", errsCount, names_1.default.errors, (i)=>{
        gen.const(err, (0, codegen_1._)`${names_1.default.vErrors}[${i}]`);
        gen.if((0, codegen_1._)`${err}.instancePath === undefined`, ()=>gen.assign((0, codegen_1._)`${err}.instancePath`, (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));
        gen.assign((0, codegen_1._)`${err}.schemaPath`, (0, codegen_1.str)`${it.errSchemaPath}/${keyword}`);
        if (it.opts.verbose) {
            gen.assign((0, codegen_1._)`${err}.schema`, schemaValue);
            gen.assign((0, codegen_1._)`${err}.data`, data);
        }
    });
}
exports.extendErrors = extendErrors;
function addError(gen, errObj) {
    const err = gen.const("err", errObj);
    gen.if((0, codegen_1._)`${names_1.default.vErrors} === null`, ()=>gen.assign(names_1.default.vErrors, (0, codegen_1._)`[${err}]`), (0, codegen_1._)`${names_1.default.vErrors}.push(${err})`);
    gen.code((0, codegen_1._)`${names_1.default.errors}++`);
}
function returnErrors(it, errs) {
    const { gen, validateName, schemaEnv } = it;
    if (schemaEnv.$async) gen.throw((0, codegen_1._)`new ${it.ValidationError}(${errs})`);
    else {
        gen.assign((0, codegen_1._)`${validateName}.errors`, errs);
        gen.return(false);
    }
}
const E = {
    keyword: new codegen_1.Name("keyword"),
    schemaPath: new codegen_1.Name("schemaPath"),
    params: new codegen_1.Name("params"),
    propertyName: new codegen_1.Name("propertyName"),
    message: new codegen_1.Name("message"),
    schema: new codegen_1.Name("schema"),
    parentSchema: new codegen_1.Name("parentSchema")
};
function errorObjectCode(cxt, error, errorPaths) {
    const { createErrors } = cxt.it;
    if (createErrors === false) return (0, codegen_1._)`{}`;
    return errorObject(cxt, error, errorPaths);
}
function errorObject(cxt, error, errorPaths = {}) {
    const { gen, it } = cxt;
    const keyValues = [
        errorInstancePath(it, errorPaths),
        errorSchemaPath(cxt, errorPaths)
    ];
    extraErrorProps(cxt, error, keyValues);
    return gen.object(...keyValues);
}
function errorInstancePath({ errorPath }, { instancePath }) {
    const instPath = instancePath ? (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(instancePath, util_1.Type.Str)}` : errorPath;
    return [
        names_1.default.instancePath,
        (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)
    ];
}
function errorSchemaPath({ keyword, it: { errSchemaPath } }, { schemaPath, parentSchema }) {
    let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str)`${errSchemaPath}/${keyword}`;
    if (schemaPath) schPath = (0, codegen_1.str)`${schPath}${(0, util_1.getErrorPath)(schemaPath, util_1.Type.Str)}`;
    return [
        E.schemaPath,
        schPath
    ];
}
function extraErrorProps(cxt, { params, message }, keyValues) {
    const { keyword, data, schemaValue, it } = cxt;
    const { opts, propertyName, topSchemaRef, schemaPath } = it;
    keyValues.push([
        E.keyword,
        keyword
    ], [
        E.params,
        typeof params == "function" ? params(cxt) : params || (0, codegen_1._)`{}`
    ]);
    if (opts.messages) keyValues.push([
        E.message,
        typeof message == "function" ? message(cxt) : message
    ]);
    if (opts.verbose) keyValues.push([
        E.schema,
        schemaValue
    ], [
        E.parentSchema,
        (0, codegen_1._)`${topSchemaRef}${schemaPath}`
    ], [
        names_1.default.data,
        data
    ]);
    if (propertyName) keyValues.push([
        E.propertyName,
        propertyName
    ]);
}

},{"b0db63a8d522181c":"9wlmn","2ba06fec19fee9a0":"7vNtM","e68108f0fa66567d":"jxdzO"}],"9wlmn":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;
const code_1 = require("3a923f104f0d1cf0");
const scope_1 = require("f2814f3db5f7131a");
var code_2 = require("3a923f104f0d1cf0");
Object.defineProperty(exports, "_", {
    enumerable: true,
    get: function() {
        return code_2._;
    }
});
Object.defineProperty(exports, "str", {
    enumerable: true,
    get: function() {
        return code_2.str;
    }
});
Object.defineProperty(exports, "strConcat", {
    enumerable: true,
    get: function() {
        return code_2.strConcat;
    }
});
Object.defineProperty(exports, "nil", {
    enumerable: true,
    get: function() {
        return code_2.nil;
    }
});
Object.defineProperty(exports, "getProperty", {
    enumerable: true,
    get: function() {
        return code_2.getProperty;
    }
});
Object.defineProperty(exports, "stringify", {
    enumerable: true,
    get: function() {
        return code_2.stringify;
    }
});
Object.defineProperty(exports, "regexpCode", {
    enumerable: true,
    get: function() {
        return code_2.regexpCode;
    }
});
Object.defineProperty(exports, "Name", {
    enumerable: true,
    get: function() {
        return code_2.Name;
    }
});
var scope_2 = require("f2814f3db5f7131a");
Object.defineProperty(exports, "Scope", {
    enumerable: true,
    get: function() {
        return scope_2.Scope;
    }
});
Object.defineProperty(exports, "ValueScope", {
    enumerable: true,
    get: function() {
        return scope_2.ValueScope;
    }
});
Object.defineProperty(exports, "ValueScopeName", {
    enumerable: true,
    get: function() {
        return scope_2.ValueScopeName;
    }
});
Object.defineProperty(exports, "varKinds", {
    enumerable: true,
    get: function() {
        return scope_2.varKinds;
    }
});
exports.operators = {
    GT: new code_1._Code(">"),
    GTE: new code_1._Code(">="),
    LT: new code_1._Code("<"),
    LTE: new code_1._Code("<="),
    EQ: new code_1._Code("==="),
    NEQ: new code_1._Code("!=="),
    NOT: new code_1._Code("!"),
    OR: new code_1._Code("||"),
    AND: new code_1._Code("&&"),
    ADD: new code_1._Code("+")
};
class Node {
    optimizeNodes() {
        return this;
    }
    optimizeNames(_names, _constants) {
        return this;
    }
}
class Def extends Node {
    constructor(varKind, name, rhs){
        super();
        this.varKind = varKind;
        this.name = name;
        this.rhs = rhs;
    }
    render({ es5, _n }) {
        const varKind = es5 ? scope_1.varKinds.var : this.varKind;
        const rhs = this.rhs === undefined ? "" : ` = ${this.rhs}`;
        return `${varKind} ${this.name}${rhs};` + _n;
    }
    optimizeNames(names, constants) {
        if (!names[this.name.str]) return;
        if (this.rhs) this.rhs = optimizeExpr(this.rhs, names, constants);
        return this;
    }
    get names() {
        return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
    }
}
class Assign extends Node {
    constructor(lhs, rhs, sideEffects){
        super();
        this.lhs = lhs;
        this.rhs = rhs;
        this.sideEffects = sideEffects;
    }
    render({ _n }) {
        return `${this.lhs} = ${this.rhs};` + _n;
    }
    optimizeNames(names, constants) {
        if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects) return;
        this.rhs = optimizeExpr(this.rhs, names, constants);
        return this;
    }
    get names() {
        const names = this.lhs instanceof code_1.Name ? {} : {
            ...this.lhs.names
        };
        return addExprNames(names, this.rhs);
    }
}
class AssignOp extends Assign {
    constructor(lhs, op, rhs, sideEffects){
        super(lhs, rhs, sideEffects);
        this.op = op;
    }
    render({ _n }) {
        return `${this.lhs} ${this.op}= ${this.rhs};` + _n;
    }
}
class Label extends Node {
    constructor(label){
        super();
        this.label = label;
        this.names = {};
    }
    render({ _n }) {
        return `${this.label}:` + _n;
    }
}
class Break extends Node {
    constructor(label){
        super();
        this.label = label;
        this.names = {};
    }
    render({ _n }) {
        const label = this.label ? ` ${this.label}` : "";
        return `break${label};` + _n;
    }
}
class Throw extends Node {
    constructor(error){
        super();
        this.error = error;
    }
    render({ _n }) {
        return `throw ${this.error};` + _n;
    }
    get names() {
        return this.error.names;
    }
}
class AnyCode extends Node {
    constructor(code){
        super();
        this.code = code;
    }
    render({ _n }) {
        return `${this.code};` + _n;
    }
    optimizeNodes() {
        return `${this.code}` ? this : undefined;
    }
    optimizeNames(names, constants) {
        this.code = optimizeExpr(this.code, names, constants);
        return this;
    }
    get names() {
        return this.code instanceof code_1._CodeOrName ? this.code.names : {};
    }
}
class ParentNode extends Node {
    constructor(nodes = []){
        super();
        this.nodes = nodes;
    }
    render(opts) {
        return this.nodes.reduce((code, n)=>code + n.render(opts), "");
    }
    optimizeNodes() {
        const { nodes } = this;
        let i = nodes.length;
        while(i--){
            const n = nodes[i].optimizeNodes();
            if (Array.isArray(n)) nodes.splice(i, 1, ...n);
            else if (n) nodes[i] = n;
            else nodes.splice(i, 1);
        }
        return nodes.length > 0 ? this : undefined;
    }
    optimizeNames(names, constants) {
        const { nodes } = this;
        let i = nodes.length;
        while(i--){
            // iterating backwards improves 1-pass optimization
            const n = nodes[i];
            if (n.optimizeNames(names, constants)) continue;
            subtractNames(names, n.names);
            nodes.splice(i, 1);
        }
        return nodes.length > 0 ? this : undefined;
    }
    get names() {
        return this.nodes.reduce((names, n)=>addNames(names, n.names), {});
    }
}
class BlockNode extends ParentNode {
    render(opts) {
        return "{" + opts._n + super.render(opts) + "}" + opts._n;
    }
}
class Root extends ParentNode {
}
class Else extends BlockNode {
}
Else.kind = "else";
class If extends BlockNode {
    constructor(condition, nodes){
        super(nodes);
        this.condition = condition;
    }
    render(opts) {
        let code = `if(${this.condition})` + super.render(opts);
        if (this.else) code += "else " + this.else.render(opts);
        return code;
    }
    optimizeNodes() {
        super.optimizeNodes();
        const cond = this.condition;
        if (cond === true) return this.nodes; // else is ignored here
        let e = this.else;
        if (e) {
            const ns = e.optimizeNodes();
            e = this.else = Array.isArray(ns) ? new Else(ns) : ns;
        }
        if (e) {
            if (cond === false) return e instanceof If ? e : e.nodes;
            if (this.nodes.length) return this;
            return new If(not(cond), e instanceof If ? [
                e
            ] : e.nodes);
        }
        if (cond === false || !this.nodes.length) return undefined;
        return this;
    }
    optimizeNames(names, constants) {
        var _a;
        this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
        if (!(super.optimizeNames(names, constants) || this.else)) return;
        this.condition = optimizeExpr(this.condition, names, constants);
        return this;
    }
    get names() {
        const names = super.names;
        addExprNames(names, this.condition);
        if (this.else) addNames(names, this.else.names);
        return names;
    }
}
If.kind = "if";
class For extends BlockNode {
}
For.kind = "for";
class ForLoop extends For {
    constructor(iteration){
        super();
        this.iteration = iteration;
    }
    render(opts) {
        return `for(${this.iteration})` + super.render(opts);
    }
    optimizeNames(names, constants) {
        if (!super.optimizeNames(names, constants)) return;
        this.iteration = optimizeExpr(this.iteration, names, constants);
        return this;
    }
    get names() {
        return addNames(super.names, this.iteration.names);
    }
}
class ForRange extends For {
    constructor(varKind, name, from, to){
        super();
        this.varKind = varKind;
        this.name = name;
        this.from = from;
        this.to = to;
    }
    render(opts) {
        const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;
        const { name, from, to } = this;
        return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);
    }
    get names() {
        const names = addExprNames(super.names, this.from);
        return addExprNames(names, this.to);
    }
}
class ForIter extends For {
    constructor(loop, varKind, name, iterable){
        super();
        this.loop = loop;
        this.varKind = varKind;
        this.name = name;
        this.iterable = iterable;
    }
    render(opts) {
        return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);
    }
    optimizeNames(names, constants) {
        if (!super.optimizeNames(names, constants)) return;
        this.iterable = optimizeExpr(this.iterable, names, constants);
        return this;
    }
    get names() {
        return addNames(super.names, this.iterable.names);
    }
}
class Func extends BlockNode {
    constructor(name, args, async){
        super();
        this.name = name;
        this.args = args;
        this.async = async;
    }
    render(opts) {
        const _async = this.async ? "async " : "";
        return `${_async}function ${this.name}(${this.args})` + super.render(opts);
    }
}
Func.kind = "func";
class Return extends ParentNode {
    render(opts) {
        return "return " + super.render(opts);
    }
}
Return.kind = "return";
class Try extends BlockNode {
    render(opts) {
        let code = "try" + super.render(opts);
        if (this.catch) code += this.catch.render(opts);
        if (this.finally) code += this.finally.render(opts);
        return code;
    }
    optimizeNodes() {
        var _a, _b;
        super.optimizeNodes();
        (_a = this.catch) === null || _a === void 0 || _a.optimizeNodes();
        (_b = this.finally) === null || _b === void 0 || _b.optimizeNodes();
        return this;
    }
    optimizeNames(names, constants) {
        var _a, _b;
        super.optimizeNames(names, constants);
        (_a = this.catch) === null || _a === void 0 || _a.optimizeNames(names, constants);
        (_b = this.finally) === null || _b === void 0 || _b.optimizeNames(names, constants);
        return this;
    }
    get names() {
        const names = super.names;
        if (this.catch) addNames(names, this.catch.names);
        if (this.finally) addNames(names, this.finally.names);
        return names;
    }
}
class Catch extends BlockNode {
    constructor(error){
        super();
        this.error = error;
    }
    render(opts) {
        return `catch(${this.error})` + super.render(opts);
    }
}
Catch.kind = "catch";
class Finally extends BlockNode {
    render(opts) {
        return "finally" + super.render(opts);
    }
}
Finally.kind = "finally";
class CodeGen {
    constructor(extScope, opts = {}){
        this._values = {};
        this._blockStarts = [];
        this._constants = {};
        this.opts = {
            ...opts,
            _n: opts.lines ? "\n" : ""
        };
        this._extScope = extScope;
        this._scope = new scope_1.Scope({
            parent: extScope
        });
        this._nodes = [
            new Root()
        ];
    }
    toString() {
        return this._root.render(this.opts);
    }
    // returns unique name in the internal scope
    name(prefix) {
        return this._scope.name(prefix);
    }
    // reserves unique name in the external scope
    scopeName(prefix) {
        return this._extScope.name(prefix);
    }
    // reserves unique name in the external scope and assigns value to it
    scopeValue(prefixOrName, value) {
        const name = this._extScope.value(prefixOrName, value);
        const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());
        vs.add(name);
        return name;
    }
    getScopeValue(prefix, keyOrRef) {
        return this._extScope.getValue(prefix, keyOrRef);
    }
    // return code that assigns values in the external scope to the names that are used internally
    // (same names that were returned by gen.scopeName or gen.scopeValue)
    scopeRefs(scopeName) {
        return this._extScope.scopeRefs(scopeName, this._values);
    }
    scopeCode() {
        return this._extScope.scopeCode(this._values);
    }
    _def(varKind, nameOrPrefix, rhs, constant) {
        const name = this._scope.toName(nameOrPrefix);
        if (rhs !== undefined && constant) this._constants[name.str] = rhs;
        this._leafNode(new Def(varKind, name, rhs));
        return name;
    }
    // `const` declaration (`var` in es5 mode)
    const(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);
    }
    // `let` declaration with optional assignment (`var` in es5 mode)
    let(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);
    }
    // `var` declaration with optional assignment
    var(nameOrPrefix, rhs, _constant) {
        return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);
    }
    // assignment code
    assign(lhs, rhs, sideEffects) {
        return this._leafNode(new Assign(lhs, rhs, sideEffects));
    }
    // `+=` code
    add(lhs, rhs) {
        return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));
    }
    // appends passed SafeExpr to code or executes Block
    code(c) {
        if (typeof c == "function") c();
        else if (c !== code_1.nil) this._leafNode(new AnyCode(c));
        return this;
    }
    // returns code for object literal for the passed argument list of key-value pairs
    object(...keyValues) {
        const code = [
            "{"
        ];
        for (const [key, value] of keyValues){
            if (code.length > 1) code.push(",");
            code.push(key);
            if (key !== value || this.opts.es5) {
                code.push(":");
                (0, code_1.addCodeArg)(code, value);
            }
        }
        code.push("}");
        return new code_1._Code(code);
    }
    // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)
    if(condition, thenBody, elseBody) {
        this._blockNode(new If(condition));
        if (thenBody && elseBody) this.code(thenBody).else().code(elseBody).endIf();
        else if (thenBody) this.code(thenBody).endIf();
        else if (elseBody) throw new Error('CodeGen: "else" body without "then" body');
        return this;
    }
    // `else if` clause - invalid without `if` or after `else` clauses
    elseIf(condition) {
        return this._elseNode(new If(condition));
    }
    // `else` clause - only valid after `if` or `else if` clauses
    else() {
        return this._elseNode(new Else());
    }
    // end `if` statement (needed if gen.if was used only with condition)
    endIf() {
        return this._endBlockNode(If, Else);
    }
    _for(node, forBody) {
        this._blockNode(node);
        if (forBody) this.code(forBody).endFor();
        return this;
    }
    // a generic `for` clause (or statement if `forBody` is passed)
    for(iteration, forBody) {
        return this._for(new ForLoop(iteration), forBody);
    }
    // `for` statement for a range of values
    forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {
        const name = this._scope.toName(nameOrPrefix);
        return this._for(new ForRange(varKind, name, from, to), ()=>forBody(name));
    }
    // `for-of` statement (in es5 mode replace with a normal for loop)
    forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {
        const name = this._scope.toName(nameOrPrefix);
        if (this.opts.es5) {
            const arr = iterable instanceof code_1.Name ? iterable : this.var("_arr", iterable);
            return this.forRange("_i", 0, (0, code_1._)`${arr}.length`, (i)=>{
                this.var(name, (0, code_1._)`${arr}[${i}]`);
                forBody(name);
            });
        }
        return this._for(new ForIter("of", varKind, name, iterable), ()=>forBody(name));
    }
    // `for-in` statement.
    // With option `ownProperties` replaced with a `for-of` loop for object keys
    forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {
        if (this.opts.ownProperties) return this.forOf(nameOrPrefix, (0, code_1._)`Object.keys(${obj})`, forBody);
        const name = this._scope.toName(nameOrPrefix);
        return this._for(new ForIter("in", varKind, name, obj), ()=>forBody(name));
    }
    // end `for` loop
    endFor() {
        return this._endBlockNode(For);
    }
    // `label` statement
    label(label) {
        return this._leafNode(new Label(label));
    }
    // `break` statement
    break(label) {
        return this._leafNode(new Break(label));
    }
    // `return` statement
    return(value) {
        const node = new Return();
        this._blockNode(node);
        this.code(value);
        if (node.nodes.length !== 1) throw new Error('CodeGen: "return" should have one node');
        return this._endBlockNode(Return);
    }
    // `try` statement
    try(tryBody, catchCode, finallyCode) {
        if (!catchCode && !finallyCode) throw new Error('CodeGen: "try" without "catch" and "finally"');
        const node = new Try();
        this._blockNode(node);
        this.code(tryBody);
        if (catchCode) {
            const error = this.name("e");
            this._currNode = node.catch = new Catch(error);
            catchCode(error);
        }
        if (finallyCode) {
            this._currNode = node.finally = new Finally();
            this.code(finallyCode);
        }
        return this._endBlockNode(Catch, Finally);
    }
    // `throw` statement
    throw(error) {
        return this._leafNode(new Throw(error));
    }
    // start self-balancing block
    block(body, nodeCount) {
        this._blockStarts.push(this._nodes.length);
        if (body) this.code(body).endBlock(nodeCount);
        return this;
    }
    // end the current self-balancing block
    endBlock(nodeCount) {
        const len = this._blockStarts.pop();
        if (len === undefined) throw new Error("CodeGen: not in self-balancing block");
        const toClose = this._nodes.length - len;
        if (toClose < 0 || nodeCount !== undefined && toClose !== nodeCount) throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);
        this._nodes.length = len;
        return this;
    }
    // `function` heading (or definition if funcBody is passed)
    func(name, args = code_1.nil, async, funcBody) {
        this._blockNode(new Func(name, args, async));
        if (funcBody) this.code(funcBody).endFunc();
        return this;
    }
    // end function definition
    endFunc() {
        return this._endBlockNode(Func);
    }
    optimize(n = 1) {
        while(n-- > 0){
            this._root.optimizeNodes();
            this._root.optimizeNames(this._root.names, this._constants);
        }
    }
    _leafNode(node) {
        this._currNode.nodes.push(node);
        return this;
    }
    _blockNode(node) {
        this._currNode.nodes.push(node);
        this._nodes.push(node);
    }
    _endBlockNode(N1, N2) {
        const n = this._currNode;
        if (n instanceof N1 || N2 && n instanceof N2) {
            this._nodes.pop();
            return this;
        }
        throw new Error(`CodeGen: not in block "${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}"`);
    }
    _elseNode(node) {
        const n = this._currNode;
        if (!(n instanceof If)) throw new Error('CodeGen: "else" without "if"');
        this._currNode = n.else = node;
        return this;
    }
    get _root() {
        return this._nodes[0];
    }
    get _currNode() {
        const ns = this._nodes;
        return ns[ns.length - 1];
    }
    set _currNode(node) {
        const ns = this._nodes;
        ns[ns.length - 1] = node;
    }
}
exports.CodeGen = CodeGen;
function addNames(names, from) {
    for(const n in from)names[n] = (names[n] || 0) + (from[n] || 0);
    return names;
}
function addExprNames(names, from) {
    return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;
}
function optimizeExpr(expr, names, constants) {
    if (expr instanceof code_1.Name) return replaceName(expr);
    if (!canOptimize(expr)) return expr;
    return new code_1._Code(expr._items.reduce((items, c)=>{
        if (c instanceof code_1.Name) c = replaceName(c);
        if (c instanceof code_1._Code) items.push(...c._items);
        else items.push(c);
        return items;
    }, []));
    function replaceName(n) {
        const c = constants[n.str];
        if (c === undefined || names[n.str] !== 1) return n;
        delete names[n.str];
        return c;
    }
    function canOptimize(e) {
        return e instanceof code_1._Code && e._items.some((c)=>c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined);
    }
}
function subtractNames(names, from) {
    for(const n in from)names[n] = (names[n] || 0) - (from[n] || 0);
}
function not(x) {
    return typeof x == "boolean" || typeof x == "number" || x === null ? !x : (0, code_1._)`!${par(x)}`;
}
exports.not = not;
const andCode = mappend(exports.operators.AND);
// boolean AND (&&) expression with the passed arguments
function and(...args) {
    return args.reduce(andCode);
}
exports.and = and;
const orCode = mappend(exports.operators.OR);
// boolean OR (||) expression with the passed arguments
function or(...args) {
    return args.reduce(orCode);
}
exports.or = or;
function mappend(op) {
    return (x, y)=>x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._)`${par(x)} ${op} ${par(y)}`;
}
function par(x) {
    return x instanceof code_1.Name ? x : (0, code_1._)`(${x})`;
}

},{"3a923f104f0d1cf0":"bhAts","f2814f3db5f7131a":"h4VQr"}],"bhAts":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.regexpCode = exports.getEsmExportName = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;
// eslint-disable-next-line @typescript-eslint/no-extraneous-class
class _CodeOrName {
}
exports._CodeOrName = _CodeOrName;
exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
class Name extends _CodeOrName {
    constructor(s){
        super();
        if (!exports.IDENTIFIER.test(s)) throw new Error("CodeGen: name must be a valid identifier");
        this.str = s;
    }
    toString() {
        return this.str;
    }
    emptyStr() {
        return false;
    }
    get names() {
        return {
            [this.str]: 1
        };
    }
}
exports.Name = Name;
class _Code extends _CodeOrName {
    constructor(code){
        super();
        this._items = typeof code === "string" ? [
            code
        ] : code;
    }
    toString() {
        return this.str;
    }
    emptyStr() {
        if (this._items.length > 1) return false;
        const item = this._items[0];
        return item === "" || item === '""';
    }
    get str() {
        var _a;
        return (_a = this._str) !== null && _a !== void 0 ? _a : this._str = this._items.reduce((s, c)=>`${s}${c}`, "");
    }
    get names() {
        var _a;
        return (_a = this._names) !== null && _a !== void 0 ? _a : this._names = this._items.reduce((names, c)=>{
            if (c instanceof Name) names[c.str] = (names[c.str] || 0) + 1;
            return names;
        }, {});
    }
}
exports._Code = _Code;
exports.nil = new _Code("");
function _(strs, ...args) {
    const code = [
        strs[0]
    ];
    let i = 0;
    while(i < args.length){
        addCodeArg(code, args[i]);
        code.push(strs[++i]);
    }
    return new _Code(code);
}
exports._ = _;
const plus = new _Code("+");
function str(strs, ...args) {
    const expr = [
        safeStringify(strs[0])
    ];
    let i = 0;
    while(i < args.length){
        expr.push(plus);
        addCodeArg(expr, args[i]);
        expr.push(plus, safeStringify(strs[++i]));
    }
    optimize(expr);
    return new _Code(expr);
}
exports.str = str;
function addCodeArg(code, arg) {
    if (arg instanceof _Code) code.push(...arg._items);
    else if (arg instanceof Name) code.push(arg);
    else code.push(interpolate(arg));
}
exports.addCodeArg = addCodeArg;
function optimize(expr) {
    let i = 1;
    while(i < expr.length - 1){
        if (expr[i] === plus) {
            const res = mergeExprItems(expr[i - 1], expr[i + 1]);
            if (res !== undefined) {
                expr.splice(i - 1, 3, res);
                continue;
            }
            expr[i++] = "+";
        }
        i++;
    }
}
function mergeExprItems(a, b) {
    if (b === '""') return a;
    if (a === '""') return b;
    if (typeof a == "string") {
        if (b instanceof Name || a[a.length - 1] !== '"') return;
        if (typeof b != "string") return `${a.slice(0, -1)}${b}"`;
        if (b[0] === '"') return a.slice(0, -1) + b.slice(1);
        return;
    }
    if (typeof b == "string" && b[0] === '"' && !(a instanceof Name)) return `"${a}${b.slice(1)}`;
    return;
}
function strConcat(c1, c2) {
    return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str`${c1}${c2}`;
}
exports.strConcat = strConcat;
// TODO do not allow arrays here
function interpolate(x) {
    return typeof x == "number" || typeof x == "boolean" || x === null ? x : safeStringify(Array.isArray(x) ? x.join(",") : x);
}
function stringify(x) {
    return new _Code(safeStringify(x));
}
exports.stringify = stringify;
function safeStringify(x) {
    return JSON.stringify(x).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
}
exports.safeStringify = safeStringify;
function getProperty(key) {
    return typeof key == "string" && exports.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _`[${key}]`;
}
exports.getProperty = getProperty;
//Does best effort to format the name properly
function getEsmExportName(key) {
    if (typeof key == "string" && exports.IDENTIFIER.test(key)) return new _Code(`${key}`);
    throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`);
}
exports.getEsmExportName = getEsmExportName;
function regexpCode(rx) {
    return new _Code(rx.toString());
}
exports.regexpCode = regexpCode;

},{}],"h4VQr":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;
const code_1 = require("fe3b9fbcf3b5938");
class ValueError extends Error {
    constructor(name){
        super(`CodeGen: "code" for ${name} not defined`);
        this.value = name.value;
    }
}
var UsedValueState;
(function(UsedValueState) {
    UsedValueState[UsedValueState["Started"] = 0] = "Started";
    UsedValueState[UsedValueState["Completed"] = 1] = "Completed";
})(UsedValueState || (exports.UsedValueState = UsedValueState = {}));
exports.varKinds = {
    const: new code_1.Name("const"),
    let: new code_1.Name("let"),
    var: new code_1.Name("var")
};
class Scope {
    constructor({ prefixes, parent } = {}){
        this._names = {};
        this._prefixes = prefixes;
        this._parent = parent;
    }
    toName(nameOrPrefix) {
        return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
    }
    name(prefix) {
        return new code_1.Name(this._newName(prefix));
    }
    _newName(prefix) {
        const ng = this._names[prefix] || this._nameGroup(prefix);
        return `${prefix}${ng.index++}`;
    }
    _nameGroup(prefix) {
        var _a, _b;
        if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || this._prefixes && !this._prefixes.has(prefix)) throw new Error(`CodeGen: prefix "${prefix}" is not allowed in this scope`);
        return this._names[prefix] = {
            prefix,
            index: 0
        };
    }
}
exports.Scope = Scope;
class ValueScopeName extends code_1.Name {
    constructor(prefix, nameStr){
        super(nameStr);
        this.prefix = prefix;
    }
    setValue(value, { property, itemIndex }) {
        this.value = value;
        this.scopePath = (0, code_1._)`.${new code_1.Name(property)}[${itemIndex}]`;
    }
}
exports.ValueScopeName = ValueScopeName;
const line = (0, code_1._)`\n`;
class ValueScope extends Scope {
    constructor(opts){
        super(opts);
        this._values = {};
        this._scope = opts.scope;
        this.opts = {
            ...opts,
            _n: opts.lines ? line : code_1.nil
        };
    }
    get() {
        return this._scope;
    }
    name(prefix) {
        return new ValueScopeName(prefix, this._newName(prefix));
    }
    value(nameOrPrefix, value) {
        var _a;
        if (value.ref === undefined) throw new Error("CodeGen: ref must be passed in value");
        const name = this.toName(nameOrPrefix);
        const { prefix } = name;
        const valueKey = (_a = value.key) !== null && _a !== void 0 ? _a : value.ref;
        let vs = this._values[prefix];
        if (vs) {
            const _name = vs.get(valueKey);
            if (_name) return _name;
        } else vs = this._values[prefix] = new Map();
        vs.set(valueKey, name);
        const s = this._scope[prefix] || (this._scope[prefix] = []);
        const itemIndex = s.length;
        s[itemIndex] = value.ref;
        name.setValue(value, {
            property: prefix,
            itemIndex
        });
        return name;
    }
    getValue(prefix, keyOrRef) {
        const vs = this._values[prefix];
        if (!vs) return;
        return vs.get(keyOrRef);
    }
    scopeRefs(scopeName, values = this._values) {
        return this._reduceValues(values, (name)=>{
            if (name.scopePath === undefined) throw new Error(`CodeGen: name "${name}" has no value`);
            return (0, code_1._)`${scopeName}${name.scopePath}`;
        });
    }
    scopeCode(values = this._values, usedValues, getCode) {
        return this._reduceValues(values, (name)=>{
            if (name.value === undefined) throw new Error(`CodeGen: name "${name}" has no value`);
            return name.value.code;
        }, usedValues, getCode);
    }
    _reduceValues(values, valueCode, usedValues = {}, getCode) {
        let code = code_1.nil;
        for(const prefix in values){
            const vs = values[prefix];
            if (!vs) continue;
            const nameSet = usedValues[prefix] = usedValues[prefix] || new Map();
            vs.forEach((name)=>{
                if (nameSet.has(name)) return;
                nameSet.set(name, UsedValueState.Started);
                let c = valueCode(name);
                if (c) {
                    const def = this.opts.es5 ? exports.varKinds.var : exports.varKinds.const;
                    code = (0, code_1._)`${code}${def} ${name} = ${c};${this.opts._n}`;
                } else if (c = getCode === null || getCode === void 0 ? void 0 : getCode(name)) code = (0, code_1._)`${code}${c}${this.opts._n}`;
                else throw new ValueError(name);
                nameSet.set(name, UsedValueState.Completed);
            });
        }
        return code;
    }
}
exports.ValueScope = ValueScope;

},{"fe3b9fbcf3b5938":"bhAts"}],"7vNtM":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.checkStrictMode = exports.getErrorPath = exports.Type = exports.useFunc = exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = void 0;
const codegen_1 = require("1fed95e2ef43e8be");
const code_1 = require("9f52dff5cd4050ce");
// TODO refactor to use Set
function toHash(arr) {
    const hash = {};
    for (const item of arr)hash[item] = true;
    return hash;
}
exports.toHash = toHash;
function alwaysValidSchema(it, schema) {
    if (typeof schema == "boolean") return schema;
    if (Object.keys(schema).length === 0) return true;
    checkUnknownRules(it, schema);
    return !schemaHasRules(schema, it.self.RULES.all);
}
exports.alwaysValidSchema = alwaysValidSchema;
function checkUnknownRules(it, schema = it.schema) {
    const { opts, self } = it;
    if (!opts.strictSchema) return;
    if (typeof schema === "boolean") return;
    const rules = self.RULES.keywords;
    for(const key in schema)if (!rules[key]) checkStrictMode(it, `unknown keyword: "${key}"`);
}
exports.checkUnknownRules = checkUnknownRules;
function schemaHasRules(schema, rules) {
    if (typeof schema == "boolean") return !schema;
    for(const key in schema)if (rules[key]) return true;
    return false;
}
exports.schemaHasRules = schemaHasRules;
function schemaHasRulesButRef(schema, RULES) {
    if (typeof schema == "boolean") return !schema;
    for(const key in schema)if (key !== "$ref" && RULES.all[key]) return true;
    return false;
}
exports.schemaHasRulesButRef = schemaHasRulesButRef;
function schemaRefOrVal({ topSchemaRef, schemaPath }, schema, keyword, $data) {
    if (!$data) {
        if (typeof schema == "number" || typeof schema == "boolean") return schema;
        if (typeof schema == "string") return (0, codegen_1._)`${schema}`;
    }
    return (0, codegen_1._)`${topSchemaRef}${schemaPath}${(0, codegen_1.getProperty)(keyword)}`;
}
exports.schemaRefOrVal = schemaRefOrVal;
function unescapeFragment(str) {
    return unescapeJsonPointer(decodeURIComponent(str));
}
exports.unescapeFragment = unescapeFragment;
function escapeFragment(str) {
    return encodeURIComponent(escapeJsonPointer(str));
}
exports.escapeFragment = escapeFragment;
function escapeJsonPointer(str) {
    if (typeof str == "number") return `${str}`;
    return str.replace(/~/g, "~0").replace(/\//g, "~1");
}
exports.escapeJsonPointer = escapeJsonPointer;
function unescapeJsonPointer(str) {
    return str.replace(/~1/g, "/").replace(/~0/g, "~");
}
exports.unescapeJsonPointer = unescapeJsonPointer;
function eachItem(xs, f) {
    if (Array.isArray(xs)) for (const x of xs)f(x);
    else f(xs);
}
exports.eachItem = eachItem;
function makeMergeEvaluated({ mergeNames, mergeToName, mergeValues, resultToName }) {
    return (gen, from, to, toName)=>{
        const res = to === undefined ? from : to instanceof codegen_1.Name ? (from instanceof codegen_1.Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to) : from instanceof codegen_1.Name ? (mergeToName(gen, to, from), from) : mergeValues(from, to);
        return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;
    };
}
exports.mergeEvaluated = {
    props: makeMergeEvaluated({
        mergeNames: (gen, from, to)=>gen.if((0, codegen_1._)`${to} !== true && ${from} !== undefined`, ()=>{
                gen.if((0, codegen_1._)`${from} === true`, ()=>gen.assign(to, true), ()=>gen.assign(to, (0, codegen_1._)`${to} || {}`).code((0, codegen_1._)`Object.assign(${to}, ${from})`));
            }),
        mergeToName: (gen, from, to)=>gen.if((0, codegen_1._)`${to} !== true`, ()=>{
                if (from === true) gen.assign(to, true);
                else {
                    gen.assign(to, (0, codegen_1._)`${to} || {}`);
                    setEvaluated(gen, to, from);
                }
            }),
        mergeValues: (from, to)=>from === true ? true : {
                ...from,
                ...to
            },
        resultToName: evaluatedPropsToName
    }),
    items: makeMergeEvaluated({
        mergeNames: (gen, from, to)=>gen.if((0, codegen_1._)`${to} !== true && ${from} !== undefined`, ()=>gen.assign(to, (0, codegen_1._)`${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)),
        mergeToName: (gen, from, to)=>gen.if((0, codegen_1._)`${to} !== true`, ()=>gen.assign(to, from === true ? true : (0, codegen_1._)`${to} > ${from} ? ${to} : ${from}`)),
        mergeValues: (from, to)=>from === true ? true : Math.max(from, to),
        resultToName: (gen, items)=>gen.var("items", items)
    })
};
function evaluatedPropsToName(gen, ps) {
    if (ps === true) return gen.var("props", true);
    const props = gen.var("props", (0, codegen_1._)`{}`);
    if (ps !== undefined) setEvaluated(gen, props, ps);
    return props;
}
exports.evaluatedPropsToName = evaluatedPropsToName;
function setEvaluated(gen, props, ps) {
    Object.keys(ps).forEach((p)=>gen.assign((0, codegen_1._)`${props}${(0, codegen_1.getProperty)(p)}`, true));
}
exports.setEvaluated = setEvaluated;
const snippets = {};
function useFunc(gen, f) {
    return gen.scopeValue("func", {
        ref: f,
        code: snippets[f.code] || (snippets[f.code] = new code_1._Code(f.code))
    });
}
exports.useFunc = useFunc;
var Type;
(function(Type) {
    Type[Type["Num"] = 0] = "Num";
    Type[Type["Str"] = 1] = "Str";
})(Type || (exports.Type = Type = {}));
function getErrorPath(dataProp, dataPropType, jsPropertySyntax) {
    // let path
    if (dataProp instanceof codegen_1.Name) {
        const isNumber = dataPropType === Type.Num;
        return jsPropertySyntax ? isNumber ? (0, codegen_1._)`"[" + ${dataProp} + "]"` : (0, codegen_1._)`"['" + ${dataProp} + "']"` : isNumber ? (0, codegen_1._)`"/" + ${dataProp}` : (0, codegen_1._)`"/" + ${dataProp}.replace(/~/g, "~0").replace(/\\//g, "~1")`; // TODO maybe use global escapePointer
    }
    return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : "/" + escapeJsonPointer(dataProp);
}
exports.getErrorPath = getErrorPath;
function checkStrictMode(it, msg, mode = it.opts.strictSchema) {
    if (!mode) return;
    msg = `strict mode: ${msg}`;
    if (mode === true) throw new Error(msg);
    it.self.logger.warn(msg);
}
exports.checkStrictMode = checkStrictMode;

},{"1fed95e2ef43e8be":"9wlmn","9f52dff5cd4050ce":"bhAts"}],"jxdzO":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const codegen_1 = require("39d82176e02d4399");
const names = {
    // validation function arguments
    data: new codegen_1.Name("data"),
    // args passed from referencing schema
    valCxt: new codegen_1.Name("valCxt"),
    instancePath: new codegen_1.Name("instancePath"),
    parentData: new codegen_1.Name("parentData"),
    parentDataProperty: new codegen_1.Name("parentDataProperty"),
    rootData: new codegen_1.Name("rootData"),
    dynamicAnchors: new codegen_1.Name("dynamicAnchors"),
    // function scoped variables
    vErrors: new codegen_1.Name("vErrors"),
    errors: new codegen_1.Name("errors"),
    this: new codegen_1.Name("this"),
    // "globals"
    self: new codegen_1.Name("self"),
    scope: new codegen_1.Name("scope"),
    // JTD serialize/parse name for JSON string and position
    json: new codegen_1.Name("json"),
    jsonPos: new codegen_1.Name("jsonPos"),
    jsonLen: new codegen_1.Name("jsonLen"),
    jsonPart: new codegen_1.Name("jsonPart")
};
exports.default = names;

},{"39d82176e02d4399":"9wlmn"}],"iSvmi":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;
const rules_1 = require("4089f5f8b045add0");
const applicability_1 = require("dd5ec382536e9238");
const errors_1 = require("88cdfb931f80e7b5");
const codegen_1 = require("3415e851a7f8c325");
const util_1 = require("7e9cd5ad0634b02b");
var DataType;
(function(DataType) {
    DataType[DataType["Correct"] = 0] = "Correct";
    DataType[DataType["Wrong"] = 1] = "Wrong";
})(DataType || (exports.DataType = DataType = {}));
function getSchemaTypes(schema) {
    const types = getJSONTypes(schema.type);
    const hasNull = types.includes("null");
    if (hasNull) {
        if (schema.nullable === false) throw new Error("type: null contradicts nullable: false");
    } else {
        if (!types.length && schema.nullable !== undefined) throw new Error('"nullable" cannot be used without "type"');
        if (schema.nullable === true) types.push("null");
    }
    return types;
}
exports.getSchemaTypes = getSchemaTypes;
// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents
function getJSONTypes(ts) {
    const types = Array.isArray(ts) ? ts : ts ? [
        ts
    ] : [];
    if (types.every(rules_1.isJSONType)) return types;
    throw new Error("type must be JSONType or JSONType[]: " + types.join(","));
}
exports.getJSONTypes = getJSONTypes;
function coerceAndCheckDataType(it, types) {
    const { gen, data, opts } = it;
    const coerceTo = coerceToTypes(types, opts.coerceTypes);
    const checkTypes = types.length > 0 && !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));
    if (checkTypes) {
        const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);
        gen.if(wrongType, ()=>{
            if (coerceTo.length) coerceData(it, types, coerceTo);
            else reportTypeError(it);
        });
    }
    return checkTypes;
}
exports.coerceAndCheckDataType = coerceAndCheckDataType;
const COERCIBLE = new Set([
    "string",
    "number",
    "integer",
    "boolean",
    "null"
]);
function coerceToTypes(types, coerceTypes) {
    return coerceTypes ? types.filter((t)=>COERCIBLE.has(t) || coerceTypes === "array" && t === "array") : [];
}
function coerceData(it, types, coerceTo) {
    const { gen, data, opts } = it;
    const dataType = gen.let("dataType", (0, codegen_1._)`typeof ${data}`);
    const coerced = gen.let("coerced", (0, codegen_1._)`undefined`);
    if (opts.coerceTypes === "array") gen.if((0, codegen_1._)`${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, ()=>gen.assign(data, (0, codegen_1._)`${data}[0]`).assign(dataType, (0, codegen_1._)`typeof ${data}`).if(checkDataTypes(types, data, opts.strictNumbers), ()=>gen.assign(coerced, data)));
    gen.if((0, codegen_1._)`${coerced} !== undefined`);
    for (const t of coerceTo)if (COERCIBLE.has(t) || t === "array" && opts.coerceTypes === "array") coerceSpecificType(t);
    gen.else();
    reportTypeError(it);
    gen.endIf();
    gen.if((0, codegen_1._)`${coerced} !== undefined`, ()=>{
        gen.assign(data, coerced);
        assignParentData(it, coerced);
    });
    function coerceSpecificType(t) {
        switch(t){
            case "string":
                gen.elseIf((0, codegen_1._)`${dataType} == "number" || ${dataType} == "boolean"`).assign(coerced, (0, codegen_1._)`"" + ${data}`).elseIf((0, codegen_1._)`${data} === null`).assign(coerced, (0, codegen_1._)`""`);
                return;
            case "number":
                gen.elseIf((0, codegen_1._)`${dataType} == "boolean" || ${data} === null
              || (${dataType} == "string" && ${data} && ${data} == +${data})`).assign(coerced, (0, codegen_1._)`+${data}`);
                return;
            case "integer":
                gen.elseIf((0, codegen_1._)`${dataType} === "boolean" || ${data} === null
              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`).assign(coerced, (0, codegen_1._)`+${data}`);
                return;
            case "boolean":
                gen.elseIf((0, codegen_1._)`${data} === "false" || ${data} === 0 || ${data} === null`).assign(coerced, false).elseIf((0, codegen_1._)`${data} === "true" || ${data} === 1`).assign(coerced, true);
                return;
            case "null":
                gen.elseIf((0, codegen_1._)`${data} === "" || ${data} === 0 || ${data} === false`);
                gen.assign(coerced, null);
                return;
            case "array":
                gen.elseIf((0, codegen_1._)`${dataType} === "string" || ${dataType} === "number"
              || ${dataType} === "boolean" || ${data} === null`).assign(coerced, (0, codegen_1._)`[${data}]`);
        }
    }
}
function assignParentData({ gen, parentData, parentDataProperty }, expr) {
    // TODO use gen.property
    gen.if((0, codegen_1._)`${parentData} !== undefined`, ()=>gen.assign((0, codegen_1._)`${parentData}[${parentDataProperty}]`, expr));
}
function checkDataType(dataType, data, strictNums, correct = DataType.Correct) {
    const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;
    let cond;
    switch(dataType){
        case "null":
            return (0, codegen_1._)`${data} ${EQ} null`;
        case "array":
            cond = (0, codegen_1._)`Array.isArray(${data})`;
            break;
        case "object":
            cond = (0, codegen_1._)`${data} && typeof ${data} == "object" && !Array.isArray(${data})`;
            break;
        case "integer":
            cond = numCond((0, codegen_1._)`!(${data} % 1) && !isNaN(${data})`);
            break;
        case "number":
            cond = numCond();
            break;
        default:
            return (0, codegen_1._)`typeof ${data} ${EQ} ${dataType}`;
    }
    return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);
    function numCond(_cond = codegen_1.nil) {
        return (0, codegen_1.and)((0, codegen_1._)`typeof ${data} == "number"`, _cond, strictNums ? (0, codegen_1._)`isFinite(${data})` : codegen_1.nil);
    }
}
exports.checkDataType = checkDataType;
function checkDataTypes(dataTypes, data, strictNums, correct) {
    if (dataTypes.length === 1) return checkDataType(dataTypes[0], data, strictNums, correct);
    let cond;
    const types = (0, util_1.toHash)(dataTypes);
    if (types.array && types.object) {
        const notObj = (0, codegen_1._)`typeof ${data} != "object"`;
        cond = types.null ? notObj : (0, codegen_1._)`!${data} || ${notObj}`;
        delete types.null;
        delete types.array;
        delete types.object;
    } else cond = codegen_1.nil;
    if (types.number) delete types.integer;
    for(const t in types)cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));
    return cond;
}
exports.checkDataTypes = checkDataTypes;
const typeError = {
    message: ({ schema })=>`must be ${schema}`,
    params: ({ schema, schemaValue })=>typeof schema == "string" ? (0, codegen_1._)`{type: ${schema}}` : (0, codegen_1._)`{type: ${schemaValue}}`
};
function reportTypeError(it) {
    const cxt = getTypeErrorContext(it);
    (0, errors_1.reportError)(cxt, typeError);
}
exports.reportTypeError = reportTypeError;
function getTypeErrorContext(it) {
    const { gen, data, schema } = it;
    const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, "type");
    return {
        gen,
        keyword: "type",
        data,
        schema: schema.type,
        schemaCode,
        schemaValue: schemaCode,
        parentSchema: schema,
        params: {},
        it
    };
}

},{"4089f5f8b045add0":"ivJ7c","dd5ec382536e9238":"c7b8J","88cdfb931f80e7b5":"kJxry","3415e851a7f8c325":"9wlmn","7e9cd5ad0634b02b":"7vNtM"}],"ivJ7c":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getRules = exports.isJSONType = void 0;
const _jsonTypes = [
    "string",
    "number",
    "integer",
    "boolean",
    "null",
    "object",
    "array"
];
const jsonTypes = new Set(_jsonTypes);
function isJSONType(x) {
    return typeof x == "string" && jsonTypes.has(x);
}
exports.isJSONType = isJSONType;
function getRules() {
    const groups = {
        number: {
            type: "number",
            rules: []
        },
        string: {
            type: "string",
            rules: []
        },
        array: {
            type: "array",
            rules: []
        },
        object: {
            type: "object",
            rules: []
        }
    };
    return {
        types: {
            ...groups,
            integer: true,
            boolean: true,
            null: true
        },
        rules: [
            {
                rules: []
            },
            groups.number,
            groups.string,
            groups.array,
            groups.object
        ],
        post: {
            rules: []
        },
        all: {},
        keywords: {}
    };
}
exports.getRules = getRules;

},{}],"c7b8J":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.shouldUseRule = exports.shouldUseGroup = exports.schemaHasRulesForType = void 0;
function schemaHasRulesForType({ schema, self }, type) {
    const group = self.RULES.types[type];
    return group && group !== true && shouldUseGroup(schema, group);
}
exports.schemaHasRulesForType = schemaHasRulesForType;
function shouldUseGroup(schema, group) {
    return group.rules.some((rule)=>shouldUseRule(schema, rule));
}
exports.shouldUseGroup = shouldUseGroup;
function shouldUseRule(schema, rule) {
    var _a;
    return schema[rule.keyword] !== undefined || ((_a = rule.definition.implements) === null || _a === void 0 ? void 0 : _a.some((kwd)=>schema[kwd] !== undefined));
}
exports.shouldUseRule = shouldUseRule;

},{}],"ijhNQ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.assignDefaults = void 0;
const codegen_1 = require("cc7174703daf515");
const util_1 = require("a2721282ac596cf5");
function assignDefaults(it, ty) {
    const { properties, items } = it.schema;
    if (ty === "object" && properties) for(const key in properties)assignDefault(it, key, properties[key].default);
    else if (ty === "array" && Array.isArray(items)) items.forEach((sch, i)=>assignDefault(it, i, sch.default));
}
exports.assignDefaults = assignDefaults;
function assignDefault(it, prop, defaultValue) {
    const { gen, compositeRule, data, opts } = it;
    if (defaultValue === undefined) return;
    const childData = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(prop)}`;
    if (compositeRule) {
        (0, util_1.checkStrictMode)(it, `default is ignored for: ${childData}`);
        return;
    }
    let condition = (0, codegen_1._)`${childData} === undefined`;
    if (opts.useDefaults === "empty") condition = (0, codegen_1._)`${condition} || ${childData} === null || ${childData} === ""`;
    // `${childData} === undefined` +
    // (opts.useDefaults === "empty" ? ` || ${childData} === null || ${childData} === ""` : "")
    gen.if(condition, (0, codegen_1._)`${childData} = ${(0, codegen_1.stringify)(defaultValue)}`);
}

},{"cc7174703daf515":"9wlmn","a2721282ac596cf5":"7vNtM"}],"aRSM4":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.validateKeywordUsage = exports.validSchemaType = exports.funcKeywordCode = exports.macroKeywordCode = void 0;
const codegen_1 = require("18e33341eef58f18");
const names_1 = require("e12c11aac04b7418");
const code_1 = require("adc32b068f541871");
const errors_1 = require("bc193073814b6e5f");
function macroKeywordCode(cxt, def) {
    const { gen, keyword, schema, parentSchema, it } = cxt;
    const macroSchema = def.macro.call(it.self, schema, parentSchema, it);
    const schemaRef = useKeyword(gen, keyword, macroSchema);
    if (it.opts.validateSchema !== false) it.self.validateSchema(macroSchema, true);
    const valid = gen.name("valid");
    cxt.subschema({
        schema: macroSchema,
        schemaPath: codegen_1.nil,
        errSchemaPath: `${it.errSchemaPath}/${keyword}`,
        topSchemaRef: schemaRef,
        compositeRule: true
    }, valid);
    cxt.pass(valid, ()=>cxt.error(true));
}
exports.macroKeywordCode = macroKeywordCode;
function funcKeywordCode(cxt, def) {
    var _a;
    const { gen, keyword, schema, parentSchema, $data, it } = cxt;
    checkAsyncKeyword(it, def);
    const validate = !$data && def.compile ? def.compile.call(it.self, schema, parentSchema, it) : def.validate;
    const validateRef = useKeyword(gen, keyword, validate);
    const valid = gen.let("valid");
    cxt.block$data(valid, validateKeyword);
    cxt.ok((_a = def.valid) !== null && _a !== void 0 ? _a : valid);
    function validateKeyword() {
        if (def.errors === false) {
            assignValid();
            if (def.modifying) modifyData(cxt);
            reportErrs(()=>cxt.error());
        } else {
            const ruleErrs = def.async ? validateAsync() : validateSync();
            if (def.modifying) modifyData(cxt);
            reportErrs(()=>addErrs(cxt, ruleErrs));
        }
    }
    function validateAsync() {
        const ruleErrs = gen.let("ruleErrs", null);
        gen.try(()=>assignValid((0, codegen_1._)`await `), (e)=>gen.assign(valid, false).if((0, codegen_1._)`${e} instanceof ${it.ValidationError}`, ()=>gen.assign(ruleErrs, (0, codegen_1._)`${e}.errors`), ()=>gen.throw(e)));
        return ruleErrs;
    }
    function validateSync() {
        const validateErrs = (0, codegen_1._)`${validateRef}.errors`;
        gen.assign(validateErrs, null);
        assignValid(codegen_1.nil);
        return validateErrs;
    }
    function assignValid(_await = def.async ? (0, codegen_1._)`await ` : codegen_1.nil) {
        const passCxt = it.opts.passContext ? names_1.default.this : names_1.default.self;
        const passSchema = !("compile" in def && !$data || def.schema === false);
        gen.assign(valid, (0, codegen_1._)`${_await}${(0, code_1.callValidateCode)(cxt, validateRef, passCxt, passSchema)}`, def.modifying);
    }
    function reportErrs(errors) {
        var _a;
        gen.if((0, codegen_1.not)((_a = def.valid) !== null && _a !== void 0 ? _a : valid), errors);
    }
}
exports.funcKeywordCode = funcKeywordCode;
function modifyData(cxt) {
    const { gen, data, it } = cxt;
    gen.if(it.parentData, ()=>gen.assign(data, (0, codegen_1._)`${it.parentData}[${it.parentDataProperty}]`));
}
function addErrs(cxt, errs) {
    const { gen } = cxt;
    gen.if((0, codegen_1._)`Array.isArray(${errs})`, ()=>{
        gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`).assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);
        (0, errors_1.extendErrors)(cxt);
    }, ()=>cxt.error());
}
function checkAsyncKeyword({ schemaEnv }, def) {
    if (def.async && !schemaEnv.$async) throw new Error("async keyword in sync schema");
}
function useKeyword(gen, keyword, result) {
    if (result === undefined) throw new Error(`keyword "${keyword}" failed to compile`);
    return gen.scopeValue("keyword", typeof result == "function" ? {
        ref: result
    } : {
        ref: result,
        code: (0, codegen_1.stringify)(result)
    });
}
function validSchemaType(schema, schemaType, allowUndefined = false) {
    // TODO add tests
    return !schemaType.length || schemaType.some((st)=>st === "array" ? Array.isArray(schema) : st === "object" ? schema && typeof schema == "object" && !Array.isArray(schema) : typeof schema == st || allowUndefined && typeof schema == "undefined");
}
exports.validSchemaType = validSchemaType;
function validateKeywordUsage({ schema, opts, self, errSchemaPath }, def, keyword) {
    /* istanbul ignore if */ if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) throw new Error("ajv implementation error");
    const deps = def.dependencies;
    if (deps === null || deps === void 0 ? void 0 : deps.some((kwd)=>!Object.prototype.hasOwnProperty.call(schema, kwd))) throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(",")}`);
    if (def.validateSchema) {
        const valid = def.validateSchema(schema[keyword]);
        if (!valid) {
            const msg = `keyword "${keyword}" value is invalid at path "${errSchemaPath}": ` + self.errorsText(def.validateSchema.errors);
            if (opts.validateSchema === "log") self.logger.error(msg);
            else throw new Error(msg);
        }
    }
}
exports.validateKeywordUsage = validateKeywordUsage;

},{"18e33341eef58f18":"9wlmn","e12c11aac04b7418":"jxdzO","adc32b068f541871":"fSuab","bc193073814b6e5f":"kJxry"}],"fSuab":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.validateUnion = exports.validateArray = exports.usePattern = exports.callValidateCode = exports.schemaProperties = exports.allSchemaProperties = exports.noPropertyInData = exports.propertyInData = exports.isOwnProperty = exports.hasPropFunc = exports.reportMissingProp = exports.checkMissingProp = exports.checkReportMissingProp = void 0;
const codegen_1 = require("c5b9cfa38882b736");
const util_1 = require("6bd31a3c9b2fd469");
const names_1 = require("875dcb82ae7c724a");
const util_2 = require("6bd31a3c9b2fd469");
function checkReportMissingProp(cxt, prop) {
    const { gen, data, it } = cxt;
    gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), ()=>{
        cxt.setParams({
            missingProperty: (0, codegen_1._)`${prop}`
        }, true);
        cxt.error();
    });
}
exports.checkReportMissingProp = checkReportMissingProp;
function checkMissingProp({ gen, data, it: { opts } }, properties, missing) {
    return (0, codegen_1.or)(...properties.map((prop)=>(0, codegen_1.and)(noPropertyInData(gen, data, prop, opts.ownProperties), (0, codegen_1._)`${missing} = ${prop}`)));
}
exports.checkMissingProp = checkMissingProp;
function reportMissingProp(cxt, missing) {
    cxt.setParams({
        missingProperty: missing
    }, true);
    cxt.error();
}
exports.reportMissingProp = reportMissingProp;
function hasPropFunc(gen) {
    return gen.scopeValue("func", {
        // eslint-disable-next-line @typescript-eslint/unbound-method
        ref: Object.prototype.hasOwnProperty,
        code: (0, codegen_1._)`Object.prototype.hasOwnProperty`
    });
}
exports.hasPropFunc = hasPropFunc;
function isOwnProperty(gen, data, property) {
    return (0, codegen_1._)`${hasPropFunc(gen)}.call(${data}, ${property})`;
}
exports.isOwnProperty = isOwnProperty;
function propertyInData(gen, data, property, ownProperties) {
    const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property)} !== undefined`;
    return ownProperties ? (0, codegen_1._)`${cond} && ${isOwnProperty(gen, data, property)}` : cond;
}
exports.propertyInData = propertyInData;
function noPropertyInData(gen, data, property, ownProperties) {
    const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property)} === undefined`;
    return ownProperties ? (0, codegen_1.or)(cond, (0, codegen_1.not)(isOwnProperty(gen, data, property))) : cond;
}
exports.noPropertyInData = noPropertyInData;
function allSchemaProperties(schemaMap) {
    return schemaMap ? Object.keys(schemaMap).filter((p)=>p !== "__proto__") : [];
}
exports.allSchemaProperties = allSchemaProperties;
function schemaProperties(it, schemaMap) {
    return allSchemaProperties(schemaMap).filter((p)=>!(0, util_1.alwaysValidSchema)(it, schemaMap[p]));
}
exports.schemaProperties = schemaProperties;
function callValidateCode({ schemaCode, data, it: { gen, topSchemaRef, schemaPath, errorPath }, it }, func, context, passSchema) {
    const dataAndSchema = passSchema ? (0, codegen_1._)`${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data;
    const valCxt = [
        [
            names_1.default.instancePath,
            (0, codegen_1.strConcat)(names_1.default.instancePath, errorPath)
        ],
        [
            names_1.default.parentData,
            it.parentData
        ],
        [
            names_1.default.parentDataProperty,
            it.parentDataProperty
        ],
        [
            names_1.default.rootData,
            names_1.default.rootData
        ]
    ];
    if (it.opts.dynamicRef) valCxt.push([
        names_1.default.dynamicAnchors,
        names_1.default.dynamicAnchors
    ]);
    const args = (0, codegen_1._)`${dataAndSchema}, ${gen.object(...valCxt)}`;
    return context !== codegen_1.nil ? (0, codegen_1._)`${func}.call(${context}, ${args})` : (0, codegen_1._)`${func}(${args})`;
}
exports.callValidateCode = callValidateCode;
const newRegExp = (0, codegen_1._)`new RegExp`;
function usePattern({ gen, it: { opts } }, pattern) {
    const u = opts.unicodeRegExp ? "u" : "";
    const { regExp } = opts.code;
    const rx = regExp(pattern, u);
    return gen.scopeValue("pattern", {
        key: rx.toString(),
        ref: rx,
        code: (0, codegen_1._)`${regExp.code === "new RegExp" ? newRegExp : (0, util_2.useFunc)(gen, regExp)}(${pattern}, ${u})`
    });
}
exports.usePattern = usePattern;
function validateArray(cxt) {
    const { gen, data, keyword, it } = cxt;
    const valid = gen.name("valid");
    if (it.allErrors) {
        const validArr = gen.let("valid", true);
        validateItems(()=>gen.assign(validArr, false));
        return validArr;
    }
    gen.var(valid, true);
    validateItems(()=>gen.break());
    return valid;
    function validateItems(notValid) {
        const len = gen.const("len", (0, codegen_1._)`${data}.length`);
        gen.forRange("i", 0, len, (i)=>{
            cxt.subschema({
                keyword,
                dataProp: i,
                dataPropType: util_1.Type.Num
            }, valid);
            gen.if((0, codegen_1.not)(valid), notValid);
        });
    }
}
exports.validateArray = validateArray;
function validateUnion(cxt) {
    const { gen, schema, keyword, it } = cxt;
    /* istanbul ignore if */ if (!Array.isArray(schema)) throw new Error("ajv implementation error");
    const alwaysValid = schema.some((sch)=>(0, util_1.alwaysValidSchema)(it, sch));
    if (alwaysValid && !it.opts.unevaluated) return;
    const valid = gen.let("valid", false);
    const schValid = gen.name("_valid");
    gen.block(()=>schema.forEach((_sch, i)=>{
            const schCxt = cxt.subschema({
                keyword,
                schemaProp: i,
                compositeRule: true
            }, schValid);
            gen.assign(valid, (0, codegen_1._)`${valid} || ${schValid}`);
            const merged = cxt.mergeValidEvaluated(schCxt, schValid);
            // can short-circuit if `unevaluatedProperties/Items` not supported (opts.unevaluated !== true)
            // or if all properties and items were evaluated (it.props === true && it.items === true)
            if (!merged) gen.if((0, codegen_1.not)(valid));
        }));
    cxt.result(valid, ()=>cxt.reset(), ()=>cxt.error(true));
}
exports.validateUnion = validateUnion;

},{"c5b9cfa38882b736":"9wlmn","6bd31a3c9b2fd469":"7vNtM","875dcb82ae7c724a":"jxdzO"}],"izDHS":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.extendSubschemaMode = exports.extendSubschemaData = exports.getSubschema = void 0;
const codegen_1 = require("aa9b081156c973ca");
const util_1 = require("f65cedb2b5f71713");
function getSubschema(it, { keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef }) {
    if (keyword !== undefined && schema !== undefined) throw new Error('both "keyword" and "schema" passed, only one allowed');
    if (keyword !== undefined) {
        const sch = it.schema[keyword];
        return schemaProp === undefined ? {
            schema: sch,
            schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,
            errSchemaPath: `${it.errSchemaPath}/${keyword}`
        } : {
            schema: sch[schemaProp],
            schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,
            errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`
        };
    }
    if (schema !== undefined) {
        if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');
        return {
            schema,
            schemaPath,
            topSchemaRef,
            errSchemaPath
        };
    }
    throw new Error('either "keyword" or "schema" must be passed');
}
exports.getSubschema = getSubschema;
function extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {
    if (data !== undefined && dataProp !== undefined) throw new Error('both "data" and "dataProp" passed, only one allowed');
    const { gen } = it;
    if (dataProp !== undefined) {
        const { errorPath, dataPathArr, opts } = it;
        const nextData = gen.let("data", (0, codegen_1._)`${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);
        dataContextProps(nextData);
        subschema.errorPath = (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;
        subschema.parentDataProperty = (0, codegen_1._)`${dataProp}`;
        subschema.dataPathArr = [
            ...dataPathArr,
            subschema.parentDataProperty
        ];
    }
    if (data !== undefined) {
        const nextData = data instanceof codegen_1.Name ? data : gen.let("data", data, true); // replaceable if used once?
        dataContextProps(nextData);
        if (propertyName !== undefined) subschema.propertyName = propertyName;
    // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr
    }
    if (dataTypes) subschema.dataTypes = dataTypes;
    function dataContextProps(_nextData) {
        subschema.data = _nextData;
        subschema.dataLevel = it.dataLevel + 1;
        subschema.dataTypes = [];
        it.definedProperties = new Set();
        subschema.parentData = it.data;
        subschema.dataNames = [
            ...it.dataNames,
            _nextData
        ];
    }
}
exports.extendSubschemaData = extendSubschemaData;
function extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {
    if (compositeRule !== undefined) subschema.compositeRule = compositeRule;
    if (createErrors !== undefined) subschema.createErrors = createErrors;
    if (allErrors !== undefined) subschema.allErrors = allErrors;
    subschema.jtdDiscriminator = jtdDiscriminator; // not inherited
    subschema.jtdMetadata = jtdMetadata; // not inherited
}
exports.extendSubschemaMode = extendSubschemaMode;

},{"aa9b081156c973ca":"9wlmn","f65cedb2b5f71713":"7vNtM"}],"7lpjd":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getSchemaRefs = exports.resolveUrl = exports.normalizeId = exports._getFullPath = exports.getFullPath = exports.inlineRef = void 0;
const util_1 = require("272bb8b278b5bdbb");
const equal = require("4cbbead361e56e33");
const traverse = require("7533283b2784ffaa");
// TODO refactor to use keyword definitions
const SIMPLE_INLINED = new Set([
    "type",
    "format",
    "pattern",
    "maxLength",
    "minLength",
    "maxProperties",
    "minProperties",
    "maxItems",
    "minItems",
    "maximum",
    "minimum",
    "uniqueItems",
    "multipleOf",
    "required",
    "enum",
    "const"
]);
function inlineRef(schema, limit = true) {
    if (typeof schema == "boolean") return true;
    if (limit === true) return !hasRef(schema);
    if (!limit) return false;
    return countKeys(schema) <= limit;
}
exports.inlineRef = inlineRef;
const REF_KEYWORDS = new Set([
    "$ref",
    "$recursiveRef",
    "$recursiveAnchor",
    "$dynamicRef",
    "$dynamicAnchor"
]);
function hasRef(schema) {
    for(const key in schema){
        if (REF_KEYWORDS.has(key)) return true;
        const sch = schema[key];
        if (Array.isArray(sch) && sch.some(hasRef)) return true;
        if (typeof sch == "object" && hasRef(sch)) return true;
    }
    return false;
}
function countKeys(schema) {
    let count = 0;
    for(const key in schema){
        if (key === "$ref") return Infinity;
        count++;
        if (SIMPLE_INLINED.has(key)) continue;
        if (typeof schema[key] == "object") (0, util_1.eachItem)(schema[key], (sch)=>count += countKeys(sch));
        if (count === Infinity) return Infinity;
    }
    return count;
}
function getFullPath(resolver, id = "", normalize) {
    if (normalize !== false) id = normalizeId(id);
    const p = resolver.parse(id);
    return _getFullPath(resolver, p);
}
exports.getFullPath = getFullPath;
function _getFullPath(resolver, p) {
    const serialized = resolver.serialize(p);
    return serialized.split("#")[0] + "#";
}
exports._getFullPath = _getFullPath;
const TRAILING_SLASH_HASH = /#\/?$/;
function normalizeId(id) {
    return id ? id.replace(TRAILING_SLASH_HASH, "") : "";
}
exports.normalizeId = normalizeId;
function resolveUrl(resolver, baseId, id) {
    id = normalizeId(id);
    return resolver.resolve(baseId, id);
}
exports.resolveUrl = resolveUrl;
const ANCHOR = /^[a-z_][-a-z0-9._]*$/i;
function getSchemaRefs(schema, baseId) {
    if (typeof schema == "boolean") return {};
    const { schemaId, uriResolver } = this.opts;
    const schId = normalizeId(schema[schemaId] || baseId);
    const baseIds = {
        "": schId
    };
    const pathPrefix = getFullPath(uriResolver, schId, false);
    const localRefs = {};
    const schemaRefs = new Set();
    traverse(schema, {
        allKeys: true
    }, (sch, jsonPtr, _, parentJsonPtr)=>{
        if (parentJsonPtr === undefined) return;
        const fullPath = pathPrefix + jsonPtr;
        let innerBaseId = baseIds[parentJsonPtr];
        if (typeof sch[schemaId] == "string") innerBaseId = addRef.call(this, sch[schemaId]);
        addAnchor.call(this, sch.$anchor);
        addAnchor.call(this, sch.$dynamicAnchor);
        baseIds[jsonPtr] = innerBaseId;
        function addRef(ref) {
            // eslint-disable-next-line @typescript-eslint/unbound-method
            const _resolve = this.opts.uriResolver.resolve;
            ref = normalizeId(innerBaseId ? _resolve(innerBaseId, ref) : ref);
            if (schemaRefs.has(ref)) throw ambiguos(ref);
            schemaRefs.add(ref);
            let schOrRef = this.refs[ref];
            if (typeof schOrRef == "string") schOrRef = this.refs[schOrRef];
            if (typeof schOrRef == "object") checkAmbiguosRef(sch, schOrRef.schema, ref);
            else if (ref !== normalizeId(fullPath)) {
                if (ref[0] === "#") {
                    checkAmbiguosRef(sch, localRefs[ref], ref);
                    localRefs[ref] = sch;
                } else this.refs[ref] = fullPath;
            }
            return ref;
        }
        function addAnchor(anchor) {
            if (typeof anchor == "string") {
                if (!ANCHOR.test(anchor)) throw new Error(`invalid anchor "${anchor}"`);
                addRef.call(this, `#${anchor}`);
            }
        }
    });
    return localRefs;
    function checkAmbiguosRef(sch1, sch2, ref) {
        if (sch2 !== undefined && !equal(sch1, sch2)) throw ambiguos(ref);
    }
    function ambiguos(ref) {
        return new Error(`reference "${ref}" resolves to more than one schema`);
    }
}
exports.getSchemaRefs = getSchemaRefs;

},{"272bb8b278b5bdbb":"7vNtM","4cbbead361e56e33":"ixZYU","7533283b2784ffaa":"89ovP"}],"ixZYU":[function(require,module,exports) {
"use strict";
// do not edit .js files directly - edit src/index.jst
module.exports = function equal(a, b) {
    if (a === b) return true;
    if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor) return false;
        var length, i, keys;
        if (Array.isArray(a)) {
            length = a.length;
            if (length != b.length) return false;
            for(i = length; i-- !== 0;)if (!equal(a[i], b[i])) return false;
            return true;
        }
        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;
        for(i = length; i-- !== 0;)if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
        for(i = length; i-- !== 0;){
            var key = keys[i];
            if (!equal(a[key], b[key])) return false;
        }
        return true;
    }
    // true if both NaN, false otherwise
    return a !== a && b !== b;
};

},{}],"89ovP":[function(require,module,exports) {
"use strict";
var traverse = module.exports = function(schema, opts, cb) {
    // Legacy support for v0.3.1 and earlier.
    if (typeof opts == "function") {
        cb = opts;
        opts = {};
    }
    cb = opts.cb || cb;
    var pre = typeof cb == "function" ? cb : cb.pre || function() {};
    var post = cb.post || function() {};
    _traverse(opts, pre, post, schema, "", schema);
};
traverse.keywords = {
    additionalItems: true,
    items: true,
    contains: true,
    additionalProperties: true,
    propertyNames: true,
    not: true,
    if: true,
    then: true,
    else: true
};
traverse.arrayKeywords = {
    items: true,
    allOf: true,
    anyOf: true,
    oneOf: true
};
traverse.propsKeywords = {
    $defs: true,
    definitions: true,
    properties: true,
    patternProperties: true,
    dependencies: true
};
traverse.skipKeywords = {
    default: true,
    enum: true,
    const: true,
    required: true,
    maximum: true,
    minimum: true,
    exclusiveMaximum: true,
    exclusiveMinimum: true,
    multipleOf: true,
    maxLength: true,
    minLength: true,
    pattern: true,
    format: true,
    maxItems: true,
    minItems: true,
    uniqueItems: true,
    maxProperties: true,
    minProperties: true
};
function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
    if (schema && typeof schema == "object" && !Array.isArray(schema)) {
        pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
        for(var key in schema){
            var sch = schema[key];
            if (Array.isArray(sch)) {
                if (key in traverse.arrayKeywords) for(var i = 0; i < sch.length; i++)_traverse(opts, pre, post, sch[i], jsonPtr + "/" + key + "/" + i, rootSchema, jsonPtr, key, schema, i);
            } else if (key in traverse.propsKeywords) {
                if (sch && typeof sch == "object") for(var prop in sch)_traverse(opts, pre, post, sch[prop], jsonPtr + "/" + key + "/" + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
            } else if (key in traverse.keywords || opts.allKeys && !(key in traverse.skipKeywords)) _traverse(opts, pre, post, sch, jsonPtr + "/" + key, rootSchema, jsonPtr, key, schema);
        }
        post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
    }
}
function escapeJsonPtr(str) {
    return str.replace(/~/g, "~0").replace(/\//g, "~1");
}

},{}],"j2YyX":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
class ValidationError extends Error {
    constructor(errors){
        super("validation failed");
        this.errors = errors;
        this.ajv = this.validation = true;
    }
}
exports.default = ValidationError;

},{}],"khkIe":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const resolve_1 = require("96fb41608b61ab2d");
class MissingRefError extends Error {
    constructor(resolver, baseId, ref, msg){
        super(msg || `can't resolve reference ${ref} from id ${baseId}`);
        this.missingRef = (0, resolve_1.resolveUrl)(resolver, baseId, ref);
        this.missingSchema = (0, resolve_1.normalizeId)((0, resolve_1.getFullPath)(resolver, this.missingRef));
    }
}
exports.default = MissingRefError;

},{"96fb41608b61ab2d":"7lpjd"}],"41z82":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.resolveSchema = exports.getCompilingSchema = exports.resolveRef = exports.compileSchema = exports.SchemaEnv = void 0;
const codegen_1 = require("6040b29f803efe21");
const validation_error_1 = require("84e7c50527309eb3");
const names_1 = require("bb7dbfc63c27004d");
const resolve_1 = require("cd18dcd881afb39c");
const util_1 = require("6ba7949df35e27ab");
const validate_1 = require("dddb82f3af9e275e");
class SchemaEnv {
    constructor(env){
        var _a;
        this.refs = {};
        this.dynamicAnchors = {};
        let schema;
        if (typeof env.schema == "object") schema = env.schema;
        this.schema = env.schema;
        this.schemaId = env.schemaId;
        this.root = env.root || this;
        this.baseId = (_a = env.baseId) !== null && _a !== void 0 ? _a : (0, resolve_1.normalizeId)(schema === null || schema === void 0 ? void 0 : schema[env.schemaId || "$id"]);
        this.schemaPath = env.schemaPath;
        this.localRefs = env.localRefs;
        this.meta = env.meta;
        this.$async = schema === null || schema === void 0 ? void 0 : schema.$async;
        this.refs = {};
    }
}
exports.SchemaEnv = SchemaEnv;
// let codeSize = 0
// let nodeCount = 0
// Compiles schema in SchemaEnv
function compileSchema(sch) {
    // TODO refactor - remove compilations
    const _sch = getCompilingSchema.call(this, sch);
    if (_sch) return _sch;
    const rootId = (0, resolve_1.getFullPath)(this.opts.uriResolver, sch.root.baseId); // TODO if getFullPath removed 1 tests fails
    const { es5, lines } = this.opts.code;
    const { ownProperties } = this.opts;
    const gen = new codegen_1.CodeGen(this.scope, {
        es5,
        lines,
        ownProperties
    });
    let _ValidationError;
    if (sch.$async) _ValidationError = gen.scopeValue("Error", {
        ref: validation_error_1.default,
        code: (0, codegen_1._)`require("ajv/dist/runtime/validation_error").default`
    });
    const validateName = gen.scopeName("validate");
    sch.validateName = validateName;
    const schemaCxt = {
        gen,
        allErrors: this.opts.allErrors,
        data: names_1.default.data,
        parentData: names_1.default.parentData,
        parentDataProperty: names_1.default.parentDataProperty,
        dataNames: [
            names_1.default.data
        ],
        dataPathArr: [
            codegen_1.nil
        ],
        dataLevel: 0,
        dataTypes: [],
        definedProperties: new Set(),
        topSchemaRef: gen.scopeValue("schema", this.opts.code.source === true ? {
            ref: sch.schema,
            code: (0, codegen_1.stringify)(sch.schema)
        } : {
            ref: sch.schema
        }),
        validateName,
        ValidationError: _ValidationError,
        schema: sch.schema,
        schemaEnv: sch,
        rootId,
        baseId: sch.baseId || rootId,
        schemaPath: codegen_1.nil,
        errSchemaPath: sch.schemaPath || (this.opts.jtd ? "" : "#"),
        errorPath: (0, codegen_1._)`""`,
        opts: this.opts,
        self: this
    };
    let sourceCode;
    try {
        this._compilations.add(sch);
        (0, validate_1.validateFunctionCode)(schemaCxt);
        gen.optimize(this.opts.code.optimize);
        // gen.optimize(1)
        const validateCode = gen.toString();
        sourceCode = `${gen.scopeRefs(names_1.default.scope)}return ${validateCode}`;
        // console.log((codeSize += sourceCode.length), (nodeCount += gen.nodeCount))
        if (this.opts.code.process) sourceCode = this.opts.code.process(sourceCode, sch);
        // console.log("\n\n\n *** \n", sourceCode)
        const makeValidate = new Function(`${names_1.default.self}`, `${names_1.default.scope}`, sourceCode);
        const validate = makeValidate(this, this.scope.get());
        this.scope.value(validateName, {
            ref: validate
        });
        validate.errors = null;
        validate.schema = sch.schema;
        validate.schemaEnv = sch;
        if (sch.$async) validate.$async = true;
        if (this.opts.code.source === true) validate.source = {
            validateName,
            validateCode,
            scopeValues: gen._values
        };
        if (this.opts.unevaluated) {
            const { props, items } = schemaCxt;
            validate.evaluated = {
                props: props instanceof codegen_1.Name ? undefined : props,
                items: items instanceof codegen_1.Name ? undefined : items,
                dynamicProps: props instanceof codegen_1.Name,
                dynamicItems: items instanceof codegen_1.Name
            };
            if (validate.source) validate.source.evaluated = (0, codegen_1.stringify)(validate.evaluated);
        }
        sch.validate = validate;
        return sch;
    } catch (e) {
        delete sch.validate;
        delete sch.validateName;
        if (sourceCode) this.logger.error("Error compiling schema, function code:", sourceCode);
        // console.log("\n\n\n *** \n", sourceCode, this.opts)
        throw e;
    } finally{
        this._compilations.delete(sch);
    }
}
exports.compileSchema = compileSchema;
function resolveRef(root, baseId, ref) {
    var _a;
    ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, ref);
    const schOrFunc = root.refs[ref];
    if (schOrFunc) return schOrFunc;
    let _sch = resolve.call(this, root, ref);
    if (_sch === undefined) {
        const schema = (_a = root.localRefs) === null || _a === void 0 ? void 0 : _a[ref]; // TODO maybe localRefs should hold SchemaEnv
        const { schemaId } = this.opts;
        if (schema) _sch = new SchemaEnv({
            schema,
            schemaId,
            root,
            baseId
        });
    }
    if (_sch === undefined) return;
    return root.refs[ref] = inlineOrCompile.call(this, _sch);
}
exports.resolveRef = resolveRef;
function inlineOrCompile(sch) {
    if ((0, resolve_1.inlineRef)(sch.schema, this.opts.inlineRefs)) return sch.schema;
    return sch.validate ? sch : compileSchema.call(this, sch);
}
// Index of schema compilation in the currently compiled list
function getCompilingSchema(schEnv) {
    for (const sch of this._compilations){
        if (sameSchemaEnv(sch, schEnv)) return sch;
    }
}
exports.getCompilingSchema = getCompilingSchema;
function sameSchemaEnv(s1, s2) {
    return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId;
}
// resolve and compile the references ($ref)
// TODO returns AnySchemaObject (if the schema can be inlined) or validation function
function resolve(root, ref // reference to resolve
) {
    let sch;
    while(typeof (sch = this.refs[ref]) == "string")ref = sch;
    return sch || this.schemas[ref] || resolveSchema.call(this, root, ref);
}
// Resolve schema, its root and baseId
function resolveSchema(root, ref // reference to resolve
) {
    const p = this.opts.uriResolver.parse(ref);
    const refPath = (0, resolve_1._getFullPath)(this.opts.uriResolver, p);
    let baseId = (0, resolve_1.getFullPath)(this.opts.uriResolver, root.baseId, undefined);
    // TODO `Object.keys(root.schema).length > 0` should not be needed - but removing breaks 2 tests
    if (Object.keys(root.schema).length > 0 && refPath === baseId) return getJsonPointer.call(this, p, root);
    const id = (0, resolve_1.normalizeId)(refPath);
    const schOrRef = this.refs[id] || this.schemas[id];
    if (typeof schOrRef == "string") {
        const sch = resolveSchema.call(this, root, schOrRef);
        if (typeof (sch === null || sch === void 0 ? void 0 : sch.schema) !== "object") return;
        return getJsonPointer.call(this, p, sch);
    }
    if (typeof (schOrRef === null || schOrRef === void 0 ? void 0 : schOrRef.schema) !== "object") return;
    if (!schOrRef.validate) compileSchema.call(this, schOrRef);
    if (id === (0, resolve_1.normalizeId)(ref)) {
        const { schema } = schOrRef;
        const { schemaId } = this.opts;
        const schId = schema[schemaId];
        if (schId) baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
        return new SchemaEnv({
            schema,
            schemaId,
            root,
            baseId
        });
    }
    return getJsonPointer.call(this, p, schOrRef);
}
exports.resolveSchema = resolveSchema;
const PREVENT_SCOPE_CHANGE = new Set([
    "properties",
    "patternProperties",
    "enum",
    "dependencies",
    "definitions"
]);
function getJsonPointer(parsedRef, { baseId, schema, root }) {
    var _a;
    if (((_a = parsedRef.fragment) === null || _a === void 0 ? void 0 : _a[0]) !== "/") return;
    for (const part of parsedRef.fragment.slice(1).split("/")){
        if (typeof schema === "boolean") return;
        const partSchema = schema[(0, util_1.unescapeFragment)(part)];
        if (partSchema === undefined) return;
        schema = partSchema;
        // TODO PREVENT_SCOPE_CHANGE could be defined in keyword def?
        const schId = typeof schema === "object" && schema[this.opts.schemaId];
        if (!PREVENT_SCOPE_CHANGE.has(part) && schId) baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
    }
    let env;
    if (typeof schema != "boolean" && schema.$ref && !(0, util_1.schemaHasRulesButRef)(schema, this.RULES)) {
        const $ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schema.$ref);
        env = resolveSchema.call(this, root, $ref);
    }
    // even though resolution failed we need to return SchemaEnv to throw exception
    // so that compileAsync loads missing schema.
    const { schemaId } = this.opts;
    env = env || new SchemaEnv({
        schema,
        schemaId,
        root,
        baseId
    });
    if (env.schema !== env.root.schema) return env;
    return undefined;
}

},{"6040b29f803efe21":"9wlmn","84e7c50527309eb3":"j2YyX","bb7dbfc63c27004d":"jxdzO","cd18dcd881afb39c":"7lpjd","6ba7949df35e27ab":"7vNtM","dddb82f3af9e275e":"bpnTE"}],"29Tr5":[function(require,module,exports) {
module.exports = JSON.parse('{"$id":"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#","description":"Meta-schema for $data reference (JSON AnySchema extension proposal)","type":"object","required":["$data"],"properties":{"$data":{"type":"string","anyOf":[{"format":"relative-json-pointer"},{"format":"json-pointer"}]}},"additionalProperties":false}');

},{}],"iM407":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const uri = require("a04c2a22a0581b84");
uri.code = 'require("ajv/dist/runtime/uri").default';
exports.default = uri;

},{"a04c2a22a0581b84":"eCUI8"}],"eCUI8":[function(require,module,exports) {
"use strict";
const { normalizeIPv6, normalizeIPv4, removeDotSegments, recomposeAuthority, normalizeComponentEncoding } = require("f110d856ee42361b");
const SCHEMES = require("bec2b4c904353aac");
function normalize(uri, options) {
    if (typeof uri === "string") uri = serialize(parse(uri, options), options);
    else if (typeof uri === "object") uri = parse(serialize(uri, options), options);
    return uri;
}
function resolve(baseURI, relativeURI, options) {
    const schemelessOptions = Object.assign({
        scheme: "null"
    }, options);
    const resolved = resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true);
    return serialize(resolved, {
        ...schemelessOptions,
        skipEscape: true
    });
}
function resolveComponents(base, relative, options, skipNormalization) {
    const target = {};
    if (!skipNormalization) {
        base = parse(serialize(base, options), options) // normalize base components
        ;
        relative = parse(serialize(relative, options), options) // normalize relative components
        ;
    }
    options = options || {};
    if (!options.tolerant && relative.scheme) {
        target.scheme = relative.scheme;
        // target.authority = relative.authority;
        target.userinfo = relative.userinfo;
        target.host = relative.host;
        target.port = relative.port;
        target.path = removeDotSegments(relative.path || "");
        target.query = relative.query;
    } else {
        if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
            // target.authority = relative.authority;
            target.userinfo = relative.userinfo;
            target.host = relative.host;
            target.port = relative.port;
            target.path = removeDotSegments(relative.path || "");
            target.query = relative.query;
        } else {
            if (!relative.path) {
                target.path = base.path;
                if (relative.query !== undefined) target.query = relative.query;
                else target.query = base.query;
            } else {
                if (relative.path.charAt(0) === "/") target.path = removeDotSegments(relative.path);
                else {
                    if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) target.path = "/" + relative.path;
                    else if (!base.path) target.path = relative.path;
                    else target.path = base.path.slice(0, base.path.lastIndexOf("/") + 1) + relative.path;
                    target.path = removeDotSegments(target.path);
                }
                target.query = relative.query;
            }
            // target.authority = base.authority;
            target.userinfo = base.userinfo;
            target.host = base.host;
            target.port = base.port;
        }
        target.scheme = base.scheme;
    }
    target.fragment = relative.fragment;
    return target;
}
function equal(uriA, uriB, options) {
    if (typeof uriA === "string") {
        uriA = unescape(uriA);
        uriA = serialize(normalizeComponentEncoding(parse(uriA, options), true), {
            ...options,
            skipEscape: true
        });
    } else if (typeof uriA === "object") uriA = serialize(normalizeComponentEncoding(uriA, true), {
        ...options,
        skipEscape: true
    });
    if (typeof uriB === "string") {
        uriB = unescape(uriB);
        uriB = serialize(normalizeComponentEncoding(parse(uriB, options), true), {
            ...options,
            skipEscape: true
        });
    } else if (typeof uriB === "object") uriB = serialize(normalizeComponentEncoding(uriB, true), {
        ...options,
        skipEscape: true
    });
    return uriA.toLowerCase() === uriB.toLowerCase();
}
function serialize(cmpts, opts) {
    const components = {
        host: cmpts.host,
        scheme: cmpts.scheme,
        userinfo: cmpts.userinfo,
        port: cmpts.port,
        path: cmpts.path,
        query: cmpts.query,
        nid: cmpts.nid,
        nss: cmpts.nss,
        uuid: cmpts.uuid,
        fragment: cmpts.fragment,
        reference: cmpts.reference,
        resourceName: cmpts.resourceName,
        secure: cmpts.secure,
        error: ""
    };
    const options = Object.assign({}, opts);
    const uriTokens = [];
    // find scheme handler
    const schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
    // perform scheme specific serialization
    if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);
    if (components.path !== undefined) {
        if (!options.skipEscape) {
            components.path = escape(components.path);
            if (components.scheme !== undefined) components.path = components.path.split("%3A").join(":");
        } else components.path = unescape(components.path);
    }
    if (options.reference !== "suffix" && components.scheme) uriTokens.push(components.scheme, ":");
    const authority = recomposeAuthority(components, options);
    if (authority !== undefined) {
        if (options.reference !== "suffix") uriTokens.push("//");
        uriTokens.push(authority);
        if (components.path && components.path.charAt(0) !== "/") uriTokens.push("/");
    }
    if (components.path !== undefined) {
        let s = components.path;
        if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) s = removeDotSegments(s);
        if (authority === undefined) s = s.replace(/^\/\//u, "/%2F") // don't allow the path to start with "//"
        ;
        uriTokens.push(s);
    }
    if (components.query !== undefined) uriTokens.push("?", components.query);
    if (components.fragment !== undefined) uriTokens.push("#", components.fragment);
    return uriTokens.join("");
}
const hexLookUp = Array.from({
    length: 127
}, (v, k)=>/[^!"$&'()*+,\-.;=_`a-z{}~]/u.test(String.fromCharCode(k)));
function nonSimpleDomain(value) {
    let code = 0;
    for(let i = 0, len = value.length; i < len; ++i){
        code = value.charCodeAt(i);
        if (code > 126 || hexLookUp[code]) return true;
    }
    return false;
}
const URI_PARSE = /^(?:([^#/:?]+):)?(?:\/\/((?:([^#/?@]*)@)?(\[[^#/?\]]+\]|[^#/:?]*)(?::(\d*))?))?([^#?]*)(?:\?([^#]*))?(?:#((?:.|[\n\r])*))?/u;
function parse(uri, opts) {
    const options = Object.assign({}, opts);
    const parsed = {
        scheme: undefined,
        userinfo: undefined,
        host: "",
        port: undefined,
        path: "",
        query: undefined,
        fragment: undefined
    };
    const gotEncoding = uri.indexOf("%") !== -1;
    let isIP = false;
    if (options.reference === "suffix") uri = (options.scheme ? options.scheme + ":" : "") + "//" + uri;
    const matches = uri.match(URI_PARSE);
    if (matches) {
        // store each component
        parsed.scheme = matches[1];
        parsed.userinfo = matches[3];
        parsed.host = matches[4];
        parsed.port = parseInt(matches[5], 10);
        parsed.path = matches[6] || "";
        parsed.query = matches[7];
        parsed.fragment = matches[8];
        // fix port number
        if (isNaN(parsed.port)) parsed.port = matches[5];
        if (parsed.host) {
            const ipv4result = normalizeIPv4(parsed.host);
            if (ipv4result.isIPV4 === false) {
                const ipv6result = normalizeIPv6(ipv4result.host, {
                    isIPV4: false
                });
                parsed.host = ipv6result.host.toLowerCase();
                isIP = ipv6result.isIPV6;
            } else {
                parsed.host = ipv4result.host;
                isIP = true;
            }
        }
        if (parsed.scheme === undefined && parsed.userinfo === undefined && parsed.host === undefined && parsed.port === undefined && !parsed.path && parsed.query === undefined) parsed.reference = "same-document";
        else if (parsed.scheme === undefined) parsed.reference = "relative";
        else if (parsed.fragment === undefined) parsed.reference = "absolute";
        else parsed.reference = "uri";
        // check for reference errors
        if (options.reference && options.reference !== "suffix" && options.reference !== parsed.reference) parsed.error = parsed.error || "URI is not a " + options.reference + " reference.";
        // find scheme handler
        const schemeHandler = SCHEMES[(options.scheme || parsed.scheme || "").toLowerCase()];
        // check if scheme can't handle IRIs
        if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
            // if host component is a domain name
            if (parsed.host && (options.domainHost || schemeHandler && schemeHandler.domainHost) && isIP === false && nonSimpleDomain(parsed.host)) // convert Unicode IDN -> ASCII IDN
            try {
                parsed.host = URL.domainToASCII(parsed.host.toLowerCase());
            } catch (e) {
                parsed.error = parsed.error || "Host's domain name can not be converted to ASCII: " + e;
            }
        // convert IRI -> URI
        }
        if (!schemeHandler || schemeHandler && !schemeHandler.skipNormalize) {
            if (gotEncoding && parsed.scheme !== undefined) parsed.scheme = unescape(parsed.scheme);
            if (gotEncoding && parsed.host !== undefined) parsed.host = unescape(parsed.host);
            if (parsed.path !== undefined && parsed.path.length) parsed.path = escape(unescape(parsed.path));
            if (parsed.fragment !== undefined && parsed.fragment.length) parsed.fragment = encodeURI(decodeURIComponent(parsed.fragment));
        }
        // perform scheme specific parsing
        if (schemeHandler && schemeHandler.parse) schemeHandler.parse(parsed, options);
    } else parsed.error = parsed.error || "URI can not be parsed.";
    return parsed;
}
const fastUri = {
    SCHEMES,
    normalize,
    resolve,
    resolveComponents,
    equal,
    serialize,
    parse
};
module.exports = fastUri;
module.exports.default = fastUri;
module.exports.fastUri = fastUri;

},{"f110d856ee42361b":"khiWD","bec2b4c904353aac":"bSorT"}],"khiWD":[function(require,module,exports) {
"use strict";
const { HEX } = require("c03c080a1c48b07a");
function normalizeIPv4(host) {
    if (findToken(host, ".") < 3) return {
        host,
        isIPV4: false
    };
    const matches = host.match(/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/u) || [];
    const [address] = matches;
    if (address) return {
        host: stripLeadingZeros(address, "."),
        isIPV4: true
    };
    else return {
        host,
        isIPV4: false
    };
}
/**
 * @param {string[]} input
 * @param {boolean} [keepZero=false]
 * @returns {string|undefined}
 */ function stringArrayToHexStripped(input, keepZero = false) {
    let acc = "";
    let strip = true;
    for (const c of input){
        if (HEX[c] === undefined) return undefined;
        if (c !== "0" && strip === true) strip = false;
        if (!strip) acc += c;
    }
    if (keepZero && acc.length === 0) acc = "0";
    return acc;
}
function getIPV6(input) {
    let tokenCount = 0;
    const output = {
        error: false,
        address: "",
        zone: ""
    };
    const address = [];
    const buffer = [];
    let isZone = false;
    let endipv6Encountered = false;
    let endIpv6 = false;
    function consume() {
        if (buffer.length) {
            if (isZone === false) {
                const hex = stringArrayToHexStripped(buffer);
                if (hex !== undefined) address.push(hex);
                else {
                    output.error = true;
                    return false;
                }
            }
            buffer.length = 0;
        }
        return true;
    }
    for(let i = 0; i < input.length; i++){
        const cursor = input[i];
        if (cursor === "[" || cursor === "]") continue;
        if (cursor === ":") {
            if (endipv6Encountered === true) endIpv6 = true;
            if (!consume()) break;
            tokenCount++;
            address.push(":");
            if (tokenCount > 7) {
                // not valid
                output.error = true;
                break;
            }
            if (i - 1 >= 0 && input[i - 1] === ":") endipv6Encountered = true;
            continue;
        } else if (cursor === "%") {
            if (!consume()) break;
            // switch to zone detection
            isZone = true;
        } else {
            buffer.push(cursor);
            continue;
        }
    }
    if (buffer.length) {
        if (isZone) output.zone = buffer.join("");
        else if (endIpv6) address.push(buffer.join(""));
        else address.push(stringArrayToHexStripped(buffer));
    }
    output.address = address.join("");
    return output;
}
function normalizeIPv6(host, opts = {}) {
    if (findToken(host, ":") < 2) return {
        host,
        isIPV6: false
    };
    const ipv6 = getIPV6(host);
    if (!ipv6.error) {
        let newHost = ipv6.address;
        let escapedHost = ipv6.address;
        if (ipv6.zone) {
            newHost += "%" + ipv6.zone;
            escapedHost += "%25" + ipv6.zone;
        }
        return {
            host: newHost,
            escapedHost,
            isIPV6: true
        };
    } else return {
        host,
        isIPV6: false
    };
}
function stripLeadingZeros(str, token) {
    let out = "";
    let skip = true;
    const l = str.length;
    for(let i = 0; i < l; i++){
        const c = str[i];
        if (c === "0" && skip) {
            if (i + 1 <= l && str[i + 1] === token || i + 1 === l) {
                out += c;
                skip = false;
            }
        } else {
            if (c === token) skip = true;
            else skip = false;
            out += c;
        }
    }
    return out;
}
function findToken(str, token) {
    let ind = 0;
    for(let i = 0; i < str.length; i++)if (str[i] === token) ind++;
    return ind;
}
const RDS1 = /^\.\.?\//u;
const RDS2 = /^\/\.(?:\/|$)/u;
const RDS3 = /^\/\.\.(?:\/|$)/u;
const RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/u;
function removeDotSegments(input) {
    const output = [];
    while(input.length){
        if (input.match(RDS1)) input = input.replace(RDS1, "");
        else if (input.match(RDS2)) input = input.replace(RDS2, "/");
        else if (input.match(RDS3)) {
            input = input.replace(RDS3, "/");
            output.pop();
        } else if (input === "." || input === "..") input = "";
        else {
            const im = input.match(RDS5);
            if (im) {
                const s = im[0];
                input = input.slice(s.length);
                output.push(s);
            } else throw new Error("Unexpected dot segment condition");
        }
    }
    return output.join("");
}
function normalizeComponentEncoding(components, esc) {
    const func = esc !== true ? escape : unescape;
    if (components.scheme !== undefined) components.scheme = func(components.scheme);
    if (components.userinfo !== undefined) components.userinfo = func(components.userinfo);
    if (components.host !== undefined) components.host = func(components.host);
    if (components.path !== undefined) components.path = func(components.path);
    if (components.query !== undefined) components.query = func(components.query);
    if (components.fragment !== undefined) components.fragment = func(components.fragment);
    return components;
}
function recomposeAuthority(components, options) {
    const uriTokens = [];
    if (components.userinfo !== undefined) {
        uriTokens.push(components.userinfo);
        uriTokens.push("@");
    }
    if (components.host !== undefined) {
        let host = unescape(components.host);
        const ipV4res = normalizeIPv4(host);
        if (ipV4res.isIPV4) host = ipV4res.host;
        else {
            const ipV6res = normalizeIPv6(ipV4res.host, {
                isIPV4: false
            });
            if (ipV6res.isIPV6 === true) host = `[${ipV6res.escapedHost}]`;
            else host = components.host;
        }
        uriTokens.push(host);
    }
    if (typeof components.port === "number" || typeof components.port === "string") {
        uriTokens.push(":");
        uriTokens.push(String(components.port));
    }
    return uriTokens.length ? uriTokens.join("") : undefined;
}
module.exports = {
    recomposeAuthority,
    normalizeComponentEncoding,
    removeDotSegments,
    normalizeIPv4,
    normalizeIPv6,
    stringArrayToHexStripped
};

},{"c03c080a1c48b07a":"cJJwt"}],"cJJwt":[function(require,module,exports) {
"use strict";
const HEX = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9,
    a: 10,
    A: 10,
    b: 11,
    B: 11,
    c: 12,
    C: 12,
    d: 13,
    D: 13,
    e: 14,
    E: 14,
    f: 15,
    F: 15
};
module.exports = {
    HEX
};

},{}],"bSorT":[function(require,module,exports) {
"use strict";
const UUID_REG = /^[\da-f]{8}\b-[\da-f]{4}\b-[\da-f]{4}\b-[\da-f]{4}\b-[\da-f]{12}$/iu;
const URN_REG = /([\da-z][\d\-a-z]{0,31}):((?:[\w!$'()*+,\-.:;=@]|%[\da-f]{2})+)/iu;
function isSecure(wsComponents) {
    return typeof wsComponents.secure === "boolean" ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
}
function httpParse(components) {
    if (!components.host) components.error = components.error || "HTTP URIs must have a host.";
    return components;
}
function httpSerialize(components) {
    const secure = String(components.scheme).toLowerCase() === "https";
    // normalize the default port
    if (components.port === (secure ? 443 : 80) || components.port === "") components.port = undefined;
    // normalize the empty path
    if (!components.path) components.path = "/";
    // NOTE: We do not parse query strings for HTTP URIs
    // as WWW Form Url Encoded query strings are part of the HTML4+ spec,
    // and not the HTTP spec.
    return components;
}
function wsParse(wsComponents) {
    // indicate if the secure flag is set
    wsComponents.secure = isSecure(wsComponents);
    // construct resouce name
    wsComponents.resourceName = (wsComponents.path || "/") + (wsComponents.query ? "?" + wsComponents.query : "");
    wsComponents.path = undefined;
    wsComponents.query = undefined;
    return wsComponents;
}
function wsSerialize(wsComponents) {
    // normalize the default port
    if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") wsComponents.port = undefined;
    // ensure scheme matches secure flag
    if (typeof wsComponents.secure === "boolean") {
        wsComponents.scheme = wsComponents.secure ? "wss" : "ws";
        wsComponents.secure = undefined;
    }
    // reconstruct path from resource name
    if (wsComponents.resourceName) {
        const [path, query] = wsComponents.resourceName.split("?");
        wsComponents.path = path && path !== "/" ? path : undefined;
        wsComponents.query = query;
        wsComponents.resourceName = undefined;
    }
    // forbid fragment component
    wsComponents.fragment = undefined;
    return wsComponents;
}
function urnParse(urnComponents, options) {
    if (!urnComponents.path) {
        urnComponents.error = "URN can not be parsed";
        return urnComponents;
    }
    const matches = urnComponents.path.match(URN_REG);
    if (matches) {
        const scheme = options.scheme || urnComponents.scheme || "urn";
        urnComponents.nid = matches[1].toLowerCase();
        urnComponents.nss = matches[2];
        const urnScheme = `${scheme}:${options.nid || urnComponents.nid}`;
        const schemeHandler = SCHEMES[urnScheme];
        urnComponents.path = undefined;
        if (schemeHandler) urnComponents = schemeHandler.parse(urnComponents, options);
    } else urnComponents.error = urnComponents.error || "URN can not be parsed.";
    return urnComponents;
}
function urnSerialize(urnComponents, options) {
    const scheme = options.scheme || urnComponents.scheme || "urn";
    const nid = urnComponents.nid.toLowerCase();
    const urnScheme = `${scheme}:${options.nid || nid}`;
    const schemeHandler = SCHEMES[urnScheme];
    if (schemeHandler) urnComponents = schemeHandler.serialize(urnComponents, options);
    const uriComponents = urnComponents;
    const nss = urnComponents.nss;
    uriComponents.path = `${nid || options.nid}:${nss}`;
    options.skipEscape = true;
    return uriComponents;
}
function urnuuidParse(urnComponents, options) {
    const uuidComponents = urnComponents;
    uuidComponents.uuid = uuidComponents.nss;
    uuidComponents.nss = undefined;
    if (!options.tolerant && (!uuidComponents.uuid || !UUID_REG.test(uuidComponents.uuid))) uuidComponents.error = uuidComponents.error || "UUID is not valid.";
    return uuidComponents;
}
function urnuuidSerialize(uuidComponents) {
    const urnComponents = uuidComponents;
    // normalize UUID
    urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
    return urnComponents;
}
const http = {
    scheme: "http",
    domainHost: true,
    parse: httpParse,
    serialize: httpSerialize
};
const https = {
    scheme: "https",
    domainHost: http.domainHost,
    parse: httpParse,
    serialize: httpSerialize
};
const ws = {
    scheme: "ws",
    domainHost: true,
    parse: wsParse,
    serialize: wsSerialize
};
const wss = {
    scheme: "wss",
    domainHost: ws.domainHost,
    parse: ws.parse,
    serialize: ws.serialize
};
const urn = {
    scheme: "urn",
    parse: urnParse,
    serialize: urnSerialize,
    skipNormalize: true
};
const urnuuid = {
    scheme: "urn:uuid",
    parse: urnuuidParse,
    serialize: urnuuidSerialize,
    skipNormalize: true
};
const SCHEMES = {
    http,
    https,
    ws,
    wss,
    urn,
    "urn:uuid": urnuuid
};
module.exports = SCHEMES;

},{}],"ahp09":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const core_1 = require("82be42ec8d7157f1");
const validation_1 = require("cc2ce53aed8875dc");
const applicator_1 = require("577e40ebaf3a827f");
const format_1 = require("c0c18bcb9a1ae0aa");
const metadata_1 = require("aeecf34ae6128131");
const draft7Vocabularies = [
    core_1.default,
    validation_1.default,
    (0, applicator_1.default)(),
    format_1.default,
    metadata_1.metadataVocabulary,
    metadata_1.contentVocabulary
];
exports.default = draft7Vocabularies;

},{"82be42ec8d7157f1":"2mJ5o","cc2ce53aed8875dc":"dGDuc","577e40ebaf3a827f":"1oVEW","c0c18bcb9a1ae0aa":"2jroQ","aeecf34ae6128131":"21ACk"}],"2mJ5o":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const id_1 = require("4520fec7a881165e");
const ref_1 = require("4dca9df0743851d");
const core = [
    "$schema",
    "$id",
    "$defs",
    "$vocabulary",
    {
        keyword: "$comment"
    },
    "definitions",
    id_1.default,
    ref_1.default
];
exports.default = core;

},{"4520fec7a881165e":"fqs0B","4dca9df0743851d":"eYstW"}],"fqs0B":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const def = {
    keyword: "id",
    code () {
        throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID');
    }
};
exports.default = def;

},{}],"eYstW":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.callRef = exports.getValidate = void 0;
const ref_error_1 = require("8f71514fa79201e2");
const code_1 = require("1b8a04b4c06a79cd");
const codegen_1 = require("db023c7b20018a60");
const names_1 = require("63402100a762e61c");
const compile_1 = require("a9b1b3190fc949f5");
const util_1 = require("ba94d65897c2c00f");
const def = {
    keyword: "$ref",
    schemaType: "string",
    code (cxt) {
        const { gen, schema: $ref, it } = cxt;
        const { baseId, schemaEnv: env, validateName, opts, self } = it;
        const { root } = env;
        if (($ref === "#" || $ref === "#/") && baseId === root.baseId) return callRootRef();
        const schOrEnv = compile_1.resolveRef.call(self, root, baseId, $ref);
        if (schOrEnv === undefined) throw new ref_error_1.default(it.opts.uriResolver, baseId, $ref);
        if (schOrEnv instanceof compile_1.SchemaEnv) return callValidate(schOrEnv);
        return inlineRefSchema(schOrEnv);
        function callRootRef() {
            if (env === root) return callRef(cxt, validateName, env, env.$async);
            const rootName = gen.scopeValue("root", {
                ref: root
            });
            return callRef(cxt, (0, codegen_1._)`${rootName}.validate`, root, root.$async);
        }
        function callValidate(sch) {
            const v = getValidate(cxt, sch);
            callRef(cxt, v, sch, sch.$async);
        }
        function inlineRefSchema(sch) {
            const schName = gen.scopeValue("schema", opts.code.source === true ? {
                ref: sch,
                code: (0, codegen_1.stringify)(sch)
            } : {
                ref: sch
            });
            const valid = gen.name("valid");
            const schCxt = cxt.subschema({
                schema: sch,
                dataTypes: [],
                schemaPath: codegen_1.nil,
                topSchemaRef: schName,
                errSchemaPath: $ref
            }, valid);
            cxt.mergeEvaluated(schCxt);
            cxt.ok(valid);
        }
    }
};
function getValidate(cxt, sch) {
    const { gen } = cxt;
    return sch.validate ? gen.scopeValue("validate", {
        ref: sch.validate
    }) : (0, codegen_1._)`${gen.scopeValue("wrapper", {
        ref: sch
    })}.validate`;
}
exports.getValidate = getValidate;
function callRef(cxt, v, sch, $async) {
    const { gen, it } = cxt;
    const { allErrors, schemaEnv: env, opts } = it;
    const passCxt = opts.passContext ? names_1.default.this : codegen_1.nil;
    if ($async) callAsyncRef();
    else callSyncRef();
    function callAsyncRef() {
        if (!env.$async) throw new Error("async schema referenced by sync schema");
        const valid = gen.let("valid");
        gen.try(()=>{
            gen.code((0, codegen_1._)`await ${(0, code_1.callValidateCode)(cxt, v, passCxt)}`);
            addEvaluatedFrom(v); // TODO will not work with async, it has to be returned with the result
            if (!allErrors) gen.assign(valid, true);
        }, (e)=>{
            gen.if((0, codegen_1._)`!(${e} instanceof ${it.ValidationError})`, ()=>gen.throw(e));
            addErrorsFrom(e);
            if (!allErrors) gen.assign(valid, false);
        });
        cxt.ok(valid);
    }
    function callSyncRef() {
        cxt.result((0, code_1.callValidateCode)(cxt, v, passCxt), ()=>addEvaluatedFrom(v), ()=>addErrorsFrom(v));
    }
    function addErrorsFrom(source) {
        const errs = (0, codegen_1._)`${source}.errors`;
        gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`); // TODO tagged
        gen.assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);
    }
    function addEvaluatedFrom(source) {
        var _a;
        if (!it.opts.unevaluated) return;
        const schEvaluated = (_a = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a === void 0 ? void 0 : _a.evaluated;
        // TODO refactor
        if (it.props !== true) {
            if (schEvaluated && !schEvaluated.dynamicProps) {
                if (schEvaluated.props !== undefined) it.props = util_1.mergeEvaluated.props(gen, schEvaluated.props, it.props);
            } else {
                const props = gen.var("props", (0, codegen_1._)`${source}.evaluated.props`);
                it.props = util_1.mergeEvaluated.props(gen, props, it.props, codegen_1.Name);
            }
        }
        if (it.items !== true) {
            if (schEvaluated && !schEvaluated.dynamicItems) {
                if (schEvaluated.items !== undefined) it.items = util_1.mergeEvaluated.items(gen, schEvaluated.items, it.items);
            } else {
                const items = gen.var("items", (0, codegen_1._)`${source}.evaluated.items`);
                it.items = util_1.mergeEvaluated.items(gen, items, it.items, codegen_1.Name);
            }
        }
    }
}
exports.callRef = callRef;
exports.default = def;

},{"8f71514fa79201e2":"khkIe","1b8a04b4c06a79cd":"fSuab","db023c7b20018a60":"9wlmn","63402100a762e61c":"jxdzO","a9b1b3190fc949f5":"41z82","ba94d65897c2c00f":"7vNtM"}],"dGDuc":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const limitNumber_1 = require("e79930f981e2a364");
const multipleOf_1 = require("be0f39f028edf7dc");
const limitLength_1 = require("61dc60dc2ba14401");
const pattern_1 = require("69222616ff1794f6");
const limitProperties_1 = require("8519a67240d2796c");
const required_1 = require("e263f38fd14c2b9b");
const limitItems_1 = require("e21029958ad3c333");
const uniqueItems_1 = require("d0365586fa25458b");
const const_1 = require("8e7e1dc62c0964f3");
const enum_1 = require("89b207411a0537ee");
const validation = [
    // number
    limitNumber_1.default,
    multipleOf_1.default,
    // string
    limitLength_1.default,
    pattern_1.default,
    // object
    limitProperties_1.default,
    required_1.default,
    // array
    limitItems_1.default,
    uniqueItems_1.default,
    // any
    {
        keyword: "type",
        schemaType: [
            "string",
            "array"
        ]
    },
    {
        keyword: "nullable",
        schemaType: "boolean"
    },
    const_1.default,
    enum_1.default
];
exports.default = validation;

},{"e79930f981e2a364":"bn9m2","be0f39f028edf7dc":"ihOo1","61dc60dc2ba14401":"lNX5F","69222616ff1794f6":"hvE9M","8519a67240d2796c":"f2icq","e263f38fd14c2b9b":"eX2Jw","e21029958ad3c333":"6U3a8","d0365586fa25458b":"a7cCL","8e7e1dc62c0964f3":"6HlYe","89b207411a0537ee":"8FtQO"}],"bn9m2":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const codegen_1 = require("3648731dfccfca27");
const ops = codegen_1.operators;
const KWDs = {
    maximum: {
        okStr: "<=",
        ok: ops.LTE,
        fail: ops.GT
    },
    minimum: {
        okStr: ">=",
        ok: ops.GTE,
        fail: ops.LT
    },
    exclusiveMaximum: {
        okStr: "<",
        ok: ops.LT,
        fail: ops.GTE
    },
    exclusiveMinimum: {
        okStr: ">",
        ok: ops.GT,
        fail: ops.LTE
    }
};
const error = {
    message: ({ keyword, schemaCode })=>(0, codegen_1.str)`must be ${KWDs[keyword].okStr} ${schemaCode}`,
    params: ({ keyword, schemaCode })=>(0, codegen_1._)`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`
};
const def = {
    keyword: Object.keys(KWDs),
    type: "number",
    schemaType: "number",
    $data: true,
    error,
    code (cxt) {
        const { keyword, data, schemaCode } = cxt;
        cxt.fail$data((0, codegen_1._)`${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);
    }
};
exports.default = def;

},{"3648731dfccfca27":"9wlmn"}],"ihOo1":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const codegen_1 = require("f398ecd84b20a400");
const error = {
    message: ({ schemaCode })=>(0, codegen_1.str)`must be multiple of ${schemaCode}`,
    params: ({ schemaCode })=>(0, codegen_1._)`{multipleOf: ${schemaCode}}`
};
const def = {
    keyword: "multipleOf",
    type: "number",
    schemaType: "number",
    $data: true,
    error,
    code (cxt) {
        const { gen, data, schemaCode, it } = cxt;
        // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)
        const prec = it.opts.multipleOfPrecision;
        const res = gen.let("res");
        const invalid = prec ? (0, codegen_1._)`Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}` : (0, codegen_1._)`${res} !== parseInt(${res})`;
        cxt.fail$data((0, codegen_1._)`(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);
    }
};
exports.default = def;

},{"f398ecd84b20a400":"9wlmn"}],"lNX5F":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const codegen_1 = require("4968f787adbf82e3");
const util_1 = require("78694b7562e4dec7");
const ucs2length_1 = require("b64e80003c676177");
const error = {
    message ({ keyword, schemaCode }) {
        const comp = keyword === "maxLength" ? "more" : "fewer";
        return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} characters`;
    },
    params: ({ schemaCode })=>(0, codegen_1._)`{limit: ${schemaCode}}`
};
const def = {
    keyword: [
        "maxLength",
        "minLength"
    ],
    type: "string",
    schemaType: "number",
    $data: true,
    error,
    code (cxt) {
        const { keyword, data, schemaCode, it } = cxt;
        const op = keyword === "maxLength" ? codegen_1.operators.GT : codegen_1.operators.LT;
        const len = it.opts.unicode === false ? (0, codegen_1._)`${data}.length` : (0, codegen_1._)`${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;
        cxt.fail$data((0, codegen_1._)`${len} ${op} ${schemaCode}`);
    }
};
exports.default = def;

},{"4968f787adbf82e3":"9wlmn","78694b7562e4dec7":"7vNtM","b64e80003c676177":"1TcP7"}],"1TcP7":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
// https://mathiasbynens.be/notes/javascript-encoding
// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
function ucs2length(str) {
    const len = str.length;
    let length = 0;
    let pos = 0;
    let value;
    while(pos < len){
        length++;
        value = str.charCodeAt(pos++);
        if (value >= 0xd800 && value <= 0xdbff && pos < len) {
            // high surrogate, and there is a next character
            value = str.charCodeAt(pos);
            if ((value & 0xfc00) === 0xdc00) pos++; // low surrogate
        }
    }
    return length;
}
exports.default = ucs2length;
ucs2length.code = 'require("ajv/dist/runtime/ucs2length").default';

},{}],"hvE9M":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const code_1 = require("6423c5f9606c4253");
const codegen_1 = require("c67e4d0ce9d0e145");
const error = {
    message: ({ schemaCode })=>(0, codegen_1.str)`must match pattern "${schemaCode}"`,
    params: ({ schemaCode })=>(0, codegen_1._)`{pattern: ${schemaCode}}`
};
const def = {
    keyword: "pattern",
    type: "string",
    schemaType: "string",
    $data: true,
    error,
    code (cxt) {
        const { data, $data, schema, schemaCode, it } = cxt;
        // TODO regexp should be wrapped in try/catchs
        const u = it.opts.unicodeRegExp ? "u" : "";
        const regExp = $data ? (0, codegen_1._)`(new RegExp(${schemaCode}, ${u}))` : (0, code_1.usePattern)(cxt, schema);
        cxt.fail$data((0, codegen_1._)`!${regExp}.test(${data})`);
    }
};
exports.default = def;

},{"6423c5f9606c4253":"fSuab","c67e4d0ce9d0e145":"9wlmn"}],"f2icq":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const codegen_1 = require("717f2905edcd1d4b");
const error = {
    message ({ keyword, schemaCode }) {
        const comp = keyword === "maxProperties" ? "more" : "fewer";
        return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} properties`;
    },
    params: ({ schemaCode })=>(0, codegen_1._)`{limit: ${schemaCode}}`
};
const def = {
    keyword: [
        "maxProperties",
        "minProperties"
    ],
    type: "object",
    schemaType: "number",
    $data: true,
    error,
    code (cxt) {
        const { keyword, data, schemaCode } = cxt;
        const op = keyword === "maxProperties" ? codegen_1.operators.GT : codegen_1.operators.LT;
        cxt.fail$data((0, codegen_1._)`Object.keys(${data}).length ${op} ${schemaCode}`);
    }
};
exports.default = def;

},{"717f2905edcd1d4b":"9wlmn"}],"eX2Jw":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const code_1 = require("8116de00ceb2e17c");
const codegen_1 = require("8c79527b91c9aa24");
const util_1 = require("4644f2feebf1f3d7");
const error = {
    message: ({ params: { missingProperty } })=>(0, codegen_1.str)`must have required property '${missingProperty}'`,
    params: ({ params: { missingProperty } })=>(0, codegen_1._)`{missingProperty: ${missingProperty}}`
};
const def = {
    keyword: "required",
    type: "object",
    schemaType: "array",
    $data: true,
    error,
    code (cxt) {
        const { gen, schema, schemaCode, data, $data, it } = cxt;
        const { opts } = it;
        if (!$data && schema.length === 0) return;
        const useLoop = schema.length >= opts.loopRequired;
        if (it.allErrors) allErrorsMode();
        else exitOnErrorMode();
        if (opts.strictRequired) {
            const props = cxt.parentSchema.properties;
            const { definedProperties } = cxt.it;
            for (const requiredKey of schema)if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === undefined && !definedProperties.has(requiredKey)) {
                const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
                const msg = `required property "${requiredKey}" is not defined at "${schemaPath}" (strictRequired)`;
                (0, util_1.checkStrictMode)(it, msg, it.opts.strictRequired);
            }
        }
        function allErrorsMode() {
            if (useLoop || $data) cxt.block$data(codegen_1.nil, loopAllRequired);
            else for (const prop of schema)(0, code_1.checkReportMissingProp)(cxt, prop);
        }
        function exitOnErrorMode() {
            const missing = gen.let("missing");
            if (useLoop || $data) {
                const valid = gen.let("valid", true);
                cxt.block$data(valid, ()=>loopUntilMissing(missing, valid));
                cxt.ok(valid);
            } else {
                gen.if((0, code_1.checkMissingProp)(cxt, schema, missing));
                (0, code_1.reportMissingProp)(cxt, missing);
                gen.else();
            }
        }
        function loopAllRequired() {
            gen.forOf("prop", schemaCode, (prop)=>{
                cxt.setParams({
                    missingProperty: prop
                });
                gen.if((0, code_1.noPropertyInData)(gen, data, prop, opts.ownProperties), ()=>cxt.error());
            });
        }
        function loopUntilMissing(missing, valid) {
            cxt.setParams({
                missingProperty: missing
            });
            gen.forOf(missing, schemaCode, ()=>{
                gen.assign(valid, (0, code_1.propertyInData)(gen, data, missing, opts.ownProperties));
                gen.if((0, codegen_1.not)(valid), ()=>{
                    cxt.error();
                    gen.break();
                });
            }, codegen_1.nil);
        }
    }
};
exports.default = def;

},{"8116de00ceb2e17c":"fSuab","8c79527b91c9aa24":"9wlmn","4644f2feebf1f3d7":"7vNtM"}],"6U3a8":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const codegen_1 = require("8bf6dd0bbe5ea2bf");
const error = {
    message ({ keyword, schemaCode }) {
        const comp = keyword === "maxItems" ? "more" : "fewer";
        return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} items`;
    },
    params: ({ schemaCode })=>(0, codegen_1._)`{limit: ${schemaCode}}`
};
const def = {
    keyword: [
        "maxItems",
        "minItems"
    ],
    type: "array",
    schemaType: "number",
    $data: true,
    error,
    code (cxt) {
        const { keyword, data, schemaCode } = cxt;
        const op = keyword === "maxItems" ? codegen_1.operators.GT : codegen_1.operators.LT;
        cxt.fail$data((0, codegen_1._)`${data}.length ${op} ${schemaCode}`);
    }
};
exports.default = def;

},{"8bf6dd0bbe5ea2bf":"9wlmn"}],"a7cCL":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const dataType_1 = require("ed18d6a195747bcd");
const codegen_1 = require("59db147f18482486");
const util_1 = require("498e1140d56af1ce");
const equal_1 = require("4ac1230a4bed5e97");
const error = {
    message: ({ params: { i, j } })=>(0, codegen_1.str)`must NOT have duplicate items (items ## ${j} and ${i} are identical)`,
    params: ({ params: { i, j } })=>(0, codegen_1._)`{i: ${i}, j: ${j}}`
};
const def = {
    keyword: "uniqueItems",
    type: "array",
    schemaType: "boolean",
    $data: true,
    error,
    code (cxt) {
        const { gen, data, $data, schema, parentSchema, schemaCode, it } = cxt;
        if (!$data && !schema) return;
        const valid = gen.let("valid");
        const itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];
        cxt.block$data(valid, validateUniqueItems, (0, codegen_1._)`${schemaCode} === false`);
        cxt.ok(valid);
        function validateUniqueItems() {
            const i = gen.let("i", (0, codegen_1._)`${data}.length`);
            const j = gen.let("j");
            cxt.setParams({
                i,
                j
            });
            gen.assign(valid, true);
            gen.if((0, codegen_1._)`${i} > 1`, ()=>(canOptimize() ? loopN : loopN2)(i, j));
        }
        function canOptimize() {
            return itemTypes.length > 0 && !itemTypes.some((t)=>t === "object" || t === "array");
        }
        function loopN(i, j) {
            const item = gen.name("item");
            const wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);
            const indices = gen.const("indices", (0, codegen_1._)`{}`);
            gen.for((0, codegen_1._)`;${i}--;`, ()=>{
                gen.let(item, (0, codegen_1._)`${data}[${i}]`);
                gen.if(wrongType, (0, codegen_1._)`continue`);
                if (itemTypes.length > 1) gen.if((0, codegen_1._)`typeof ${item} == "string"`, (0, codegen_1._)`${item} += "_"`);
                gen.if((0, codegen_1._)`typeof ${indices}[${item}] == "number"`, ()=>{
                    gen.assign(j, (0, codegen_1._)`${indices}[${item}]`);
                    cxt.error();
                    gen.assign(valid, false).break();
                }).code((0, codegen_1._)`${indices}[${item}] = ${i}`);
            });
        }
        function loopN2(i, j) {
            const eql = (0, util_1.useFunc)(gen, equal_1.default);
            const outer = gen.name("outer");
            gen.label(outer).for((0, codegen_1._)`;${i}--;`, ()=>gen.for((0, codegen_1._)`${j} = ${i}; ${j}--;`, ()=>gen.if((0, codegen_1._)`${eql}(${data}[${i}], ${data}[${j}])`, ()=>{
                        cxt.error();
                        gen.assign(valid, false).break(outer);
                    })));
        }
    }
};
exports.default = def;

},{"ed18d6a195747bcd":"iSvmi","59db147f18482486":"9wlmn","498e1140d56af1ce":"7vNtM","4ac1230a4bed5e97":"irNEA"}],"irNEA":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
// https://github.com/ajv-validator/ajv/issues/889
const equal = require("d2bcd64c511fbbef");
equal.code = 'require("ajv/dist/runtime/equal").default';
exports.default = equal;

},{"d2bcd64c511fbbef":"ixZYU"}],"6HlYe":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const codegen_1 = require("8fa4a24917fa8620");
const util_1 = require("c4ea43af4f833fd0");
const equal_1 = require("4c12131dd960a69d");
const error = {
    message: "must be equal to constant",
    params: ({ schemaCode })=>(0, codegen_1._)`{allowedValue: ${schemaCode}}`
};
const def = {
    keyword: "const",
    $data: true,
    error,
    code (cxt) {
        const { gen, data, $data, schemaCode, schema } = cxt;
        if ($data || schema && typeof schema == "object") cxt.fail$data((0, codegen_1._)`!${(0, util_1.useFunc)(gen, equal_1.default)}(${data}, ${schemaCode})`);
        else cxt.fail((0, codegen_1._)`${schema} !== ${data}`);
    }
};
exports.default = def;

},{"8fa4a24917fa8620":"9wlmn","c4ea43af4f833fd0":"7vNtM","4c12131dd960a69d":"irNEA"}],"8FtQO":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const codegen_1 = require("8ec7518cb324f27e");
const util_1 = require("39b1cf68009dfa22");
const equal_1 = require("10c2bc8aede4ad0d");
const error = {
    message: "must be equal to one of the allowed values",
    params: ({ schemaCode })=>(0, codegen_1._)`{allowedValues: ${schemaCode}}`
};
const def = {
    keyword: "enum",
    schemaType: "array",
    $data: true,
    error,
    code (cxt) {
        const { gen, data, $data, schema, schemaCode, it } = cxt;
        if (!$data && schema.length === 0) throw new Error("enum must have non-empty array");
        const useLoop = schema.length >= it.opts.loopEnum;
        let eql;
        const getEql = ()=>eql !== null && eql !== void 0 ? eql : eql = (0, util_1.useFunc)(gen, equal_1.default);
        let valid;
        if (useLoop || $data) {
            valid = gen.let("valid");
            cxt.block$data(valid, loopEnum);
        } else {
            /* istanbul ignore if */ if (!Array.isArray(schema)) throw new Error("ajv implementation error");
            const vSchema = gen.const("vSchema", schemaCode);
            valid = (0, codegen_1.or)(...schema.map((_x, i)=>equalCode(vSchema, i)));
        }
        cxt.pass(valid);
        function loopEnum() {
            gen.assign(valid, false);
            gen.forOf("v", schemaCode, (v)=>gen.if((0, codegen_1._)`${getEql()}(${data}, ${v})`, ()=>gen.assign(valid, true).break()));
        }
        function equalCode(vSchema, i) {
            const sch = schema[i];
            return typeof sch === "object" && sch !== null ? (0, codegen_1._)`${getEql()}(${data}, ${vSchema}[${i}])` : (0, codegen_1._)`${data} === ${sch}`;
        }
    }
};
exports.default = def;

},{"8ec7518cb324f27e":"9wlmn","39b1cf68009dfa22":"7vNtM","10c2bc8aede4ad0d":"irNEA"}],"1oVEW":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const additionalItems_1 = require("852ecdb59a1c7f37");
const prefixItems_1 = require("df3c3ff1822476c2");
const items_1 = require("f9f856923d6846d7");
const items2020_1 = require("41bc048b170c0123");
const contains_1 = require("4858cbd3be266c5b");
const dependencies_1 = require("e0d2483cbd78911");
const propertyNames_1 = require("5699fcf3532a8e6");
const additionalProperties_1 = require("7d87cea7a44d8ef7");
const properties_1 = require("ce6cdda651f72186");
const patternProperties_1 = require("ead3f0c5b555155e");
const not_1 = require("94b5a3265efdbfcb");
const anyOf_1 = require("563f9088d71dbdc9");
const oneOf_1 = require("c21d69c42fd736c4");
const allOf_1 = require("2ff5e3cd187ba6ce");
const if_1 = require("24b31258da87b1d9");
const thenElse_1 = require("f656ec3d192aed31");
function getApplicator(draft2020 = false) {
    const applicator = [
        // any
        not_1.default,
        anyOf_1.default,
        oneOf_1.default,
        allOf_1.default,
        if_1.default,
        thenElse_1.default,
        // object
        propertyNames_1.default,
        additionalProperties_1.default,
        dependencies_1.default,
        properties_1.default,
        patternProperties_1.default
    ];
    // array
    if (draft2020) applicator.push(prefixItems_1.default, items2020_1.default);
    else applicator.push(additionalItems_1.default, items_1.default);
    applicator.push(contains_1.default);
    return applicator;
}
exports.default = getApplicator;

},{"852ecdb59a1c7f37":"4Axsr","df3c3ff1822476c2":"cmAsl","f9f856923d6846d7":"lLXqY","41bc048b170c0123":"iecHW","4858cbd3be266c5b":"iD9au","e0d2483cbd78911":"7hNHk","5699fcf3532a8e6":"4cv2D","7d87cea7a44d8ef7":"7t8Oj","ce6cdda651f72186":"8RDRm","ead3f0c5b555155e":"7Iq45","94b5a3265efdbfcb":"216lk","563f9088d71dbdc9":"jHdK7","c21d69c42fd736c4":"20s2r","2ff5e3cd187ba6ce":"fKxPA","24b31258da87b1d9":"dSqWi","f656ec3d192aed31":"g8JJL"}],"4Axsr":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.validateAdditionalItems = void 0;
const codegen_1 = require("eb920d79977d5a0c");
const util_1 = require("1dd12bfced7c65d9");
const error = {
    message: ({ params: { len } })=>(0, codegen_1.str)`must NOT have more than ${len} items`,
    params: ({ params: { len } })=>(0, codegen_1._)`{limit: ${len}}`
};
const def = {
    keyword: "additionalItems",
    type: "array",
    schemaType: [
        "boolean",
        "object"
    ],
    before: "uniqueItems",
    error,
    code (cxt) {
        const { parentSchema, it } = cxt;
        const { items } = parentSchema;
        if (!Array.isArray(items)) {
            (0, util_1.checkStrictMode)(it, '"additionalItems" is ignored when "items" is not an array of schemas');
            return;
        }
        validateAdditionalItems(cxt, items);
    }
};
function validateAdditionalItems(cxt, items) {
    const { gen, schema, data, keyword, it } = cxt;
    it.items = true;
    const len = gen.const("len", (0, codegen_1._)`${data}.length`);
    if (schema === false) {
        cxt.setParams({
            len: items.length
        });
        cxt.pass((0, codegen_1._)`${len} <= ${items.length}`);
    } else if (typeof schema == "object" && !(0, util_1.alwaysValidSchema)(it, schema)) {
        const valid = gen.var("valid", (0, codegen_1._)`${len} <= ${items.length}`); // TODO var
        gen.if((0, codegen_1.not)(valid), ()=>validateItems(valid));
        cxt.ok(valid);
    }
    function validateItems(valid) {
        gen.forRange("i", items.length, len, (i)=>{
            cxt.subschema({
                keyword,
                dataProp: i,
                dataPropType: util_1.Type.Num
            }, valid);
            if (!it.allErrors) gen.if((0, codegen_1.not)(valid), ()=>gen.break());
        });
    }
}
exports.validateAdditionalItems = validateAdditionalItems;
exports.default = def;

},{"eb920d79977d5a0c":"9wlmn","1dd12bfced7c65d9":"7vNtM"}],"cmAsl":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const items_1 = require("6693fcd262f960ad");
const def = {
    keyword: "prefixItems",
    type: "array",
    schemaType: [
        "array"
    ],
    before: "uniqueItems",
    code: (cxt)=>(0, items_1.validateTuple)(cxt, "items")
};
exports.default = def;

},{"6693fcd262f960ad":"lLXqY"}],"lLXqY":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.validateTuple = void 0;
const codegen_1 = require("4c4c4ade5ab2262f");
const util_1 = require("892bb718945120f3");
const code_1 = require("31b7fa79ab304a2f");
const def = {
    keyword: "items",
    type: "array",
    schemaType: [
        "object",
        "array",
        "boolean"
    ],
    before: "uniqueItems",
    code (cxt) {
        const { schema, it } = cxt;
        if (Array.isArray(schema)) return validateTuple(cxt, "additionalItems", schema);
        it.items = true;
        if ((0, util_1.alwaysValidSchema)(it, schema)) return;
        cxt.ok((0, code_1.validateArray)(cxt));
    }
};
function validateTuple(cxt, extraItems, schArr = cxt.schema) {
    const { gen, parentSchema, data, keyword, it } = cxt;
    checkStrictTuple(parentSchema);
    if (it.opts.unevaluated && schArr.length && it.items !== true) it.items = util_1.mergeEvaluated.items(gen, schArr.length, it.items);
    const valid = gen.name("valid");
    const len = gen.const("len", (0, codegen_1._)`${data}.length`);
    schArr.forEach((sch, i)=>{
        if ((0, util_1.alwaysValidSchema)(it, sch)) return;
        gen.if((0, codegen_1._)`${len} > ${i}`, ()=>cxt.subschema({
                keyword,
                schemaProp: i,
                dataProp: i
            }, valid));
        cxt.ok(valid);
    });
    function checkStrictTuple(sch) {
        const { opts, errSchemaPath } = it;
        const l = schArr.length;
        const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);
        if (opts.strictTuples && !fullTuple) {
            const msg = `"${keyword}" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path "${errSchemaPath}"`;
            (0, util_1.checkStrictMode)(it, msg, opts.strictTuples);
        }
    }
}
exports.validateTuple = validateTuple;
exports.default = def;

},{"4c4c4ade5ab2262f":"9wlmn","892bb718945120f3":"7vNtM","31b7fa79ab304a2f":"fSuab"}],"iecHW":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const codegen_1 = require("5557b85368f11dc8");
const util_1 = require("251bc8960022628");
const code_1 = require("19c76f7b8b158257");
const additionalItems_1 = require("8a1f5b42b3c3a3e8");
const error = {
    message: ({ params: { len } })=>(0, codegen_1.str)`must NOT have more than ${len} items`,
    params: ({ params: { len } })=>(0, codegen_1._)`{limit: ${len}}`
};
const def = {
    keyword: "items",
    type: "array",
    schemaType: [
        "object",
        "boolean"
    ],
    before: "uniqueItems",
    error,
    code (cxt) {
        const { schema, parentSchema, it } = cxt;
        const { prefixItems } = parentSchema;
        it.items = true;
        if ((0, util_1.alwaysValidSchema)(it, schema)) return;
        if (prefixItems) (0, additionalItems_1.validateAdditionalItems)(cxt, prefixItems);
        else cxt.ok((0, code_1.validateArray)(cxt));
    }
};
exports.default = def;

},{"5557b85368f11dc8":"9wlmn","251bc8960022628":"7vNtM","19c76f7b8b158257":"fSuab","8a1f5b42b3c3a3e8":"4Axsr"}],"iD9au":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const codegen_1 = require("2321a147ffbf5137");
const util_1 = require("fe1a6ecfd865147e");
const error = {
    message: ({ params: { min, max } })=>max === undefined ? (0, codegen_1.str)`must contain at least ${min} valid item(s)` : (0, codegen_1.str)`must contain at least ${min} and no more than ${max} valid item(s)`,
    params: ({ params: { min, max } })=>max === undefined ? (0, codegen_1._)`{minContains: ${min}}` : (0, codegen_1._)`{minContains: ${min}, maxContains: ${max}}`
};
const def = {
    keyword: "contains",
    type: "array",
    schemaType: [
        "object",
        "boolean"
    ],
    before: "uniqueItems",
    trackErrors: true,
    error,
    code (cxt) {
        const { gen, schema, parentSchema, data, it } = cxt;
        let min;
        let max;
        const { minContains, maxContains } = parentSchema;
        if (it.opts.next) {
            min = minContains === undefined ? 1 : minContains;
            max = maxContains;
        } else min = 1;
        const len = gen.const("len", (0, codegen_1._)`${data}.length`);
        cxt.setParams({
            min,
            max
        });
        if (max === undefined && min === 0) {
            (0, util_1.checkStrictMode)(it, `"minContains" == 0 without "maxContains": "contains" keyword ignored`);
            return;
        }
        if (max !== undefined && min > max) {
            (0, util_1.checkStrictMode)(it, `"minContains" > "maxContains" is always invalid`);
            cxt.fail();
            return;
        }
        if ((0, util_1.alwaysValidSchema)(it, schema)) {
            let cond = (0, codegen_1._)`${len} >= ${min}`;
            if (max !== undefined) cond = (0, codegen_1._)`${cond} && ${len} <= ${max}`;
            cxt.pass(cond);
            return;
        }
        it.items = true;
        const valid = gen.name("valid");
        if (max === undefined && min === 1) validateItems(valid, ()=>gen.if(valid, ()=>gen.break()));
        else if (min === 0) {
            gen.let(valid, true);
            if (max !== undefined) gen.if((0, codegen_1._)`${data}.length > 0`, validateItemsWithCount);
        } else {
            gen.let(valid, false);
            validateItemsWithCount();
        }
        cxt.result(valid, ()=>cxt.reset());
        function validateItemsWithCount() {
            const schValid = gen.name("_valid");
            const count = gen.let("count", 0);
            validateItems(schValid, ()=>gen.if(schValid, ()=>checkLimits(count)));
        }
        function validateItems(_valid, block) {
            gen.forRange("i", 0, len, (i)=>{
                cxt.subschema({
                    keyword: "contains",
                    dataProp: i,
                    dataPropType: util_1.Type.Num,
                    compositeRule: true
                }, _valid);
                block();
            });
        }
        function checkLimits(count) {
            gen.code((0, codegen_1._)`${count}++`);
            if (max === undefined) gen.if((0, codegen_1._)`${count} >= ${min}`, ()=>gen.assign(valid, true).break());
            else {
                gen.if((0, codegen_1._)`${count} > ${max}`, ()=>gen.assign(valid, false).break());
                if (min === 1) gen.assign(valid, true);
                else gen.if((0, codegen_1._)`${count} >= ${min}`, ()=>gen.assign(valid, true));
            }
        }
    }
};
exports.default = def;

},{"2321a147ffbf5137":"9wlmn","fe1a6ecfd865147e":"7vNtM"}],"7hNHk":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;
const codegen_1 = require("2c9520ddb7668753");
const util_1 = require("8cb82fc3be8f4c85");
const code_1 = require("294e23f220ec6a41");
exports.error = {
    message: ({ params: { property, depsCount, deps } })=>{
        const property_ies = depsCount === 1 ? "property" : "properties";
        return (0, codegen_1.str)`must have ${property_ies} ${deps} when property ${property} is present`;
    },
    params: ({ params: { property, depsCount, deps, missingProperty } })=>(0, codegen_1._)`{property: ${property},
    missingProperty: ${missingProperty},
    depsCount: ${depsCount},
    deps: ${deps}}`
};
const def = {
    keyword: "dependencies",
    type: "object",
    schemaType: "object",
    error: exports.error,
    code (cxt) {
        const [propDeps, schDeps] = splitDependencies(cxt);
        validatePropertyDeps(cxt, propDeps);
        validateSchemaDeps(cxt, schDeps);
    }
};
function splitDependencies({ schema }) {
    const propertyDeps = {};
    const schemaDeps = {};
    for(const key in schema){
        if (key === "__proto__") continue;
        const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;
        deps[key] = schema[key];
    }
    return [
        propertyDeps,
        schemaDeps
    ];
}
function validatePropertyDeps(cxt, propertyDeps = cxt.schema) {
    const { gen, data, it } = cxt;
    if (Object.keys(propertyDeps).length === 0) return;
    const missing = gen.let("missing");
    for(const prop in propertyDeps){
        const deps = propertyDeps[prop];
        if (deps.length === 0) continue;
        const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);
        cxt.setParams({
            property: prop,
            depsCount: deps.length,
            deps: deps.join(", ")
        });
        if (it.allErrors) gen.if(hasProperty, ()=>{
            for (const depProp of deps)(0, code_1.checkReportMissingProp)(cxt, depProp);
        });
        else {
            gen.if((0, codegen_1._)`${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);
            (0, code_1.reportMissingProp)(cxt, missing);
            gen.else();
        }
    }
}
exports.validatePropertyDeps = validatePropertyDeps;
function validateSchemaDeps(cxt, schemaDeps = cxt.schema) {
    const { gen, data, keyword, it } = cxt;
    const valid = gen.name("valid");
    for(const prop in schemaDeps){
        if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop])) continue;
        gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), ()=>{
            const schCxt = cxt.subschema({
                keyword,
                schemaProp: prop
            }, valid);
            cxt.mergeValidEvaluated(schCxt, valid);
        }, ()=>gen.var(valid, true) // TODO var
        );
        cxt.ok(valid);
    }
}
exports.validateSchemaDeps = validateSchemaDeps;
exports.default = def;

},{"2c9520ddb7668753":"9wlmn","8cb82fc3be8f4c85":"7vNtM","294e23f220ec6a41":"fSuab"}],"4cv2D":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const codegen_1 = require("e22ae7089ab50628");
const util_1 = require("6845a7aec2d16d80");
const error = {
    message: "property name must be valid",
    params: ({ params })=>(0, codegen_1._)`{propertyName: ${params.propertyName}}`
};
const def = {
    keyword: "propertyNames",
    type: "object",
    schemaType: [
        "object",
        "boolean"
    ],
    error,
    code (cxt) {
        const { gen, schema, data, it } = cxt;
        if ((0, util_1.alwaysValidSchema)(it, schema)) return;
        const valid = gen.name("valid");
        gen.forIn("key", data, (key)=>{
            cxt.setParams({
                propertyName: key
            });
            cxt.subschema({
                keyword: "propertyNames",
                data: key,
                dataTypes: [
                    "string"
                ],
                propertyName: key,
                compositeRule: true
            }, valid);
            gen.if((0, codegen_1.not)(valid), ()=>{
                cxt.error(true);
                if (!it.allErrors) gen.break();
            });
        });
        cxt.ok(valid);
    }
};
exports.default = def;

},{"e22ae7089ab50628":"9wlmn","6845a7aec2d16d80":"7vNtM"}],"7t8Oj":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const code_1 = require("8bf946811345dd52");
const codegen_1 = require("94acb9afd0a38d");
const names_1 = require("12d5afb68c79d933");
const util_1 = require("431cae49e29b7ef5");
const error = {
    message: "must NOT have additional properties",
    params: ({ params })=>(0, codegen_1._)`{additionalProperty: ${params.additionalProperty}}`
};
const def = {
    keyword: "additionalProperties",
    type: [
        "object"
    ],
    schemaType: [
        "boolean",
        "object"
    ],
    allowUndefined: true,
    trackErrors: true,
    error,
    code (cxt) {
        const { gen, schema, parentSchema, data, errsCount, it } = cxt;
        /* istanbul ignore if */ if (!errsCount) throw new Error("ajv implementation error");
        const { allErrors, opts } = it;
        it.props = true;
        if (opts.removeAdditional !== "all" && (0, util_1.alwaysValidSchema)(it, schema)) return;
        const props = (0, code_1.allSchemaProperties)(parentSchema.properties);
        const patProps = (0, code_1.allSchemaProperties)(parentSchema.patternProperties);
        checkAdditionalProperties();
        cxt.ok((0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
        function checkAdditionalProperties() {
            gen.forIn("key", data, (key)=>{
                if (!props.length && !patProps.length) additionalPropertyCode(key);
                else gen.if(isAdditional(key), ()=>additionalPropertyCode(key));
            });
        }
        function isAdditional(key) {
            let definedProp;
            if (props.length > 8) {
                // TODO maybe an option instead of hard-coded 8?
                const propsSchema = (0, util_1.schemaRefOrVal)(it, parentSchema.properties, "properties");
                definedProp = (0, code_1.isOwnProperty)(gen, propsSchema, key);
            } else if (props.length) definedProp = (0, codegen_1.or)(...props.map((p)=>(0, codegen_1._)`${key} === ${p}`));
            else definedProp = codegen_1.nil;
            if (patProps.length) definedProp = (0, codegen_1.or)(definedProp, ...patProps.map((p)=>(0, codegen_1._)`${(0, code_1.usePattern)(cxt, p)}.test(${key})`));
            return (0, codegen_1.not)(definedProp);
        }
        function deleteAdditional(key) {
            gen.code((0, codegen_1._)`delete ${data}[${key}]`);
        }
        function additionalPropertyCode(key) {
            if (opts.removeAdditional === "all" || opts.removeAdditional && schema === false) {
                deleteAdditional(key);
                return;
            }
            if (schema === false) {
                cxt.setParams({
                    additionalProperty: key
                });
                cxt.error();
                if (!allErrors) gen.break();
                return;
            }
            if (typeof schema == "object" && !(0, util_1.alwaysValidSchema)(it, schema)) {
                const valid = gen.name("valid");
                if (opts.removeAdditional === "failing") {
                    applyAdditionalSchema(key, valid, false);
                    gen.if((0, codegen_1.not)(valid), ()=>{
                        cxt.reset();
                        deleteAdditional(key);
                    });
                } else {
                    applyAdditionalSchema(key, valid);
                    if (!allErrors) gen.if((0, codegen_1.not)(valid), ()=>gen.break());
                }
            }
        }
        function applyAdditionalSchema(key, valid, errors) {
            const subschema = {
                keyword: "additionalProperties",
                dataProp: key,
                dataPropType: util_1.Type.Str
            };
            if (errors === false) Object.assign(subschema, {
                compositeRule: true,
                createErrors: false,
                allErrors: false
            });
            cxt.subschema(subschema, valid);
        }
    }
};
exports.default = def;

},{"8bf946811345dd52":"fSuab","94acb9afd0a38d":"9wlmn","12d5afb68c79d933":"jxdzO","431cae49e29b7ef5":"7vNtM"}],"8RDRm":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const validate_1 = require("ab627bdec169a4e1");
const code_1 = require("275f1f775c313f6b");
const util_1 = require("e244aaf97f728bb4");
const additionalProperties_1 = require("feedf7db6cffec15");
const def = {
    keyword: "properties",
    type: "object",
    schemaType: "object",
    code (cxt) {
        const { gen, schema, parentSchema, data, it } = cxt;
        if (it.opts.removeAdditional === "all" && parentSchema.additionalProperties === undefined) additionalProperties_1.default.code(new validate_1.KeywordCxt(it, additionalProperties_1.default, "additionalProperties"));
        const allProps = (0, code_1.allSchemaProperties)(schema);
        for (const prop of allProps)it.definedProperties.add(prop);
        if (it.opts.unevaluated && allProps.length && it.props !== true) it.props = util_1.mergeEvaluated.props(gen, (0, util_1.toHash)(allProps), it.props);
        const properties = allProps.filter((p)=>!(0, util_1.alwaysValidSchema)(it, schema[p]));
        if (properties.length === 0) return;
        const valid = gen.name("valid");
        for (const prop of properties){
            if (hasDefault(prop)) applyPropertySchema(prop);
            else {
                gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties));
                applyPropertySchema(prop);
                if (!it.allErrors) gen.else().var(valid, true);
                gen.endIf();
            }
            cxt.it.definedProperties.add(prop);
            cxt.ok(valid);
        }
        function hasDefault(prop) {
            return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== undefined;
        }
        function applyPropertySchema(prop) {
            cxt.subschema({
                keyword: "properties",
                schemaProp: prop,
                dataProp: prop
            }, valid);
        }
    }
};
exports.default = def;

},{"ab627bdec169a4e1":"bpnTE","275f1f775c313f6b":"fSuab","e244aaf97f728bb4":"7vNtM","feedf7db6cffec15":"7t8Oj"}],"7Iq45":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const code_1 = require("f8f8e6b0407fdd9d");
const codegen_1 = require("1b967c2cac1b0609");
const util_1 = require("7cbde610b4fe826");
const util_2 = require("7cbde610b4fe826");
const def = {
    keyword: "patternProperties",
    type: "object",
    schemaType: "object",
    code (cxt) {
        const { gen, schema, data, parentSchema, it } = cxt;
        const { opts } = it;
        const patterns = (0, code_1.allSchemaProperties)(schema);
        const alwaysValidPatterns = patterns.filter((p)=>(0, util_1.alwaysValidSchema)(it, schema[p]));
        if (patterns.length === 0 || alwaysValidPatterns.length === patterns.length && (!it.opts.unevaluated || it.props === true)) return;
        const checkProperties = opts.strictSchema && !opts.allowMatchingProperties && parentSchema.properties;
        const valid = gen.name("valid");
        if (it.props !== true && !(it.props instanceof codegen_1.Name)) it.props = (0, util_2.evaluatedPropsToName)(gen, it.props);
        const { props } = it;
        validatePatternProperties();
        function validatePatternProperties() {
            for (const pat of patterns){
                if (checkProperties) checkMatchingProperties(pat);
                if (it.allErrors) validateProperties(pat);
                else {
                    gen.var(valid, true); // TODO var
                    validateProperties(pat);
                    gen.if(valid);
                }
            }
        }
        function checkMatchingProperties(pat) {
            for(const prop in checkProperties)if (new RegExp(pat).test(prop)) (0, util_1.checkStrictMode)(it, `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`);
        }
        function validateProperties(pat) {
            gen.forIn("key", data, (key)=>{
                gen.if((0, codegen_1._)`${(0, code_1.usePattern)(cxt, pat)}.test(${key})`, ()=>{
                    const alwaysValid = alwaysValidPatterns.includes(pat);
                    if (!alwaysValid) cxt.subschema({
                        keyword: "patternProperties",
                        schemaProp: pat,
                        dataProp: key,
                        dataPropType: util_2.Type.Str
                    }, valid);
                    if (it.opts.unevaluated && props !== true) gen.assign((0, codegen_1._)`${props}[${key}]`, true);
                    else if (!alwaysValid && !it.allErrors) // can short-circuit if `unevaluatedProperties` is not supported (opts.next === false)
                    // or if all properties were evaluated (props === true)
                    gen.if((0, codegen_1.not)(valid), ()=>gen.break());
                });
            });
        }
    }
};
exports.default = def;

},{"f8f8e6b0407fdd9d":"fSuab","1b967c2cac1b0609":"9wlmn","7cbde610b4fe826":"7vNtM"}],"216lk":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const util_1 = require("321d2980c88a2039");
const def = {
    keyword: "not",
    schemaType: [
        "object",
        "boolean"
    ],
    trackErrors: true,
    code (cxt) {
        const { gen, schema, it } = cxt;
        if ((0, util_1.alwaysValidSchema)(it, schema)) {
            cxt.fail();
            return;
        }
        const valid = gen.name("valid");
        cxt.subschema({
            keyword: "not",
            compositeRule: true,
            createErrors: false,
            allErrors: false
        }, valid);
        cxt.failResult(valid, ()=>cxt.reset(), ()=>cxt.error());
    },
    error: {
        message: "must NOT be valid"
    }
};
exports.default = def;

},{"321d2980c88a2039":"7vNtM"}],"jHdK7":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const code_1 = require("5ca71c3dd49a479d");
const def = {
    keyword: "anyOf",
    schemaType: "array",
    trackErrors: true,
    code: code_1.validateUnion,
    error: {
        message: "must match a schema in anyOf"
    }
};
exports.default = def;

},{"5ca71c3dd49a479d":"fSuab"}],"20s2r":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const codegen_1 = require("a652e853645ba701");
const util_1 = require("29f5768d6c5f5eed");
const error = {
    message: "must match exactly one schema in oneOf",
    params: ({ params })=>(0, codegen_1._)`{passingSchemas: ${params.passing}}`
};
const def = {
    keyword: "oneOf",
    schemaType: "array",
    trackErrors: true,
    error,
    code (cxt) {
        const { gen, schema, parentSchema, it } = cxt;
        /* istanbul ignore if */ if (!Array.isArray(schema)) throw new Error("ajv implementation error");
        if (it.opts.discriminator && parentSchema.discriminator) return;
        const schArr = schema;
        const valid = gen.let("valid", false);
        const passing = gen.let("passing", null);
        const schValid = gen.name("_valid");
        cxt.setParams({
            passing
        });
        // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas
        gen.block(validateOneOf);
        cxt.result(valid, ()=>cxt.reset(), ()=>cxt.error(true));
        function validateOneOf() {
            schArr.forEach((sch, i)=>{
                let schCxt;
                if ((0, util_1.alwaysValidSchema)(it, sch)) gen.var(schValid, true);
                else schCxt = cxt.subschema({
                    keyword: "oneOf",
                    schemaProp: i,
                    compositeRule: true
                }, schValid);
                if (i > 0) gen.if((0, codegen_1._)`${schValid} && ${valid}`).assign(valid, false).assign(passing, (0, codegen_1._)`[${passing}, ${i}]`).else();
                gen.if(schValid, ()=>{
                    gen.assign(valid, true);
                    gen.assign(passing, i);
                    if (schCxt) cxt.mergeEvaluated(schCxt, codegen_1.Name);
                });
            });
        }
    }
};
exports.default = def;

},{"a652e853645ba701":"9wlmn","29f5768d6c5f5eed":"7vNtM"}],"fKxPA":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const util_1 = require("4e4e6d6b236c3461");
const def = {
    keyword: "allOf",
    schemaType: "array",
    code (cxt) {
        const { gen, schema, it } = cxt;
        /* istanbul ignore if */ if (!Array.isArray(schema)) throw new Error("ajv implementation error");
        const valid = gen.name("valid");
        schema.forEach((sch, i)=>{
            if ((0, util_1.alwaysValidSchema)(it, sch)) return;
            const schCxt = cxt.subschema({
                keyword: "allOf",
                schemaProp: i
            }, valid);
            cxt.ok(valid);
            cxt.mergeEvaluated(schCxt);
        });
    }
};
exports.default = def;

},{"4e4e6d6b236c3461":"7vNtM"}],"dSqWi":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const codegen_1 = require("1f1df645617c98a4");
const util_1 = require("389e0a8c918cc15");
const error = {
    message: ({ params })=>(0, codegen_1.str)`must match "${params.ifClause}" schema`,
    params: ({ params })=>(0, codegen_1._)`{failingKeyword: ${params.ifClause}}`
};
const def = {
    keyword: "if",
    schemaType: [
        "object",
        "boolean"
    ],
    trackErrors: true,
    error,
    code (cxt) {
        const { gen, parentSchema, it } = cxt;
        if (parentSchema.then === undefined && parentSchema.else === undefined) (0, util_1.checkStrictMode)(it, '"if" without "then" and "else" is ignored');
        const hasThen = hasSchema(it, "then");
        const hasElse = hasSchema(it, "else");
        if (!hasThen && !hasElse) return;
        const valid = gen.let("valid", true);
        const schValid = gen.name("_valid");
        validateIf();
        cxt.reset();
        if (hasThen && hasElse) {
            const ifClause = gen.let("ifClause");
            cxt.setParams({
                ifClause
            });
            gen.if(schValid, validateClause("then", ifClause), validateClause("else", ifClause));
        } else if (hasThen) gen.if(schValid, validateClause("then"));
        else gen.if((0, codegen_1.not)(schValid), validateClause("else"));
        cxt.pass(valid, ()=>cxt.error(true));
        function validateIf() {
            const schCxt = cxt.subschema({
                keyword: "if",
                compositeRule: true,
                createErrors: false,
                allErrors: false
            }, schValid);
            cxt.mergeEvaluated(schCxt);
        }
        function validateClause(keyword, ifClause) {
            return ()=>{
                const schCxt = cxt.subschema({
                    keyword
                }, schValid);
                gen.assign(valid, schValid);
                cxt.mergeValidEvaluated(schCxt, valid);
                if (ifClause) gen.assign(ifClause, (0, codegen_1._)`${keyword}`);
                else cxt.setParams({
                    ifClause: keyword
                });
            };
        }
    }
};
function hasSchema(it, keyword) {
    const schema = it.schema[keyword];
    return schema !== undefined && !(0, util_1.alwaysValidSchema)(it, schema);
}
exports.default = def;

},{"1f1df645617c98a4":"9wlmn","389e0a8c918cc15":"7vNtM"}],"g8JJL":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const util_1 = require("52fed7dcddf6df58");
const def = {
    keyword: [
        "then",
        "else"
    ],
    schemaType: [
        "object",
        "boolean"
    ],
    code ({ keyword, parentSchema, it }) {
        if (parentSchema.if === undefined) (0, util_1.checkStrictMode)(it, `"${keyword}" without "if" is ignored`);
    }
};
exports.default = def;

},{"52fed7dcddf6df58":"7vNtM"}],"2jroQ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const format_1 = require("2deff6405afcac83");
const format = [
    format_1.default
];
exports.default = format;

},{"2deff6405afcac83":"1JUPc"}],"1JUPc":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const codegen_1 = require("a382a355cf5a78c5");
const error = {
    message: ({ schemaCode })=>(0, codegen_1.str)`must match format "${schemaCode}"`,
    params: ({ schemaCode })=>(0, codegen_1._)`{format: ${schemaCode}}`
};
const def = {
    keyword: "format",
    type: [
        "number",
        "string"
    ],
    schemaType: "string",
    $data: true,
    error,
    code (cxt, ruleType) {
        const { gen, data, $data, schema, schemaCode, it } = cxt;
        const { opts, errSchemaPath, schemaEnv, self } = it;
        if (!opts.validateFormats) return;
        if ($data) validate$DataFormat();
        else validateFormat();
        function validate$DataFormat() {
            const fmts = gen.scopeValue("formats", {
                ref: self.formats,
                code: opts.code.formats
            });
            const fDef = gen.const("fDef", (0, codegen_1._)`${fmts}[${schemaCode}]`);
            const fType = gen.let("fType");
            const format = gen.let("format");
            // TODO simplify
            gen.if((0, codegen_1._)`typeof ${fDef} == "object" && !(${fDef} instanceof RegExp)`, ()=>gen.assign(fType, (0, codegen_1._)`${fDef}.type || "string"`).assign(format, (0, codegen_1._)`${fDef}.validate`), ()=>gen.assign(fType, (0, codegen_1._)`"string"`).assign(format, fDef));
            cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));
            function unknownFmt() {
                if (opts.strictSchema === false) return codegen_1.nil;
                return (0, codegen_1._)`${schemaCode} && !${format}`;
            }
            function invalidFmt() {
                const callFormat = schemaEnv.$async ? (0, codegen_1._)`(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))` : (0, codegen_1._)`${format}(${data})`;
                const validData = (0, codegen_1._)`(typeof ${format} == "function" ? ${callFormat} : ${format}.test(${data}))`;
                return (0, codegen_1._)`${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;
            }
        }
        function validateFormat() {
            const formatDef = self.formats[schema];
            if (!formatDef) {
                unknownFormat();
                return;
            }
            if (formatDef === true) return;
            const [fmtType, format, fmtRef] = getFormat(formatDef);
            if (fmtType === ruleType) cxt.pass(validCondition());
            function unknownFormat() {
                if (opts.strictSchema === false) {
                    self.logger.warn(unknownMsg());
                    return;
                }
                throw new Error(unknownMsg());
                function unknownMsg() {
                    return `unknown format "${schema}" ignored in schema at path "${errSchemaPath}"`;
                }
            }
            function getFormat(fmtDef) {
                const code = fmtDef instanceof RegExp ? (0, codegen_1.regexpCode)(fmtDef) : opts.code.formats ? (0, codegen_1._)`${opts.code.formats}${(0, codegen_1.getProperty)(schema)}` : undefined;
                const fmt = gen.scopeValue("formats", {
                    key: schema,
                    ref: fmtDef,
                    code
                });
                if (typeof fmtDef == "object" && !(fmtDef instanceof RegExp)) return [
                    fmtDef.type || "string",
                    fmtDef.validate,
                    (0, codegen_1._)`${fmt}.validate`
                ];
                return [
                    "string",
                    fmtDef,
                    fmt
                ];
            }
            function validCondition() {
                if (typeof formatDef == "object" && !(formatDef instanceof RegExp) && formatDef.async) {
                    if (!schemaEnv.$async) throw new Error("async format in sync schema");
                    return (0, codegen_1._)`await ${fmtRef}(${data})`;
                }
                return typeof format == "function" ? (0, codegen_1._)`${fmtRef}(${data})` : (0, codegen_1._)`${fmtRef}.test(${data})`;
            }
        }
    }
};
exports.default = def;

},{"a382a355cf5a78c5":"9wlmn"}],"21ACk":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.contentVocabulary = exports.metadataVocabulary = void 0;
exports.metadataVocabulary = [
    "title",
    "description",
    "default",
    "deprecated",
    "readOnly",
    "writeOnly",
    "examples"
];
exports.contentVocabulary = [
    "contentMediaType",
    "contentEncoding",
    "contentSchema"
];

},{}],"k3AWl":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const codegen_1 = require("8118642cff1383ec");
const types_1 = require("ed348f6ae981731b");
const compile_1 = require("19cbb21371b9e8ba");
const ref_error_1 = require("19e9c6e270af4b01");
const util_1 = require("bbc8b0a18b75a1fa");
const error = {
    message: ({ params: { discrError, tagName } })=>discrError === types_1.DiscrError.Tag ? `tag "${tagName}" must be string` : `value of tag "${tagName}" must be in oneOf`,
    params: ({ params: { discrError, tag, tagName } })=>(0, codegen_1._)`{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`
};
const def = {
    keyword: "discriminator",
    type: "object",
    schemaType: "object",
    error,
    code (cxt) {
        const { gen, data, schema, parentSchema, it } = cxt;
        const { oneOf } = parentSchema;
        if (!it.opts.discriminator) throw new Error("discriminator: requires discriminator option");
        const tagName = schema.propertyName;
        if (typeof tagName != "string") throw new Error("discriminator: requires propertyName");
        if (schema.mapping) throw new Error("discriminator: mapping is not supported");
        if (!oneOf) throw new Error("discriminator: requires oneOf keyword");
        const valid = gen.let("valid", false);
        const tag = gen.const("tag", (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(tagName)}`);
        gen.if((0, codegen_1._)`typeof ${tag} == "string"`, ()=>validateMapping(), ()=>cxt.error(false, {
                discrError: types_1.DiscrError.Tag,
                tag,
                tagName
            }));
        cxt.ok(valid);
        function validateMapping() {
            const mapping = getMapping();
            gen.if(false);
            for(const tagValue in mapping){
                gen.elseIf((0, codegen_1._)`${tag} === ${tagValue}`);
                gen.assign(valid, applyTagSchema(mapping[tagValue]));
            }
            gen.else();
            cxt.error(false, {
                discrError: types_1.DiscrError.Mapping,
                tag,
                tagName
            });
            gen.endIf();
        }
        function applyTagSchema(schemaProp) {
            const _valid = gen.name("valid");
            const schCxt = cxt.subschema({
                keyword: "oneOf",
                schemaProp
            }, _valid);
            cxt.mergeEvaluated(schCxt, codegen_1.Name);
            return _valid;
        }
        function getMapping() {
            var _a;
            const oneOfMapping = {};
            const topRequired = hasRequired(parentSchema);
            let tagRequired = true;
            for(let i = 0; i < oneOf.length; i++){
                let sch = oneOf[i];
                if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1.schemaHasRulesButRef)(sch, it.self.RULES)) {
                    const ref = sch.$ref;
                    sch = compile_1.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, ref);
                    if (sch instanceof compile_1.SchemaEnv) sch = sch.schema;
                    if (sch === undefined) throw new ref_error_1.default(it.opts.uriResolver, it.baseId, ref);
                }
                const propSch = (_a = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a === void 0 ? void 0 : _a[tagName];
                if (typeof propSch != "object") throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${tagName}"`);
                tagRequired = tagRequired && (topRequired || hasRequired(sch));
                addMappings(propSch, i);
            }
            if (!tagRequired) throw new Error(`discriminator: "${tagName}" must be required`);
            return oneOfMapping;
            function hasRequired({ required }) {
                return Array.isArray(required) && required.includes(tagName);
            }
            function addMappings(sch, i) {
                if (sch.const) addMapping(sch.const, i);
                else if (sch.enum) for (const tagValue of sch.enum)addMapping(tagValue, i);
                else throw new Error(`discriminator: "properties/${tagName}" must have "const" or "enum"`);
            }
            function addMapping(tagValue, i) {
                if (typeof tagValue != "string" || tagValue in oneOfMapping) throw new Error(`discriminator: "${tagName}" values must be unique strings`);
                oneOfMapping[tagValue] = i;
            }
        }
    }
};
exports.default = def;

},{"8118642cff1383ec":"9wlmn","ed348f6ae981731b":"783FF","19cbb21371b9e8ba":"41z82","19e9c6e270af4b01":"khkIe","bbc8b0a18b75a1fa":"7vNtM"}],"783FF":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DiscrError = void 0;
var DiscrError;
(function(DiscrError) {
    DiscrError["Tag"] = "tag";
    DiscrError["Mapping"] = "mapping";
})(DiscrError || (exports.DiscrError = DiscrError = {}));

},{}],"k348E":[function(require,module,exports) {
module.exports = JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","$id":"http://json-schema.org/draft-07/schema#","title":"Core schema meta-schema","definitions":{"schemaArray":{"type":"array","minItems":1,"items":{"$ref":"#"}},"nonNegativeInteger":{"type":"integer","minimum":0},"nonNegativeIntegerDefault0":{"allOf":[{"$ref":"#/definitions/nonNegativeInteger"},{"default":0}]},"simpleTypes":{"enum":["array","boolean","integer","null","number","object","string"]},"stringArray":{"type":"array","items":{"type":"string"},"uniqueItems":true,"default":[]}},"type":["object","boolean"],"properties":{"$id":{"type":"string","format":"uri-reference"},"$schema":{"type":"string","format":"uri"},"$ref":{"type":"string","format":"uri-reference"},"$comment":{"type":"string"},"title":{"type":"string"},"description":{"type":"string"},"default":true,"readOnly":{"type":"boolean","default":false},"examples":{"type":"array","items":true},"multipleOf":{"type":"number","exclusiveMinimum":0},"maximum":{"type":"number"},"exclusiveMaximum":{"type":"number"},"minimum":{"type":"number"},"exclusiveMinimum":{"type":"number"},"maxLength":{"$ref":"#/definitions/nonNegativeInteger"},"minLength":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"pattern":{"type":"string","format":"regex"},"additionalItems":{"$ref":"#"},"items":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/schemaArray"}],"default":true},"maxItems":{"$ref":"#/definitions/nonNegativeInteger"},"minItems":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"uniqueItems":{"type":"boolean","default":false},"contains":{"$ref":"#"},"maxProperties":{"$ref":"#/definitions/nonNegativeInteger"},"minProperties":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"required":{"$ref":"#/definitions/stringArray"},"additionalProperties":{"$ref":"#"},"definitions":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"properties":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"patternProperties":{"type":"object","additionalProperties":{"$ref":"#"},"propertyNames":{"format":"regex"},"default":{}},"dependencies":{"type":"object","additionalProperties":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/stringArray"}]}},"propertyNames":{"$ref":"#"},"const":true,"enum":{"type":"array","items":true,"minItems":1,"uniqueItems":true},"type":{"anyOf":[{"$ref":"#/definitions/simpleTypes"},{"type":"array","items":{"$ref":"#/definitions/simpleTypes"},"minItems":1,"uniqueItems":true}]},"format":{"type":"string"},"contentMediaType":{"type":"string"},"contentEncoding":{"type":"string"},"if":{"$ref":"#"},"then":{"$ref":"#"},"else":{"$ref":"#"},"allOf":{"$ref":"#/definitions/schemaArray"},"anyOf":{"$ref":"#/definitions/schemaArray"},"oneOf":{"$ref":"#/definitions/schemaArray"},"not":{"$ref":"#"}},"default":true}');

},{}],"aiwRY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Handles workspace-related API requests.
 */ parcelHelpers.export(exports, "WorkspaceModel", ()=>WorkspaceModel);
var _slog = require("../slog");
var _validation = require("./Validation");
function cov_2ok47sa3jp() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/model/WorkspaceModel.ts";
    var hash = "83518e98e5bef3bf5030fa479d0d8487b21f37f6";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/model/WorkspaceModel.ts",
        statementMap: {
            "0": {
                start: {
                    line: 15,
                    column: 4
                },
                end: {
                    line: 15,
                    column: 25
                }
            },
            "1": {
                start: {
                    line: 26,
                    column: 4
                },
                end: {
                    line: 26,
                    column: 27
                }
            },
            "2": {
                start: {
                    line: 27,
                    column: 4
                },
                end: {
                    line: 43,
                    column: 9
                }
            },
            "3": {
                start: {
                    line: 35,
                    column: 8
                },
                end: {
                    line: 38,
                    column: 11
                }
            },
            "4": {
                start: {
                    line: 36,
                    column: 31
                },
                end: {
                    line: 36,
                    column: 51
                }
            },
            "5": {
                start: {
                    line: 37,
                    column: 10
                },
                end: {
                    line: 37,
                    column: 55
                }
            },
            "6": {
                start: {
                    line: 41,
                    column: 8
                },
                end: {
                    line: 41,
                    column: 56
                }
            },
            "7": {
                start: {
                    line: 42,
                    column: 8
                },
                end: {
                    line: 42,
                    column: 20
                }
            }
        },
        fnMap: {
            "0": {
                name: "(anonymous_0)",
                decl: {
                    start: {
                        line: 14,
                        column: 2
                    },
                    end: {
                        line: 14,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 14,
                        column: 30
                    },
                    end: {
                        line: 16,
                        column: 3
                    }
                },
                line: 14
            },
            "1": {
                name: "(anonymous_1)",
                decl: {
                    start: {
                        line: 25,
                        column: 2
                    },
                    end: {
                        line: 25,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 25,
                        column: 67
                    },
                    end: {
                        line: 44,
                        column: 3
                    }
                },
                line: 25
            },
            "2": {
                name: "(anonymous_2)",
                decl: {
                    start: {
                        line: 34,
                        column: 12
                    },
                    end: {
                        line: 34,
                        column: 13
                    }
                },
                loc: {
                    start: {
                        line: 34,
                        column: 37
                    },
                    end: {
                        line: 39,
                        column: 7
                    }
                },
                line: 34
            },
            "3": {
                name: "(anonymous_3)",
                decl: {
                    start: {
                        line: 35,
                        column: 28
                    },
                    end: {
                        line: 35,
                        column: 29
                    }
                },
                loc: {
                    start: {
                        line: 35,
                        column: 38
                    },
                    end: {
                        line: 38,
                        column: 9
                    }
                },
                line: 35
            },
            "4": {
                name: "(anonymous_4)",
                decl: {
                    start: {
                        line: 40,
                        column: 13
                    },
                    end: {
                        line: 40,
                        column: 14
                    }
                },
                loc: {
                    start: {
                        line: 40,
                        column: 24
                    },
                    end: {
                        line: 43,
                        column: 7
                    }
                },
                line: 40
            }
        },
        branchMap: {},
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0
        },
        f: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0
        },
        b: {},
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "83518e98e5bef3bf5030fa479d0d8487b21f37f6"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_2ok47sa3jp = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_2ok47sa3jp();
class WorkspaceModel {
    dbPath;
    /**
   * Initializes with the API endpoint for workspace data.
   * @param dbPath - The base API endpoint for workspace operations.
   */ constructor(dbPath){
        cov_2ok47sa3jp().f[0]++;
        cov_2ok47sa3jp().s[0]++;
        this.dbPath = dbPath;
    }
    /**
   *  Performs a GET DB request to retrieve the workspace data
   * @param authToken - The authentication token.
   * @returns Promise that resolves with the workspace data.
   * @throws Error if the request fails.
   * @throws Error if the response is not ok.
   */ async getWorkspaces(authToken) {
        cov_2ok47sa3jp().f[1]++;
        cov_2ok47sa3jp().s[1]++;
        (0, _slog.slog).info(this.dbPath);
        cov_2ok47sa3jp().s[2]++;
        return (0, _validation.typedFetch)(this.dbPath, (0, _validation.isPostArray), {
            method: "GET",
            headers: {
                Authorization: `Bearer ${authToken}`,
                accept: "application/json"
            }
        }).then((response)=>{
            cov_2ok47sa3jp().f[2]++;
            cov_2ok47sa3jp().s[3]++;
            return response.map((item)=>{
                cov_2ok47sa3jp().f[3]++;
                const pathSegments = (cov_2ok47sa3jp().s[4]++, item.path.split("/"));
                cov_2ok47sa3jp().s[5]++;
                return pathSegments[pathSegments.length - 1];
            });
        }).catch((error)=>{
            cov_2ok47sa3jp().f[4]++;
            cov_2ok47sa3jp().s[6]++;
            (0, _slog.slog).error("Error fetching workspaces:", error);
            cov_2ok47sa3jp().s[7]++;
            throw error;
        });
    }
}

},{"../slog":"jExiC","./Validation":"87EXf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7PeKs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Handles sidebar-related API requests for workspace collections.
 */ parcelHelpers.export(exports, "SidebarModel", ()=>SidebarModel);
var _slog = require("../slog");
var _validation = require("./Validation");
function cov_2kr69oy2c3() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/model/SidebarModel.ts";
    var hash = "a6bf0613974b03998b8dfc39f5a069b4fbbb089e";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/model/SidebarModel.ts",
        statementMap: {
            "0": {
                start: {
                    line: 15,
                    column: 4
                },
                end: {
                    line: 15,
                    column: 35
                }
            },
            "1": {
                start: {
                    line: 30,
                    column: 33
                },
                end: {
                    line: 30,
                    column: 62
                }
            },
            "2": {
                start: {
                    line: 31,
                    column: 16
                },
                end: {
                    line: 31,
                    column: 70
                }
            },
            "3": {
                start: {
                    line: 33,
                    column: 4
                },
                end: {
                    line: 51,
                    column: 9
                }
            },
            "4": {
                start: {
                    line: 41,
                    column: 8
                },
                end: {
                    line: 44,
                    column: 11
                }
            },
            "5": {
                start: {
                    line: 42,
                    column: 31
                },
                end: {
                    line: 42,
                    column: 51
                }
            },
            "6": {
                start: {
                    line: 43,
                    column: 10
                },
                end: {
                    line: 43,
                    column: 55
                }
            },
            "7": {
                start: {
                    line: 47,
                    column: 8
                },
                end: {
                    line: 47,
                    column: 69
                }
            },
            "8": {
                start: {
                    line: 48,
                    column: 8
                },
                end: {
                    line: 50,
                    column: 10
                }
            }
        },
        fnMap: {
            "0": {
                name: "(anonymous_0)",
                decl: {
                    start: {
                        line: 14,
                        column: 2
                    },
                    end: {
                        line: 14,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 14,
                        column: 35
                    },
                    end: {
                        line: 16,
                        column: 3
                    }
                },
                line: 14
            },
            "1": {
                name: "(anonymous_1)",
                decl: {
                    start: {
                        line: 26,
                        column: 2
                    },
                    end: {
                        line: 26,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 29,
                        column: 23
                    },
                    end: {
                        line: 52,
                        column: 3
                    }
                },
                line: 29
            },
            "2": {
                name: "(anonymous_2)",
                decl: {
                    start: {
                        line: 40,
                        column: 12
                    },
                    end: {
                        line: 40,
                        column: 13
                    }
                },
                loc: {
                    start: {
                        line: 40,
                        column: 37
                    },
                    end: {
                        line: 45,
                        column: 7
                    }
                },
                line: 40
            },
            "3": {
                name: "(anonymous_3)",
                decl: {
                    start: {
                        line: 41,
                        column: 28
                    },
                    end: {
                        line: 41,
                        column: 29
                    }
                },
                loc: {
                    start: {
                        line: 41,
                        column: 38
                    },
                    end: {
                        line: 44,
                        column: 9
                    }
                },
                line: 41
            },
            "4": {
                name: "(anonymous_4)",
                decl: {
                    start: {
                        line: 46,
                        column: 13
                    },
                    end: {
                        line: 46,
                        column: 14
                    }
                },
                loc: {
                    start: {
                        line: 46,
                        column: 24
                    },
                    end: {
                        line: 51,
                        column: 7
                    }
                },
                line: 46
            }
        },
        branchMap: {
            "0": {
                loc: {
                    start: {
                        line: 49,
                        column: 45
                    },
                    end: {
                        line: 49,
                        column: 67
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 49,
                            column: 45
                        },
                        end: {
                            line: 49,
                            column: 58
                        }
                    },
                    {
                        start: {
                            line: 49,
                            column: 62
                        },
                        end: {
                            line: 49,
                            column: 67
                        }
                    }
                ],
                line: 49
            }
        },
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
        },
        f: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0
        },
        b: {
            "0": [
                0,
                0
            ]
        },
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "a6bf0613974b03998b8dfc39f5a069b4fbbb089e"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_2kr69oy2c3 = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_2kr69oy2c3();
class SidebarModel {
    channelPath;
    /**
   * Initializes with the API endpoint for channel and collection operations.
   * @param channelPath - The base API endpoint for collection-related requests.
   */ constructor(channelPath){
        cov_2kr69oy2c3().f[0]++;
        cov_2kr69oy2c3().s[0]++;
        this.channelPath = channelPath;
    }
    /**
   * Performs a GET DB request to retrieve the collection data for a specific workspace
   * @param authToken - The authentication token.
   * @param workspace - The workspace name.
   * @returns Promise that resolves with the collection data.
   * @throws Error if the request fails.
   * @throws Error if the response is not ok.
   */ getCollections(authToken, workspace) {
        cov_2kr69oy2c3().f[1]++;
        const encodedWorkspaceName = (cov_2kr69oy2c3().s[1]++, encodeURIComponent(workspace));
        const url = (cov_2kr69oy2c3().s[2]++, `${this.channelPath}${encodedWorkspaceName}/channels/`);
        cov_2kr69oy2c3().s[3]++;
        return (0, _validation.typedFetch)(url, (0, _validation.isPostArray), {
            method: "GET",
            headers: {
                accept: "application/json",
                Authorization: `Bearer ${authToken}`
            }
        }).then((response)=>{
            cov_2kr69oy2c3().f[2]++;
            cov_2kr69oy2c3().s[4]++;
            return response.map((item)=>{
                cov_2kr69oy2c3().f[3]++;
                const pathSegments = (cov_2kr69oy2c3().s[5]++, item.path.split("/"));
                cov_2kr69oy2c3().s[6]++;
                return pathSegments[pathSegments.length - 1];
            });
        }).catch((error)=>{
            cov_2kr69oy2c3().f[4]++;
            cov_2kr69oy2c3().s[7]++;
            (0, _slog.slog).error("Failed to fetch collections:", [
                "error",
                error
            ]);
            cov_2kr69oy2c3().s[8]++;
            throw new Error(`Unable to retrieve collections: ${(cov_2kr69oy2c3().b[0][0]++, error.message) || (cov_2kr69oy2c3().b[0][1]++, error)}`);
        });
    }
}

},{"../slog":"jExiC","./Validation":"87EXf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5D2Ai":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Handles API requests related to posts and workspace/channel management.
 */ parcelHelpers.export(exports, "MainContentModel", ()=>MainContentModel);
var _fetchEventSource = require("@microsoft/fetch-event-source");
var _slog = require("../slog");
var _validation = require("./Validation");
function cov_c75l937h1() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/model/MainContentModel.ts";
    var hash = "c66e45b15743d750f9bd44852e38ea169084a220";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/model/MainContentModel.ts",
        statementMap: {
            "0": {
                start: {
                    line: 16,
                    column: 41
                },
                end: {
                    line: 16,
                    column: 45
                }
            },
            "1": {
                start: {
                    line: 17,
                    column: 39
                },
                end: {
                    line: 17,
                    column: 43
                }
            },
            "2": {
                start: {
                    line: 18,
                    column: 41
                },
                end: {
                    line: 18,
                    column: 45
                }
            },
            "3": {
                start: {
                    line: 26,
                    column: 4
                },
                end: {
                    line: 26,
                    column: 35
                }
            },
            "4": {
                start: {
                    line: 27,
                    column: 4
                },
                end: {
                    line: 27,
                    column: 31
                }
            },
            "5": {
                start: {
                    line: 37,
                    column: 4
                },
                end: {
                    line: 37,
                    column: 31
                }
            },
            "6": {
                start: {
                    line: 52,
                    column: 4
                },
                end: {
                    line: 57,
                    column: 6
                }
            },
            "7": {
                start: {
                    line: 58,
                    column: 33
                },
                end: {
                    line: 58,
                    column: 62
                }
            },
            "8": {
                start: {
                    line: 59,
                    column: 31
                },
                end: {
                    line: 59,
                    column: 58
                }
            },
            "9": {
                start: {
                    line: 60,
                    column: 4
                },
                end: {
                    line: 62,
                    column: 6
                }
            },
            "10": {
                start: {
                    line: 64,
                    column: 4
                },
                end: {
                    line: 82,
                    column: 9
                }
            },
            "11": {
                start: {
                    line: 76,
                    column: 8
                },
                end: {
                    line: 76,
                    column: 69
                }
            },
            "12": {
                start: {
                    line: 77,
                    column: 8
                },
                end: {
                    line: 77,
                    column: 24
                }
            },
            "13": {
                start: {
                    line: 80,
                    column: 8
                },
                end: {
                    line: 80,
                    column: 63
                }
            },
            "14": {
                start: {
                    line: 81,
                    column: 8
                },
                end: {
                    line: 81,
                    column: 20
                }
            },
            "15": {
                start: {
                    line: 100,
                    column: 4
                },
                end: {
                    line: 102,
                    column: 5
                }
            },
            "16": {
                start: {
                    line: 101,
                    column: 6
                },
                end: {
                    line: 101,
                    column: 43
                }
            },
            "17": {
                start: {
                    line: 104,
                    column: 4
                },
                end: {
                    line: 106,
                    column: 5
                }
            },
            "18": {
                start: {
                    line: 105,
                    column: 6
                },
                end: {
                    line: 105,
                    column: 24
                }
            },
            "19": {
                start: {
                    line: 107,
                    column: 4
                },
                end: {
                    line: 107,
                    column: 38
                }
            },
            "20": {
                start: {
                    line: 109,
                    column: 19
                },
                end: {
                    line: 109,
                    column: 132
                }
            },
            "21": {
                start: {
                    line: 110,
                    column: 4
                },
                end: {
                    line: 136,
                    column: 7
                }
            },
            "22": {
                start: {
                    line: 118,
                    column: 8
                },
                end: {
                    line: 121,
                    column: 9
                }
            },
            "23": {
                start: {
                    line: 120,
                    column: 10
                },
                end: {
                    line: 120,
                    column: 17
                }
            },
            "24": {
                start: {
                    line: 122,
                    column: 8
                },
                end: {
                    line: 127,
                    column: 9
                }
            },
            "25": {
                start: {
                    line: 123,
                    column: 23
                },
                end: {
                    line: 123,
                    column: 43
                }
            },
            "26": {
                start: {
                    line: 124,
                    column: 10
                },
                end: {
                    line: 124,
                    column: 26
                }
            },
            "27": {
                start: {
                    line: 126,
                    column: 10
                },
                end: {
                    line: 126,
                    column: 57
                }
            },
            "28": {
                start: {
                    line: 130,
                    column: 8
                },
                end: {
                    line: 130,
                    column: 53
                }
            },
            "29": {
                start: {
                    line: 131,
                    column: 8
                },
                end: {
                    line: 131,
                    column: 27
                }
            },
            "30": {
                start: {
                    line: 132,
                    column: 8
                },
                end: {
                    line: 134,
                    column: 9
                }
            },
            "31": {
                start: {
                    line: 133,
                    column: 10
                },
                end: {
                    line: 133,
                    column: 25
                }
            },
            "32": {
                start: {
                    line: 143,
                    column: 4
                },
                end: {
                    line: 149,
                    column: 5
                }
            },
            "33": {
                start: {
                    line: 144,
                    column: 6
                },
                end: {
                    line: 144,
                    column: 24
                }
            },
            "34": {
                start: {
                    line: 145,
                    column: 6
                },
                end: {
                    line: 145,
                    column: 23
                }
            },
            "35": {
                start: {
                    line: 146,
                    column: 6
                },
                end: {
                    line: 146,
                    column: 43
                }
            },
            "36": {
                start: {
                    line: 148,
                    column: 6
                },
                end: {
                    line: 148,
                    column: 71
                }
            },
            "37": {
                start: {
                    line: 168,
                    column: 4
                },
                end: {
                    line: 170,
                    column: 5
                }
            },
            "38": {
                start: {
                    line: 169,
                    column: 6
                },
                end: {
                    line: 169,
                    column: 61
                }
            },
            "39": {
                start: {
                    line: 172,
                    column: 4
                },
                end: {
                    line: 178,
                    column: 6
                }
            },
            "40": {
                start: {
                    line: 180,
                    column: 21
                },
                end: {
                    line: 180,
                    column: 53
                }
            },
            "41": {
                start: {
                    line: 181,
                    column: 28
                },
                end: {
                    line: 183,
                    column: 5
                }
            },
            "42": {
                start: {
                    line: 182,
                    column: 6
                },
                end: {
                    line: 182,
                    column: 33
                }
            },
            "43": {
                start: {
                    line: 184,
                    column: 24
                },
                end: {
                    line: 184,
                    column: 49
                }
            },
            "44": {
                start: {
                    line: 185,
                    column: 22
                },
                end: {
                    line: 185,
                    column: 55
                }
            },
            "45": {
                start: {
                    line: 187,
                    column: 4
                },
                end: {
                    line: 187,
                    column: 55
                }
            },
            "46": {
                start: {
                    line: 188,
                    column: 20
                },
                end: {
                    line: 212,
                    column: 5
                }
            },
            "47": {
                start: {
                    line: 214,
                    column: 4
                },
                end: {
                    line: 227,
                    column: 9
                }
            },
            "48": {
                start: {
                    line: 216,
                    column: 8
                },
                end: {
                    line: 219,
                    column: 9
                }
            },
            "49": {
                start: {
                    line: 217,
                    column: 10
                },
                end: {
                    line: 217,
                    column: 71
                }
            },
            "50": {
                start: {
                    line: 218,
                    column: 10
                },
                end: {
                    line: 218,
                    column: 71
                }
            },
            "51": {
                start: {
                    line: 220,
                    column: 8
                },
                end: {
                    line: 220,
                    column: 76
                }
            },
            "52": {
                start: {
                    line: 223,
                    column: 8
                },
                end: {
                    line: 223,
                    column: 66
                }
            },
            "53": {
                start: {
                    line: 224,
                    column: 8
                },
                end: {
                    line: 226,
                    column: 10
                }
            }
        },
        fnMap: {
            "0": {
                name: "(anonymous_0)",
                decl: {
                    start: {
                        line: 25,
                        column: 2
                    },
                    end: {
                        line: 25,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 25,
                        column: 71
                    },
                    end: {
                        line: 28,
                        column: 3
                    }
                },
                line: 25
            },
            "1": {
                name: "(anonymous_1)",
                decl: {
                    start: {
                        line: 36,
                        column: 2
                    },
                    end: {
                        line: 36,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 36,
                        column: 33
                    },
                    end: {
                        line: 38,
                        column: 3
                    }
                },
                line: 36
            },
            "2": {
                name: "(anonymous_2)",
                decl: {
                    start: {
                        line: 47,
                        column: 2
                    },
                    end: {
                        line: 47,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 51,
                        column: 24
                    },
                    end: {
                        line: 83,
                        column: 3
                    }
                },
                line: 51
            },
            "3": {
                name: "(anonymous_3)",
                decl: {
                    start: {
                        line: 75,
                        column: 12
                    },
                    end: {
                        line: 75,
                        column: 13
                    }
                },
                loc: {
                    start: {
                        line: 75,
                        column: 26
                    },
                    end: {
                        line: 78,
                        column: 7
                    }
                },
                line: 75
            },
            "4": {
                name: "(anonymous_4)",
                decl: {
                    start: {
                        line: 79,
                        column: 13
                    },
                    end: {
                        line: 79,
                        column: 14
                    }
                },
                loc: {
                    start: {
                        line: 79,
                        column: 24
                    },
                    end: {
                        line: 82,
                        column: 7
                    }
                },
                line: 79
            },
            "5": {
                name: "(anonymous_5)",
                decl: {
                    start: {
                        line: 93,
                        column: 2
                    },
                    end: {
                        line: 93,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 99,
                        column: 10
                    },
                    end: {
                        line: 137,
                        column: 3
                    }
                },
                line: 99
            },
            "6": {
                name: "(anonymous_6)",
                decl: {
                    start: {
                        line: 117,
                        column: 17
                    },
                    end: {
                        line: 117,
                        column: 18
                    }
                },
                loc: {
                    start: {
                        line: 117,
                        column: 26
                    },
                    end: {
                        line: 128,
                        column: 7
                    }
                },
                line: 117
            },
            "7": {
                name: "(anonymous_7)",
                decl: {
                    start: {
                        line: 129,
                        column: 15
                    },
                    end: {
                        line: 129,
                        column: 16
                    }
                },
                loc: {
                    start: {
                        line: 129,
                        column: 26
                    },
                    end: {
                        line: 135,
                        column: 7
                    }
                },
                line: 129
            },
            "8": {
                name: "(anonymous_8)",
                decl: {
                    start: {
                        line: 142,
                        column: 2
                    },
                    end: {
                        line: 142,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 142,
                        column: 36
                    },
                    end: {
                        line: 150,
                        column: 3
                    }
                },
                line: 142
            },
            "9": {
                name: "(anonymous_9)",
                decl: {
                    start: {
                        line: 161,
                        column: 2
                    },
                    end: {
                        line: 161,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 167,
                        column: 19
                    },
                    end: {
                        line: 228,
                        column: 3
                    }
                },
                line: 167
            },
            "10": {
                name: "(anonymous_10)",
                decl: {
                    start: {
                        line: 181,
                        column: 41
                    },
                    end: {
                        line: 181,
                        column: 42
                    }
                },
                loc: {
                    start: {
                        line: 182,
                        column: 6
                    },
                    end: {
                        line: 182,
                        column: 33
                    }
                },
                line: 182
            },
            "11": {
                name: "(anonymous_11)",
                decl: {
                    start: {
                        line: 215,
                        column: 12
                    },
                    end: {
                        line: 215,
                        column: 13
                    }
                },
                loc: {
                    start: {
                        line: 215,
                        column: 26
                    },
                    end: {
                        line: 221,
                        column: 7
                    }
                },
                line: 215
            },
            "12": {
                name: "(anonymous_12)",
                decl: {
                    start: {
                        line: 222,
                        column: 13
                    },
                    end: {
                        line: 222,
                        column: 14
                    }
                },
                loc: {
                    start: {
                        line: 222,
                        column: 24
                    },
                    end: {
                        line: 227,
                        column: 7
                    }
                },
                line: 222
            }
        },
        branchMap: {
            "0": {
                loc: {
                    start: {
                        line: 100,
                        column: 4
                    },
                    end: {
                        line: 102,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 100,
                            column: 4
                        },
                        end: {
                            line: 102,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 100
            },
            "1": {
                loc: {
                    start: {
                        line: 104,
                        column: 4
                    },
                    end: {
                        line: 106,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 104,
                            column: 4
                        },
                        end: {
                            line: 106,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 104
            },
            "2": {
                loc: {
                    start: {
                        line: 118,
                        column: 8
                    },
                    end: {
                        line: 121,
                        column: 9
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 118,
                            column: 8
                        },
                        end: {
                            line: 121,
                            column: 9
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 118
            },
            "3": {
                loc: {
                    start: {
                        line: 132,
                        column: 8
                    },
                    end: {
                        line: 134,
                        column: 9
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 132,
                            column: 8
                        },
                        end: {
                            line: 134,
                            column: 9
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 132
            },
            "4": {
                loc: {
                    start: {
                        line: 143,
                        column: 4
                    },
                    end: {
                        line: 149,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 143,
                            column: 4
                        },
                        end: {
                            line: 149,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: 147,
                            column: 11
                        },
                        end: {
                            line: 149,
                            column: 5
                        }
                    }
                ],
                line: 143
            },
            "5": {
                loc: {
                    start: {
                        line: 168,
                        column: 4
                    },
                    end: {
                        line: 170,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 168,
                            column: 4
                        },
                        end: {
                            line: 170,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 168
            },
            "6": {
                loc: {
                    start: {
                        line: 168,
                        column: 8
                    },
                    end: {
                        line: 168,
                        column: 48
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 168,
                            column: 8
                        },
                        end: {
                            line: 168,
                            column: 27
                        }
                    },
                    {
                        start: {
                            line: 168,
                            column: 31
                        },
                        end: {
                            line: 168,
                            column: 48
                        }
                    }
                ],
                line: 168
            },
            "7": {
                loc: {
                    start: {
                        line: 207,
                        column: 14
                    },
                    end: {
                        line: 207,
                        column: 49
                    }
                },
                type: "cond-expr",
                locations: [
                    {
                        start: {
                            line: 207,
                            column: 23
                        },
                        end: {
                            line: 207,
                            column: 36
                        }
                    },
                    {
                        start: {
                            line: 207,
                            column: 39
                        },
                        end: {
                            line: 207,
                            column: 49
                        }
                    }
                ],
                line: 207
            },
            "8": {
                loc: {
                    start: {
                        line: 216,
                        column: 8
                    },
                    end: {
                        line: 219,
                        column: 9
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 216,
                            column: 8
                        },
                        end: {
                            line: 219,
                            column: 9
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 216
            },
            "9": {
                loc: {
                    start: {
                        line: 225,
                        column: 41
                    },
                    end: {
                        line: 225,
                        column: 63
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 225,
                            column: 41
                        },
                        end: {
                            line: 225,
                            column: 54
                        }
                    },
                    {
                        start: {
                            line: 225,
                            column: 58
                        },
                        end: {
                            line: 225,
                            column: 63
                        }
                    }
                ],
                line: 225
            }
        },
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0,
            "18": 0,
            "19": 0,
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "31": 0,
            "32": 0,
            "33": 0,
            "34": 0,
            "35": 0,
            "36": 0,
            "37": 0,
            "38": 0,
            "39": 0,
            "40": 0,
            "41": 0,
            "42": 0,
            "43": 0,
            "44": 0,
            "45": 0,
            "46": 0,
            "47": 0,
            "48": 0,
            "49": 0,
            "50": 0,
            "51": 0,
            "52": 0,
            "53": 0
        },
        f: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0
        },
        b: {
            "0": [
                0,
                0
            ],
            "1": [
                0,
                0
            ],
            "2": [
                0,
                0
            ],
            "3": [
                0,
                0
            ],
            "4": [
                0,
                0
            ],
            "5": [
                0,
                0
            ],
            "6": [
                0,
                0
            ],
            "7": [
                0,
                0
            ],
            "8": [
                0,
                0
            ],
            "9": [
                0,
                0
            ]
        },
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "c66e45b15743d750f9bd44852e38ea169084a220"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_c75l937h1 = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_c75l937h1();
class MainContentModel {
    currWorkspace = (cov_c75l937h1().s[0]++, null);
    currChannel = (cov_c75l937h1().s[1]++, null);
    ctrl = (cov_c75l937h1().s[2]++, null);
    /**
   * Public method that sets the current workspace and channel.
   * @param workspace - The current workspace.
   * @param channel - The current channel.
   */ setCurrentWorkspaceChannel(workspace, channel) {
        cov_c75l937h1().f[0]++;
        cov_c75l937h1().s[3]++;
        this.currWorkspace = workspace;
        cov_c75l937h1().s[4]++;
        this.currChannel = channel;
    }
    postsPath;
    /**
   * Initializes with the API endpoint for posts.
   * @param postsPath - The base API endpoint for post-related requests.
   */ constructor(postsPath){
        cov_c75l937h1().f[1]++;
        cov_c75l937h1().s[5]++;
        this.postsPath = postsPath;
    }
    /**
   * Get the collections.
   * @param authToken - authentication token
   * @param workspace - workspace name
   * @param channel - channel name
   * @returns Post[] for the posts
   * */ async getCollections(authToken, workspace, channel) {
        cov_c75l937h1().f[2]++;
        cov_c75l937h1().s[6]++;
        (0, _slog.slog).info("Fields in getCollection (model)", [
            "authToken",
            authToken
        ], [
            "workspace",
            workspace
        ], [
            "channel",
            channel
        ]);
        const encodedWorkspaceName = (cov_c75l937h1().s[7]++, encodeURIComponent(workspace));
        const encodedChannelName = (cov_c75l937h1().s[8]++, encodeURIComponent(channel));
        cov_c75l937h1().s[9]++;
        (0, _slog.slog).info(`${this.postsPath}${encodedWorkspaceName}/channels/${encodedChannelName}/posts/`);
        cov_c75l937h1().s[10]++;
        return (0, _validation.typedFetch)(`${this.postsPath}${encodedWorkspaceName}/channels/${encodedChannelName}/posts/`, (0, _validation.isPostArray), {
            method: "GET",
            headers: {
                accept: "application/json",
                Authorization: `Bearer ${authToken}`
            }
        }).then((response)=>{
            cov_c75l937h1().f[3]++;
            cov_c75l937h1().s[11]++;
            (0, _slog.slog).info("Fetched posts response:", [
                "response",
                response
            ]);
            cov_c75l937h1().s[12]++;
            return response;
        }).catch((error)=>{
            cov_c75l937h1().f[4]++;
            cov_c75l937h1().s[13]++;
            (0, _slog.slog).error("Failed to fetch posts:", [
                "error",
                error
            ]);
            cov_c75l937h1().s[14]++;
            throw error;
        });
    }
    /**
   * Subscribes to posts in the current workspace and channel, streaming them as they arrive.
   * @param authToken - The authentication token for authorization.
   * @param workspace - The name of the workspace to subscribe to.
   * @param channel - The name of the channel to subscribe to.
   * @param onMessage - Callback function to handle incoming posts.
   * @param onError - Optional callback to handle errors.
   */ subscribeToPosts(authToken, workspace, channel, onMessage, onError) {
        cov_c75l937h1().f[5]++;
        cov_c75l937h1().s[15]++;
        if (!authToken) {
            cov_c75l937h1().b[0][0]++;
            cov_c75l937h1().s[16]++;
            throw new Error("No token provided");
        } else cov_c75l937h1().b[0][1]++;
        cov_c75l937h1().s[17]++;
        if (this.ctrl) {
            cov_c75l937h1().b[1][0]++;
            cov_c75l937h1().s[18]++;
            this.ctrl.abort(); // Close SSE connection
        } else cov_c75l937h1().b[1][1]++;
        cov_c75l937h1().s[19]++;
        this.ctrl = new AbortController();
        // Construct SSE URL
        const sseURL = (cov_c75l937h1().s[20]++, `${this.postsPath}${encodeURIComponent(workspace)}/channels/${encodeURIComponent(channel)}/posts/?mode=subscribe`);
        cov_c75l937h1().s[21]++;
        (0, _fetchEventSource.fetchEventSource)(sseURL, {
            method: "GET",
            headers: {
                "Content-Type": "text/event-stream",
                Authorization: `Bearer ${authToken}`
            },
            signal: this.ctrl.signal,
            onmessage: (msg)=>{
                cov_c75l937h1().f[6]++;
                cov_c75l937h1().s[22]++;
                if (!msg.data) {
                    cov_c75l937h1().b[2][0]++;
                    cov_c75l937h1().s[23]++;
                    // Do i need to add validation
                    return;
                } else cov_c75l937h1().b[2][1]++;
                cov_c75l937h1().s[24]++;
                try {
                    const data = (cov_c75l937h1().s[25]++, JSON.parse(msg.data));
                    cov_c75l937h1().s[26]++;
                    onMessage(data);
                } catch (error) {
                    cov_c75l937h1().s[27]++;
                    (0, _slog.slog).error("Failed to parse message:" + error);
                }
            },
            onerror: (error)=>{
                cov_c75l937h1().f[7]++;
                cov_c75l937h1().s[28]++;
                (0, _slog.slog).error("SSE connection error: " + error);
                cov_c75l937h1().s[29]++;
                this.ctrl?.abort(); // Abort on error
                cov_c75l937h1().s[30]++;
                if (onError) {
                    cov_c75l937h1().b[3][0]++;
                    cov_c75l937h1().s[31]++;
                    onError(error);
                } else cov_c75l937h1().b[3][1]++;
            }
        });
    }
    /**
   * Unsubscribes from the current post stream.
   */ unsubscribeToPosts() {
        cov_c75l937h1().f[8]++;
        cov_c75l937h1().s[32]++;
        if (this.ctrl) {
            cov_c75l937h1().b[4][0]++;
            cov_c75l937h1().s[33]++;
            this.ctrl.abort();
            cov_c75l937h1().s[34]++;
            this.ctrl = null;
            cov_c75l937h1().s[35]++;
            (0, _slog.slog).info("Unsubscribed from posts");
        } else {
            cov_c75l937h1().b[4][1]++;
            cov_c75l937h1().s[36]++;
            (0, _slog.slog).warn("No active subscription to posts to unsubscribe from");
        }
    }
    /**
   * Sends a reaction to a post, either adding or removing the reaction.
   * @param postPath - The API endpoint for reacting to a post.
   * @param remove - If `true`, removes the reaction; otherwise, adds the reaction.
   * @param reactionType - The type of reaction.
   * @param username - The username of the person reacting to the post.
   * @param token - The authentication token for authorization.
   * @throws Error if the current workspace or channel is not set.
   */ async reactPost(postPath, remove, reactionType, username, token) {
        cov_c75l937h1().f[9]++;
        cov_c75l937h1().s[37]++;
        if ((cov_c75l937h1().b[6][0]++, !this.currWorkspace) || (cov_c75l937h1().b[6][1]++, !this.currChannel)) {
            cov_c75l937h1().b[5][0]++;
            cov_c75l937h1().s[38]++;
            throw new Error("No current workspace or channel set");
        } else cov_c75l937h1().b[5][1]++;
        cov_c75l937h1().s[39]++;
        (0, _slog.slog).info("Fields in reactPost (model)", [
            "postPath",
            postPath
        ], [
            "remove",
            remove
        ], [
            "reactionType",
            reactionType
        ], [
            "username",
            username
        ]);
        const segments = (cov_c75l937h1().s[40]++, postPath.substring(1).split("/"));
        const encodedSegments = (cov_c75l937h1().s[41]++, segments.map((segment)=>{
            cov_c75l937h1().f[10]++;
            cov_c75l937h1().s[42]++;
            return encodeURIComponent(segment);
        }));
        const encodedPath = (cov_c75l937h1().s[43]++, encodedSegments.join("/"));
        const reactPath = (cov_c75l937h1().s[44]++, `${this.postsPath}${encodedPath}`);
        cov_c75l937h1().s[45]++;
        (0, _slog.slog).info("React path:", [
            "reactPath",
            reactPath
        ]);
        const options = (cov_c75l937h1().s[46]++, {
            method: "PATCH",
            headers: {
                Authorization: `Bearer ${token}`,
                accept: "application/json",
                "Content-Type": "application/json"
            },
            body: JSON.stringify([
                {
                    op: "ObjectAdd",
                    path: "/reactions",
                    value: {}
                },
                {
                    op: "ObjectAdd",
                    path: `/reactions/${reactionType}`,
                    value: []
                },
                {
                    op: remove ? (cov_c75l937h1().b[7][0]++, "ArrayRemove") : (cov_c75l937h1().b[7][1]++, "ArrayAdd"),
                    path: `/reactions/${reactionType}`,
                    value: username
                }
            ])
        });
        cov_c75l937h1().s[47]++;
        return (0, _validation.typedFetch)(reactPath, (0, _validation.isPATCHResponse), options).then((response)=>{
            cov_c75l937h1().f[11]++;
            cov_c75l937h1().s[48]++;
            if (response.patchFailed) {
                cov_c75l937h1().b[8][0]++;
                cov_c75l937h1().s[49]++;
                (0, _slog.slog).error("Patch operation failed", [
                    "response",
                    response
                ]);
                cov_c75l937h1().s[50]++;
                throw new Error("Failed to react to the post: PATCH failed");
            } else cov_c75l937h1().b[8][1]++;
            cov_c75l937h1().s[51]++;
            (0, _slog.slog).info("Reaction updated successfully:", [
                "response",
                response
            ]);
        }).catch((error)=>{
            cov_c75l937h1().f[12]++;
            cov_c75l937h1().s[52]++;
            (0, _slog.slog).error("Error updating reactions:", [
                "error",
                error
            ]);
            cov_c75l937h1().s[53]++;
            throw new Error(`Failed to update reactions: ${(cov_c75l937h1().b[9][0]++, error.message) || (cov_c75l937h1().b[9][1]++, error)}`);
        });
    }
}

},{"@microsoft/fetch-event-source":"cMpkg","../slog":"jExiC","./Validation":"87EXf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cMpkg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fetchEventSource", ()=>(0, _fetch.fetchEventSource));
parcelHelpers.export(exports, "EventStreamContentType", ()=>(0, _fetch.EventStreamContentType));
var _fetch = require("./fetch");

},{"./fetch":"lfxRR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lfxRR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EventStreamContentType", ()=>EventStreamContentType);
parcelHelpers.export(exports, "fetchEventSource", ()=>fetchEventSource);
var _parse = require("./parse");
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
const EventStreamContentType = "text/event-stream";
const DefaultRetryInterval = 1000;
const LastEventId = "last-event-id";
function fetchEventSource(input, _a) {
    var { signal: inputSignal, headers: inputHeaders, onopen: inputOnOpen, onmessage, onclose, onerror, openWhenHidden, fetch: inputFetch } = _a, rest = __rest(_a, [
        "signal",
        "headers",
        "onopen",
        "onmessage",
        "onclose",
        "onerror",
        "openWhenHidden",
        "fetch"
    ]);
    return new Promise((resolve, reject)=>{
        const headers = Object.assign({}, inputHeaders);
        if (!headers.accept) headers.accept = EventStreamContentType;
        let curRequestController;
        function onVisibilityChange() {
            curRequestController.abort();
            if (!document.hidden) create();
        }
        if (!openWhenHidden) document.addEventListener("visibilitychange", onVisibilityChange);
        let retryInterval = DefaultRetryInterval;
        let retryTimer = 0;
        function dispose() {
            document.removeEventListener("visibilitychange", onVisibilityChange);
            window.clearTimeout(retryTimer);
            curRequestController.abort();
        }
        inputSignal === null || inputSignal === void 0 || inputSignal.addEventListener("abort", ()=>{
            dispose();
            resolve();
        });
        const fetch = inputFetch !== null && inputFetch !== void 0 ? inputFetch : window.fetch;
        const onopen = inputOnOpen !== null && inputOnOpen !== void 0 ? inputOnOpen : defaultOnOpen;
        async function create() {
            var _a;
            curRequestController = new AbortController();
            try {
                const response = await fetch(input, Object.assign(Object.assign({}, rest), {
                    headers,
                    signal: curRequestController.signal
                }));
                await onopen(response);
                await (0, _parse.getBytes)(response.body, (0, _parse.getLines)((0, _parse.getMessages)((id)=>{
                    if (id) headers[LastEventId] = id;
                    else delete headers[LastEventId];
                }, (retry)=>{
                    retryInterval = retry;
                }, onmessage)));
                onclose === null || onclose === void 0 || onclose();
                dispose();
                resolve();
            } catch (err) {
                if (!curRequestController.signal.aborted) try {
                    const interval = (_a = onerror === null || onerror === void 0 ? void 0 : onerror(err)) !== null && _a !== void 0 ? _a : retryInterval;
                    window.clearTimeout(retryTimer);
                    retryTimer = window.setTimeout(create, interval);
                } catch (innerErr) {
                    dispose();
                    reject(innerErr);
                }
            }
        }
        create();
    });
}
function defaultOnOpen(response) {
    const contentType = response.headers.get("content-type");
    if (!(contentType === null || contentType === void 0 ? void 0 : contentType.startsWith(EventStreamContentType))) throw new Error(`Expected content-type to be ${EventStreamContentType}, Actual: ${contentType}`);
}

},{"./parse":"9ZtWG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9ZtWG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getBytes", ()=>getBytes);
parcelHelpers.export(exports, "getLines", ()=>getLines);
parcelHelpers.export(exports, "getMessages", ()=>getMessages);
async function getBytes(stream, onChunk) {
    const reader = stream.getReader();
    let result;
    while(!(result = await reader.read()).done)onChunk(result.value);
}
function getLines(onLine) {
    let buffer;
    let position;
    let fieldLength;
    let discardTrailingNewline = false;
    return function onChunk(arr) {
        if (buffer === undefined) {
            buffer = arr;
            position = 0;
            fieldLength = -1;
        } else buffer = concat(buffer, arr);
        const bufLength = buffer.length;
        let lineStart = 0;
        while(position < bufLength){
            if (discardTrailingNewline) {
                if (buffer[position] === 10) lineStart = ++position;
                discardTrailingNewline = false;
            }
            let lineEnd = -1;
            for(; position < bufLength && lineEnd === -1; ++position)switch(buffer[position]){
                case 58:
                    if (fieldLength === -1) fieldLength = position - lineStart;
                    break;
                case 13:
                    discardTrailingNewline = true;
                case 10:
                    lineEnd = position;
                    break;
            }
            if (lineEnd === -1) break;
            onLine(buffer.subarray(lineStart, lineEnd), fieldLength);
            lineStart = position;
            fieldLength = -1;
        }
        if (lineStart === bufLength) buffer = undefined;
        else if (lineStart !== 0) {
            buffer = buffer.subarray(lineStart);
            position -= lineStart;
        }
    };
}
function getMessages(onId, onRetry, onMessage) {
    let message = newMessage();
    const decoder = new TextDecoder();
    return function onLine(line, fieldLength) {
        if (line.length === 0) {
            onMessage === null || onMessage === void 0 || onMessage(message);
            message = newMessage();
        } else if (fieldLength > 0) {
            const field = decoder.decode(line.subarray(0, fieldLength));
            const valueOffset = fieldLength + (line[fieldLength + 1] === 32 ? 2 : 1);
            const value = decoder.decode(line.subarray(valueOffset));
            switch(field){
                case "data":
                    message.data = message.data ? message.data + "\n" + value : value;
                    break;
                case "event":
                    message.event = value;
                    break;
                case "id":
                    onId(message.id = value);
                    break;
                case "retry":
                    const retry = parseInt(value, 10);
                    if (!isNaN(retry)) onRetry(message.retry = retry);
                    break;
            }
        }
    };
}
function concat(a, b) {
    const res = new Uint8Array(a.length + b.length);
    res.set(a);
    res.set(b, a.length);
    return res;
}
function newMessage() {
    return {
        data: "",
        event: "",
        id: "",
        retry: undefined
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8X7Jr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Handles creating workspaces and initializing channels within them.
 */ parcelHelpers.export(exports, "CreateWorkspaceModel", ()=>CreateWorkspaceModel);
// src/model/CreateWorkspaceModel.ts
var _slog = require("../slog");
var _validation = require("./Validation");
function cov_8xzw1mjpg() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/model/CreateWorkspaceModel.ts";
    var hash = "d2e5aadf7c2f02419eb03b2688163b1139a701f2";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/model/CreateWorkspaceModel.ts",
        statementMap: {
            "0": {
                start: {
                    line: 17,
                    column: 4
                },
                end: {
                    line: 17,
                    column: 51
                }
            },
            "1": {
                start: {
                    line: 31,
                    column: 33
                },
                end: {
                    line: 31,
                    column: 66
                }
            },
            "2": {
                start: {
                    line: 32,
                    column: 23
                },
                end: {
                    line: 32,
                    column: 75
                }
            },
            "3": {
                start: {
                    line: 34,
                    column: 4
                },
                end: {
                    line: 34,
                    column: 58
                }
            },
            "4": {
                start: {
                    line: 36,
                    column: 4
                },
                end: {
                    line: 88,
                    column: 5
                }
            },
            "5": {
                start: {
                    line: 38,
                    column: 37
                },
                end: {
                    line: 50,
                    column: 7
                }
            },
            "6": {
                start: {
                    line: 52,
                    column: 6
                },
                end: {
                    line: 55,
                    column: 9
                }
            },
            "7": {
                start: {
                    line: 58,
                    column: 26
                },
                end: {
                    line: 58,
                    column: 51
                }
            },
            "8": {
                start: {
                    line: 59,
                    column: 6
                },
                end: {
                    line: 59,
                    column: 64
                }
            },
            "9": {
                start: {
                    line: 61,
                    column: 36
                },
                end: {
                    line: 73,
                    column: 7
                }
            },
            "10": {
                start: {
                    line: 75,
                    column: 6
                },
                end: {
                    line: 78,
                    column: 9
                }
            },
            "11": {
                start: {
                    line: 82,
                    column: 6
                },
                end: {
                    line: 82,
                    column: 31
                }
            },
            "12": {
                start: {
                    line: 85,
                    column: 6
                },
                end: {
                    line: 85,
                    column: 64
                }
            },
            "13": {
                start: {
                    line: 87,
                    column: 6
                },
                end: {
                    line: 87,
                    column: 18
                }
            }
        },
        fnMap: {
            "0": {
                name: "(anonymous_0)",
                decl: {
                    start: {
                        line: 16,
                        column: 2
                    },
                    end: {
                        line: 16,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 16,
                        column: 43
                    },
                    end: {
                        line: 18,
                        column: 3
                    }
                },
                line: 16
            },
            "1": {
                name: "(anonymous_1)",
                decl: {
                    start: {
                        line: 27,
                        column: 2
                    },
                    end: {
                        line: 27,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 30,
                        column: 18
                    },
                    end: {
                        line: 89,
                        column: 3
                    }
                },
                line: 30
            }
        },
        branchMap: {},
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0
        },
        f: {
            "0": 0,
            "1": 0
        },
        b: {},
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "d2e5aadf7c2f02419eb03b2688163b1139a701f2"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_8xzw1mjpg = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_8xzw1mjpg();
class CreateWorkspaceModel {
    createWorkspacePath;
    /**
   * Initializes the CreateWorkspaceModel with the API endpoint.
   * @param createWorkspacePath - The API endpoint for creating a workspace.
   */ constructor(createWorkspacePath){
        cov_8xzw1mjpg().f[0]++;
        cov_8xzw1mjpg().s[0]++;
        this.createWorkspacePath = createWorkspacePath;
    }
    /**
   * Sends a PUT request to create a new workspace, then initializes channels for the workspace.
   * @param authToken - The authentication token for authorization.
   * @param workspaceName - The name of the workspace to create.
   * @returns A promise that resolves with the workspace URI.
   * @throws CreateWorkspaceError if any of the requests fail.
   */ async createWorkspace(authToken, workspaceName) {
        cov_8xzw1mjpg().f[1]++;
        const encodedWorkspaceName = (cov_8xzw1mjpg().s[1]++, encodeURIComponent(workspaceName));
        const requestUrl = (cov_8xzw1mjpg().s[2]++, `${this.createWorkspacePath}${encodedWorkspaceName}`);
        cov_8xzw1mjpg().s[3]++;
        (0, _slog.slog).info(`Creating workspace at URL: ${requestUrl}`);
        cov_8xzw1mjpg().s[4]++;
        try {
            // First PUT request to create the workspace
            const workspaceResponse = (cov_8xzw1mjpg().s[5]++, await (0, _validation.typedFetch)(requestUrl, (0, _validation.isURI), // Validation function to check the response structure
            {
                method: "PUT",
                headers: {
                    accept: "application/json",
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${authToken}`
                },
                body: JSON.stringify({
                    name: workspaceName
                }) // Adjust the body as per your API requirements
            }));
            cov_8xzw1mjpg().s[6]++;
            (0, _slog.slog).info("Workspace created successfully:", [
                "workspaceResponse",
                workspaceResponse
            ]);
            // Second PUT request to initialize channels for the workspace
            const channelsUrl = (cov_8xzw1mjpg().s[7]++, `${requestUrl}/channels/`);
            cov_8xzw1mjpg().s[8]++;
            (0, _slog.slog).info(`Initializing channels at URL: ${channelsUrl}`);
            const channelsResponse = (cov_8xzw1mjpg().s[9]++, await (0, _validation.typedFetch)(channelsUrl, (0, _validation.isURI), // Validation function to check the response structure
            {
                method: "PUT",
                headers: {
                    accept: "application/json",
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${authToken}`
                },
                body: JSON.stringify({}) // Assuming no body is needed; adjust if necessary
            }));
            cov_8xzw1mjpg().s[10]++;
            (0, _slog.slog).info("Channels initialized successfully:", [
                "channelsResponse",
                channelsResponse
            ]);
            // Optionally, you can return both responses or just the workspace response
            // Here, we'll return the workspace response
            cov_8xzw1mjpg().s[11]++;
            return workspaceResponse;
        } catch (error) {
            cov_8xzw1mjpg().s[12]++;
            // Log the error details
            (0, _slog.slog).error("Error in createWorkspace:", [
                "error",
                error
            ]);
            // Throw a custom error to be handled by the controller
            cov_8xzw1mjpg().s[13]++;
            throw error;
        }
    }
}

},{"../slog":"jExiC","./Validation":"87EXf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gxmSB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
//import { typedFetch } from "./Validation";
/**
 * Handles deleting channels from a workspace.
 */ parcelHelpers.export(exports, "DeleteWorkspaceModel", ()=>DeleteWorkspaceModel);
// src/model/DeleteWorkspaceModel.ts
var _slog = require("../slog");
function cov_1thdaionqz() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/model/DeleteWorkspaceModel.ts";
    var hash = "9fe6cc6d37534702e9b76b265d350441259ee03e";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/model/DeleteWorkspaceModel.ts",
        statementMap: {
            "0": {
                start: {
                    line: 17,
                    column: 4
                },
                end: {
                    line: 17,
                    column: 51
                }
            },
            "1": {
                start: {
                    line: 31,
                    column: 33
                },
                end: {
                    line: 31,
                    column: 66
                }
            },
            "2": {
                start: {
                    line: 32,
                    column: 23
                },
                end: {
                    line: 32,
                    column: 75
                }
            },
            "3": {
                start: {
                    line: 34,
                    column: 4
                },
                end: {
                    line: 34,
                    column: 58
                }
            },
            "4": {
                start: {
                    line: 36,
                    column: 4
                },
                end: {
                    line: 50,
                    column: 5
                }
            },
            "5": {
                start: {
                    line: 37,
                    column: 23
                },
                end: {
                    line: 43,
                    column: 8
                }
            },
            "6": {
                start: {
                    line: 44,
                    column: 6
                },
                end: {
                    line: 46,
                    column: 7
                }
            },
            "7": {
                start: {
                    line: 45,
                    column: 8
                },
                end: {
                    line: 45,
                    column: 78
                }
            },
            "8": {
                start: {
                    line: 48,
                    column: 6
                },
                end: {
                    line: 48,
                    column: 53
                }
            },
            "9": {
                start: {
                    line: 49,
                    column: 6
                },
                end: {
                    line: 49,
                    column: 18
                }
            }
        },
        fnMap: {
            "0": {
                name: "(anonymous_0)",
                decl: {
                    start: {
                        line: 16,
                        column: 2
                    },
                    end: {
                        line: 16,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 16,
                        column: 43
                    },
                    end: {
                        line: 18,
                        column: 3
                    }
                },
                line: 16
            },
            "1": {
                name: "(anonymous_1)",
                decl: {
                    start: {
                        line: 27,
                        column: 2
                    },
                    end: {
                        line: 27,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 30,
                        column: 19
                    },
                    end: {
                        line: 51,
                        column: 3
                    }
                },
                line: 30
            }
        },
        branchMap: {
            "0": {
                loc: {
                    start: {
                        line: 44,
                        column: 6
                    },
                    end: {
                        line: 46,
                        column: 7
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 44,
                            column: 6
                        },
                        end: {
                            line: 46,
                            column: 7
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 44
            }
        },
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0
        },
        f: {
            "0": 0,
            "1": 0
        },
        b: {
            "0": [
                0,
                0
            ]
        },
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "9fe6cc6d37534702e9b76b265d350441259ee03e"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_1thdaionqz = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_1thdaionqz();
class DeleteWorkspaceModel {
    deleteWorkspacePath;
    /**
   * Initializes the DeleteWorkspaceModel with the API endpoint.
   * @param deleteWorkspacePath - The API endpoint for deleting a workspace.
   */ constructor(deleteWorkspacePath){
        cov_1thdaionqz().f[0]++;
        cov_1thdaionqz().s[0]++;
        this.deleteWorkspacePath = deleteWorkspacePath;
    }
    /**
   * Sends a DELETE request to delete a workspace.
   * @param authToken - The authentication token for authorization.
   * @param workspaceName - The name of the workspace to delete.
   * @returns A promise that resolves with the response data.
   * @throws An error if the request fails.
   */ async deleteWorkspace(authToken, workspaceName) {
        cov_1thdaionqz().f[1]++;
        const encodedWorkspaceName = (cov_1thdaionqz().s[1]++, encodeURIComponent(workspaceName));
        const requestUrl = (cov_1thdaionqz().s[2]++, `${this.deleteWorkspacePath}${encodedWorkspaceName}`);
        cov_1thdaionqz().s[3]++;
        (0, _slog.slog).info(`Deleting workspace at URL: ${requestUrl}`);
        cov_1thdaionqz().s[4]++;
        try {
            const response = (cov_1thdaionqz().s[5]++, await fetch(requestUrl, {
                method: "DELETE",
                headers: {
                    accept: "*/*",
                    Authorization: `Bearer ${authToken}`
                }
            }));
            cov_1thdaionqz().s[6]++;
            if (!response.ok) {
                cov_1thdaionqz().b[0][0]++;
                cov_1thdaionqz().s[7]++;
                throw new Error(`Failed to delete workspace: ${response.statusText}`);
            } else cov_1thdaionqz().b[0][1]++;
        } catch (error) {
            cov_1thdaionqz().s[8]++;
            (0, _slog.slog).error("Error deleting workspace:", error);
            cov_1thdaionqz().s[9]++;
            throw error;
        }
    }
}

},{"../slog":"jExiC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aaDLm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Handles creating channels and initializing posts within a workspace.
 */ parcelHelpers.export(exports, "CreateChannelModel", ()=>CreateChannelModel);
// src/model/CreateChannelModel.ts
var _slog = require("../slog");
var _validation = require("./Validation");
function cov_1lcmobvnl8() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/model/CreateChannelModel.ts";
    var hash = "0ea5769e48acb68a90c74996cdf776cc337d3d76";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/model/CreateChannelModel.ts",
        statementMap: {
            "0": {
                start: {
                    line: 17,
                    column: 4
                },
                end: {
                    line: 17,
                    column: 47
                }
            },
            "1": {
                start: {
                    line: 33,
                    column: 33
                },
                end: {
                    line: 33,
                    column: 66
                }
            },
            "2": {
                start: {
                    line: 34,
                    column: 31
                },
                end: {
                    line: 34,
                    column: 62
                }
            },
            "3": {
                start: {
                    line: 35,
                    column: 23
                },
                end: {
                    line: 35,
                    column: 104
                }
            },
            "4": {
                start: {
                    line: 37,
                    column: 4
                },
                end: {
                    line: 37,
                    column: 56
                }
            },
            "5": {
                start: {
                    line: 40,
                    column: 4
                },
                end: {
                    line: 84,
                    column: 5
                }
            },
            "6": {
                start: {
                    line: 41,
                    column: 35
                },
                end: {
                    line: 53,
                    column: 7
                }
            },
            "7": {
                start: {
                    line: 56,
                    column: 23
                },
                end: {
                    line: 56,
                    column: 45
                }
            },
            "8": {
                start: {
                    line: 57,
                    column: 6
                },
                end: {
                    line: 57,
                    column: 58
                }
            },
            "9": {
                start: {
                    line: 59,
                    column: 33
                },
                end: {
                    line: 71,
                    column: 7
                }
            },
            "10": {
                start: {
                    line: 73,
                    column: 6
                },
                end: {
                    line: 76,
                    column: 9
                }
            },
            "11": {
                start: {
                    line: 80,
                    column: 6
                },
                end: {
                    line: 80,
                    column: 29
                }
            },
            "12": {
                start: {
                    line: 82,
                    column: 6
                },
                end: {
                    line: 82,
                    column: 34
                }
            },
            "13": {
                start: {
                    line: 83,
                    column: 6
                },
                end: {
                    line: 83,
                    column: 18
                }
            }
        },
        fnMap: {
            "0": {
                name: "(anonymous_0)",
                decl: {
                    start: {
                        line: 16,
                        column: 2
                    },
                    end: {
                        line: 16,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 16,
                        column: 41
                    },
                    end: {
                        line: 18,
                        column: 3
                    }
                },
                line: 16
            },
            "1": {
                name: "(anonymous_1)",
                decl: {
                    start: {
                        line: 28,
                        column: 2
                    },
                    end: {
                        line: 28,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 32,
                        column: 18
                    },
                    end: {
                        line: 85,
                        column: 3
                    }
                },
                line: 32
            }
        },
        branchMap: {},
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0
        },
        f: {
            "0": 0,
            "1": 0
        },
        b: {},
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "0ea5769e48acb68a90c74996cdf776cc337d3d76"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_1lcmobvnl8 = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_1lcmobvnl8();
class CreateChannelModel {
    createChannelPath;
    /**
   * Initializes the CreateChannelModel with the API endpoint.
   * @param createChannelPath - The API endpoint for creating a channel.
   */ constructor(createChannelPath){
        cov_1lcmobvnl8().f[0]++;
        cov_1lcmobvnl8().s[0]++;
        this.createChannelPath = createChannelPath;
    }
    /**
   * Sends a PUT request to create a new channel, then initializes posts for the channel.
   * @param authToken - The authentication token for authorization.
   * @param workspaceName - The name of the workspace containing the channel.
   * @param channelName - The name of the channel to create.
   * @returns A promise that resolves with the channel URI.
   * @throws An error if any of the requests fail.
   */ async createChannel(authToken, workspaceName, channelName) {
        cov_1lcmobvnl8().f[1]++;
        const encodedWorkspaceName = (cov_1lcmobvnl8().s[1]++, encodeURIComponent(workspaceName));
        const encodedChannelName = (cov_1lcmobvnl8().s[2]++, encodeURIComponent(channelName));
        const requestUrl = (cov_1lcmobvnl8().s[3]++, `${this.createChannelPath}${encodedWorkspaceName}/channels/${encodedChannelName}`);
        cov_1lcmobvnl8().s[4]++;
        (0, _slog.slog).info(`Creating channel at URL: ${requestUrl}`);
        // First PUT request to create the channel
        cov_1lcmobvnl8().s[5]++;
        try {
            const channelResponse = (cov_1lcmobvnl8().s[6]++, await (0, _validation.typedFetch)(requestUrl, (0, _validation.isURI), // Validation function to check the response structure
            {
                method: "PUT",
                headers: {
                    accept: "application/json",
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${authToken}`
                },
                body: JSON.stringify({
                    name: channelName
                }) // Adjust the body as per your API requirements
            }));
            // Second POST request to initialize posts for the channel
            const postsUrl = (cov_1lcmobvnl8().s[7]++, `${requestUrl}/posts/`);
            cov_1lcmobvnl8().s[8]++;
            (0, _slog.slog).info(`Initializing posts at URL: ${postsUrl}`);
            const postsResponse = (cov_1lcmobvnl8().s[9]++, await (0, _validation.typedFetch)(postsUrl, (0, _validation.isURI), // Validation function to check the response structure
            {
                method: "PUT",
                headers: {
                    accept: "application/json",
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${authToken}`
                },
                body: JSON.stringify({}) // Assuming no body is needed; adjust if necessary
            }));
            cov_1lcmobvnl8().s[10]++;
            (0, _slog.slog).info("Channel created successfully:", [
                "PostResponse",
                postsResponse
            ]);
            // Optionally, you can return both responses or just the channel response
            // Here, we'll return the channel response
            cov_1lcmobvnl8().s[11]++;
            return channelResponse;
        } catch (error) {
            cov_1lcmobvnl8().s[12]++;
            (0, _slog.slog).error("Error:", error);
            cov_1lcmobvnl8().s[13]++;
            throw error; // Rethrow or handle gracefully
        }
    }
}

},{"../slog":"jExiC","./Validation":"87EXf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1wCAl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Handles deleting channels from a workspace.
 */ parcelHelpers.export(exports, "DeleteChannelModel", ()=>DeleteChannelModel);
var _slog = require("../slog");
function cov_tdgl52vhd() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/model/DeleteChannelModel.ts";
    var hash = "0f016e6296abd10976bf5e3849acff20deb88f21";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/model/DeleteChannelModel.ts",
        statementMap: {
            "0": {
                start: {
                    line: 14,
                    column: 4
                },
                end: {
                    line: 14,
                    column: 47
                }
            },
            "1": {
                start: {
                    line: 30,
                    column: 33
                },
                end: {
                    line: 30,
                    column: 66
                }
            },
            "2": {
                start: {
                    line: 31,
                    column: 31
                },
                end: {
                    line: 31,
                    column: 62
                }
            },
            "3": {
                start: {
                    line: 32,
                    column: 23
                },
                end: {
                    line: 32,
                    column: 104
                }
            },
            "4": {
                start: {
                    line: 34,
                    column: 4
                },
                end: {
                    line: 34,
                    column: 56
                }
            },
            "5": {
                start: {
                    line: 36,
                    column: 4
                },
                end: {
                    line: 53,
                    column: 5
                }
            },
            "6": {
                start: {
                    line: 37,
                    column: 23
                },
                end: {
                    line: 43,
                    column: 8
                }
            },
            "7": {
                start: {
                    line: 45,
                    column: 6
                },
                end: {
                    line: 47,
                    column: 7
                }
            },
            "8": {
                start: {
                    line: 46,
                    column: 8
                },
                end: {
                    line: 46,
                    column: 76
                }
            },
            "9": {
                start: {
                    line: 49,
                    column: 6
                },
                end: {
                    line: 49,
                    column: 49
                }
            },
            "10": {
                start: {
                    line: 51,
                    column: 6
                },
                end: {
                    line: 51,
                    column: 51
                }
            },
            "11": {
                start: {
                    line: 52,
                    column: 6
                },
                end: {
                    line: 52,
                    column: 18
                }
            }
        },
        fnMap: {
            "0": {
                name: "(anonymous_0)",
                decl: {
                    start: {
                        line: 13,
                        column: 2
                    },
                    end: {
                        line: 13,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 13,
                        column: 41
                    },
                    end: {
                        line: 15,
                        column: 3
                    }
                },
                line: 13
            },
            "1": {
                name: "(anonymous_1)",
                decl: {
                    start: {
                        line: 25,
                        column: 2
                    },
                    end: {
                        line: 25,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 29,
                        column: 19
                    },
                    end: {
                        line: 54,
                        column: 3
                    }
                },
                line: 29
            }
        },
        branchMap: {
            "0": {
                loc: {
                    start: {
                        line: 45,
                        column: 6
                    },
                    end: {
                        line: 47,
                        column: 7
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 45,
                            column: 6
                        },
                        end: {
                            line: 47,
                            column: 7
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 45
            }
        },
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0
        },
        f: {
            "0": 0,
            "1": 0
        },
        b: {
            "0": [
                0,
                0
            ]
        },
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "0f016e6296abd10976bf5e3849acff20deb88f21"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_tdgl52vhd = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_tdgl52vhd();
class DeleteChannelModel {
    deleteChannelPath;
    /**
   * Initializes the DeleteChannelModel with the API endpoint.
   * @param deleteChannelPath - The API endpoint for deleting a channel.
   */ constructor(deleteChannelPath){
        cov_tdgl52vhd().f[0]++;
        cov_tdgl52vhd().s[0]++;
        this.deleteChannelPath = deleteChannelPath;
    }
    /**
   * Sends a DELETE request to delete an existing channel.
   * @param authToken - The authentication token for authorization.
   * @param workspaceName - The name of the workspace containing the channel.
   * @param channelName - The name of the channel to delete.
   * @returns A promise that resolves when the request is complete.
   * @throws An error if the request fails.
   */ async deleteChannel(authToken, workspaceName, channelName) {
        cov_tdgl52vhd().f[1]++;
        const encodedWorkspaceName = (cov_tdgl52vhd().s[1]++, encodeURIComponent(workspaceName));
        const encodedChannelName = (cov_tdgl52vhd().s[2]++, encodeURIComponent(channelName));
        const requestUrl = (cov_tdgl52vhd().s[3]++, `${this.deleteChannelPath}${encodedWorkspaceName}/channels/${encodedChannelName}`);
        cov_tdgl52vhd().s[4]++;
        (0, _slog.slog).info(`Deleting channel at URL: ${requestUrl}`);
        cov_tdgl52vhd().s[5]++;
        try {
            const response = (cov_tdgl52vhd().s[6]++, await fetch(requestUrl, {
                method: "DELETE",
                headers: {
                    accept: "*/*",
                    Authorization: `Bearer ${authToken}`
                }
            }));
            cov_tdgl52vhd().s[7]++;
            if (!response.ok) {
                cov_tdgl52vhd().b[0][0]++;
                cov_tdgl52vhd().s[8]++;
                throw new Error(`Failed to delete channel: ${response.statusText}`);
            } else cov_tdgl52vhd().b[0][1]++;
            cov_tdgl52vhd().s[9]++;
            (0, _slog.slog).info("Channel deleted successfully:");
        } catch (error) {
            cov_tdgl52vhd().s[10]++;
            (0, _slog.slog).error("Error deleting channel:", error);
            cov_tdgl52vhd().s[11]++;
            throw error;
        }
    }
}

},{"../slog":"jExiC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7paXj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * ChatInputModel is responsible for handling chat message creation and replies within channels of a workspace.
 * It interacts with the API to post new messages or reply to existing messages.
 */ parcelHelpers.export(exports, "ChatInputModel", ()=>ChatInputModel);
// src/model/CreateChannelModel.ts
var _slog = require("../slog");
var _validation = require("./Validation");
function cov_1gsymt13t0() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/model/ChatInputModel.ts";
    var hash = "eebf4236f14c456c2f973c6cc3b083dfaead743b";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/model/ChatInputModel.ts",
        statementMap: {
            "0": {
                start: {
                    line: 18,
                    column: 4
                },
                end: {
                    line: 18,
                    column: 37
                }
            },
            "1": {
                start: {
                    line: 36,
                    column: 33
                },
                end: {
                    line: 36,
                    column: 66
                }
            },
            "2": {
                start: {
                    line: 37,
                    column: 31
                },
                end: {
                    line: 37,
                    column: 62
                }
            },
            "3": {
                start: {
                    line: 38,
                    column: 23
                },
                end: {
                    line: 38,
                    column: 106
                }
            },
            "4": {
                start: {
                    line: 40,
                    column: 4
                },
                end: {
                    line: 40,
                    column: 55
                }
            },
            "5": {
                start: {
                    line: 41,
                    column: 4
                },
                end: {
                    line: 41,
                    column: 56
                }
            },
            "6": {
                start: {
                    line: 42,
                    column: 4
                },
                end: {
                    line: 57,
                    column: 9
                }
            },
            "7": {
                start: {
                    line: 52,
                    column: 8
                },
                end: {
                    line: 52,
                    column: 24
                }
            },
            "8": {
                start: {
                    line: 55,
                    column: 8
                },
                end: {
                    line: 55,
                    column: 36
                }
            },
            "9": {
                start: {
                    line: 56,
                    column: 8
                },
                end: {
                    line: 56,
                    column: 51
                }
            },
            "10": {
                start: {
                    line: 77,
                    column: 33
                },
                end: {
                    line: 77,
                    column: 66
                }
            },
            "11": {
                start: {
                    line: 78,
                    column: 31
                },
                end: {
                    line: 78,
                    column: 62
                }
            },
            "12": {
                start: {
                    line: 79,
                    column: 23
                },
                end: {
                    line: 79,
                    column: 106
                }
            },
            "13": {
                start: {
                    line: 81,
                    column: 4
                },
                end: {
                    line: 81,
                    column: 53
                }
            },
            "14": {
                start: {
                    line: 82,
                    column: 4
                },
                end: {
                    line: 82,
                    column: 56
                }
            },
            "15": {
                start: {
                    line: 83,
                    column: 4
                },
                end: {
                    line: 98,
                    column: 9
                }
            },
            "16": {
                start: {
                    line: 93,
                    column: 8
                },
                end: {
                    line: 93,
                    column: 24
                }
            },
            "17": {
                start: {
                    line: 96,
                    column: 8
                },
                end: {
                    line: 96,
                    column: 36
                }
            },
            "18": {
                start: {
                    line: 97,
                    column: 8
                },
                end: {
                    line: 97,
                    column: 49
                }
            }
        },
        fnMap: {
            "0": {
                name: "(anonymous_0)",
                decl: {
                    start: {
                        line: 17,
                        column: 2
                    },
                    end: {
                        line: 17,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 17,
                        column: 36
                    },
                    end: {
                        line: 19,
                        column: 3
                    }
                },
                line: 17
            },
            "1": {
                name: "(anonymous_1)",
                decl: {
                    start: {
                        line: 30,
                        column: 2
                    },
                    end: {
                        line: 30,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 35,
                        column: 18
                    },
                    end: {
                        line: 58,
                        column: 3
                    }
                },
                line: 35
            },
            "2": {
                name: "(anonymous_2)",
                decl: {
                    start: {
                        line: 51,
                        column: 12
                    },
                    end: {
                        line: 51,
                        column: 13
                    }
                },
                loc: {
                    start: {
                        line: 51,
                        column: 26
                    },
                    end: {
                        line: 53,
                        column: 7
                    }
                },
                line: 51
            },
            "3": {
                name: "(anonymous_3)",
                decl: {
                    start: {
                        line: 54,
                        column: 13
                    },
                    end: {
                        line: 54,
                        column: 14
                    }
                },
                loc: {
                    start: {
                        line: 54,
                        column: 24
                    },
                    end: {
                        line: 57,
                        column: 7
                    }
                },
                line: 54
            },
            "4": {
                name: "(anonymous_4)",
                decl: {
                    start: {
                        line: 70,
                        column: 2
                    },
                    end: {
                        line: 70,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 76,
                        column: 18
                    },
                    end: {
                        line: 99,
                        column: 3
                    }
                },
                line: 76
            },
            "5": {
                name: "(anonymous_5)",
                decl: {
                    start: {
                        line: 92,
                        column: 12
                    },
                    end: {
                        line: 92,
                        column: 13
                    }
                },
                loc: {
                    start: {
                        line: 92,
                        column: 26
                    },
                    end: {
                        line: 94,
                        column: 7
                    }
                },
                line: 92
            },
            "6": {
                name: "(anonymous_6)",
                decl: {
                    start: {
                        line: 95,
                        column: 13
                    },
                    end: {
                        line: 95,
                        column: 14
                    }
                },
                loc: {
                    start: {
                        line: 95,
                        column: 24
                    },
                    end: {
                        line: 98,
                        column: 7
                    }
                },
                line: 95
            }
        },
        branchMap: {},
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0,
            "18": 0
        },
        f: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0
        },
        b: {},
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "eebf4236f14c456c2f973c6cc3b083dfaead743b"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_1gsymt13t0 = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_1gsymt13t0();
class ChatInputModel {
    postChatPath;
    /**
   * Initializes the CreateChannelModel with the API endpoint.
   * @param postChatPath - The API endpoint for creating a channel.
   */ constructor(postChatPath){
        cov_1gsymt13t0().f[0]++;
        cov_1gsymt13t0().s[0]++;
        this.postChatPath = postChatPath;
    }
    /**
   * Posts a new message to a specified channel within a workspace.
   * @param authToken - The authorization token required for authenticating the request.
   * @param workspaceName - The name of the workspace where the channel exists.
   * @param channelName - The name of the channel to which the message will be posted.
   * @param chatInput - The content of the message to be posted.
   * @returns A promise that resolves to the URI of the created chat post.
   * @throws {Error} If the request fails or the post is unsuccessful.
   * */ async postToChat(authToken, workspaceName, channelName, chatInput) {
        cov_1gsymt13t0().f[1]++;
        const encodedWorkspaceName = (cov_1gsymt13t0().s[1]++, encodeURIComponent(workspaceName));
        const encodedChannelName = (cov_1gsymt13t0().s[2]++, encodeURIComponent(channelName));
        const requestUrl = (cov_1gsymt13t0().s[3]++, `${this.postChatPath}${encodedWorkspaceName}/channels/${encodedChannelName}/posts/`);
        cov_1gsymt13t0().s[4]++;
        (0, _slog.slog).info(`Posting to chat at URL: ${requestUrl}`);
        cov_1gsymt13t0().s[5]++;
        (0, _slog.slog).info("Request data", [
            "chatInput",
            chatInput
        ]);
        cov_1gsymt13t0().s[6]++;
        return (0, _validation.typedFetch)(requestUrl, (0, _validation.isURI), {
            method: "POST",
            headers: {
                accept: "application/json",
                "Content-Type": "application/json",
                Authorization: `Bearer ${authToken}`
            },
            body: JSON.stringify({
                msg: chatInput
            }) // TODO: what is this
        }).then((response)=>{
            cov_1gsymt13t0().f[2]++;
            cov_1gsymt13t0().s[7]++;
            return response;
        }).catch((error)=>{
            cov_1gsymt13t0().f[3]++;
            cov_1gsymt13t0().s[8]++;
            (0, _slog.slog).error("Error:", error);
            cov_1gsymt13t0().s[9]++;
            throw new Error("Failed to post to chat."); // Rethrow or handle gracefully
        });
    }
    /**
   * Replies to an existing message in a channel, creating a threaded message.
   * @param authToken - The authorization token required for authenticating the request.
   * @param workspaceName - The name of the workspace where the channel exists.
   * @param channelName - The name of the channel to which the reply will be posted.
   * @param chatInput - The content of the reply message.
   * @param parent - The ID of the parent message being replied to.
   * @returns A promise that resolves to the URI of the reply post.
   * @throws {Error} If the request fails or the reply is unsuccessful.
   * */ async replyToChat(authToken, workspaceName, channelName, chatInput, parent) {
        cov_1gsymt13t0().f[4]++;
        const encodedWorkspaceName = (cov_1gsymt13t0().s[10]++, encodeURIComponent(workspaceName));
        const encodedChannelName = (cov_1gsymt13t0().s[11]++, encodeURIComponent(channelName));
        const requestUrl = (cov_1gsymt13t0().s[12]++, `${this.postChatPath}${encodedWorkspaceName}/channels/${encodedChannelName}/posts/`);
        cov_1gsymt13t0().s[13]++;
        (0, _slog.slog).info(`Reply to chat at URL: ${requestUrl}`);
        cov_1gsymt13t0().s[14]++;
        (0, _slog.slog).info("Request data", [
            "chatInput",
            chatInput
        ]);
        cov_1gsymt13t0().s[15]++;
        return (0, _validation.typedFetch)(requestUrl, (0, _validation.isURI), {
            method: "POST",
            headers: {
                accept: "application/json",
                "Content-Type": "application/json",
                Authorization: `Bearer ${authToken}`
            },
            body: JSON.stringify({
                msg: chatInput,
                parent: parent
            })
        }).then((response)=>{
            cov_1gsymt13t0().f[5]++;
            cov_1gsymt13t0().s[16]++;
            return response;
        }).catch((error)=>{
            cov_1gsymt13t0().f[6]++;
            cov_1gsymt13t0().s[17]++;
            (0, _slog.slog).error("Error:", error);
            cov_1gsymt13t0().s[18]++;
            throw new Error("Failed to post reply.");
        });
    }
}

},{"../slog":"jExiC","./Validation":"87EXf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bqQKr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Define the login component
 */ parcelHelpers.export(exports, "LoginComponent", ()=>LoginComponent);
/**
 * Initialize the components
 */ parcelHelpers.export(exports, "initComponents", ()=>initComponents);
var _slog = require("../slog");
function cov_h53nmsx2j() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/view/LoginComponents.ts";
    var hash = "205b5fc36e85243b346fb9aa07974bac3eda5ebe";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/view/LoginComponents.ts",
        statementMap: {
            "0": {
                start: {
                    line: 4,
                    column: 25
                },
                end: {
                    line: 4,
                    column: 52
                }
            },
            "1": {
                start: {
                    line: 13,
                    column: 19
                },
                end: {
                    line: 13,
                    column: 45
                }
            },
            "2": {
                start: {
                    line: 14,
                    column: 2
                },
                end: {
                    line: 16,
                    column: 3
                }
            },
            "3": {
                start: {
                    line: 15,
                    column: 4
                },
                end: {
                    line: 15,
                    column: 54
                }
            },
            "4": {
                start: {
                    line: 17,
                    column: 2
                },
                end: {
                    line: 17,
                    column: 18
                }
            },
            "5": {
                start: {
                    line: 25,
                    column: 36
                },
                end: {
                    line: 25,
                    column: 40
                }
            },
            "6": {
                start: {
                    line: 28,
                    column: 4
                },
                end: {
                    line: 28,
                    column: 60
                }
            },
            "7": {
                start: {
                    line: 34,
                    column: 4
                },
                end: {
                    line: 34,
                    column: 12
                }
            },
            "8": {
                start: {
                    line: 35,
                    column: 4
                },
                end: {
                    line: 35,
                    column: 54
                }
            },
            "9": {
                start: {
                    line: 38,
                    column: 4
                },
                end: {
                    line: 38,
                    column: 72
                }
            },
            "10": {
                start: {
                    line: 41,
                    column: 18
                },
                end: {
                    line: 41,
                    column: 49
                }
            },
            "11": {
                start: {
                    line: 42,
                    column: 4
                },
                end: {
                    line: 108,
                    column: 6
                }
            },
            "12": {
                start: {
                    line: 109,
                    column: 4
                },
                end: {
                    line: 109,
                    column: 35
                }
            },
            "13": {
                start: {
                    line: 119,
                    column: 18
                },
                end: {
                    line: 119,
                    column: 74
                }
            },
            "14": {
                start: {
                    line: 120,
                    column: 4
                },
                end: {
                    line: 122,
                    column: 7
                }
            },
            "15": {
                start: {
                    line: 121,
                    column: 6
                },
                end: {
                    line: 121,
                    column: 29
                }
            },
            "16": {
                start: {
                    line: 126,
                    column: 22
                },
                end: {
                    line: 128,
                    column: 24
                }
            },
            "17": {
                start: {
                    line: 129,
                    column: 25
                },
                end: {
                    line: 131,
                    column: 26
                }
            },
            "18": {
                start: {
                    line: 132,
                    column: 4
                },
                end: {
                    line: 134,
                    column: 5
                }
            },
            "19": {
                start: {
                    line: 133,
                    column: 6
                },
                end: {
                    line: 133,
                    column: 66
                }
            },
            "20": {
                start: {
                    line: 133,
                    column: 51
                },
                end: {
                    line: 133,
                    column: 64
                }
            },
            "21": {
                start: {
                    line: 137,
                    column: 4
                },
                end: {
                    line: 137,
                    column: 77
                }
            },
            "22": {
                start: {
                    line: 137,
                    column: 52
                },
                end: {
                    line: 137,
                    column: 75
                }
            },
            "23": {
                start: {
                    line: 144,
                    column: 18
                },
                end: {
                    line: 144,
                    column: 74
                }
            },
            "24": {
                start: {
                    line: 146,
                    column: 4
                },
                end: {
                    line: 146,
                    column: 22
                }
            },
            "25": {
                start: {
                    line: 148,
                    column: 21
                },
                end: {
                    line: 148,
                    column: 51
                }
            },
            "26": {
                start: {
                    line: 150,
                    column: 4
                },
                end: {
                    line: 153,
                    column: 5
                }
            },
            "27": {
                start: {
                    line: 151,
                    column: 6
                },
                end: {
                    line: 151,
                    column: 37
                }
            },
            "28": {
                start: {
                    line: 152,
                    column: 6
                },
                end: {
                    line: 152,
                    column: 44
                }
            },
            "29": {
                start: {
                    line: 160,
                    column: 18
                },
                end: {
                    line: 160,
                    column: 74
                }
            },
            "30": {
                start: {
                    line: 161,
                    column: 4
                },
                end: {
                    line: 161,
                    column: 18
                }
            },
            "31": {
                start: {
                    line: 163,
                    column: 21
                },
                end: {
                    line: 163,
                    column: 51
                }
            },
            "32": {
                start: {
                    line: 164,
                    column: 4
                },
                end: {
                    line: 167,
                    column: 5
                }
            },
            "33": {
                start: {
                    line: 165,
                    column: 6
                },
                end: {
                    line: 165,
                    column: 40
                }
            },
            "34": {
                start: {
                    line: 166,
                    column: 6
                },
                end: {
                    line: 166,
                    column: 40
                }
            },
            "35": {
                start: {
                    line: 175,
                    column: 4
                },
                end: {
                    line: 175,
                    column: 27
                }
            },
            "36": {
                start: {
                    line: 176,
                    column: 26
                },
                end: {
                    line: 178,
                    column: 25
                }
            },
            "37": {
                start: {
                    line: 179,
                    column: 4
                },
                end: {
                    line: 179,
                    column: 69
                }
            },
            "38": {
                start: {
                    line: 180,
                    column: 4
                },
                end: {
                    line: 180,
                    column: 47
                }
            },
            "39": {
                start: {
                    line: 181,
                    column: 4
                },
                end: {
                    line: 189,
                    column: 5
                }
            },
            "40": {
                start: {
                    line: 182,
                    column: 6
                },
                end: {
                    line: 188,
                    column: 8
                }
            },
            "41": {
                start: {
                    line: 191,
                    column: 4
                },
                end: {
                    line: 191,
                    column: 21
                }
            },
            "42": {
                start: {
                    line: 192,
                    column: 4
                },
                end: {
                    line: 192,
                    column: 35
                }
            },
            "43": {
                start: {
                    line: 200,
                    column: 4
                },
                end: {
                    line: 200,
                    column: 60
                }
            },
            "44": {
                start: {
                    line: 202,
                    column: 26
                },
                end: {
                    line: 204,
                    column: 25
                }
            },
            "45": {
                start: {
                    line: 205,
                    column: 4
                },
                end: {
                    line: 205,
                    column: 40
                }
            },
            "46": {
                start: {
                    line: 206,
                    column: 4
                },
                end: {
                    line: 206,
                    column: 33
                }
            },
            "47": {
                start: {
                    line: 213,
                    column: 28
                },
                end: {
                    line: 213,
                    column: 71
                }
            },
            "48": {
                start: {
                    line: 214,
                    column: 25
                },
                end: {
                    line: 214,
                    column: 65
                }
            },
            "49": {
                start: {
                    line: 216,
                    column: 4
                },
                end: {
                    line: 219,
                    column: 5
                }
            },
            "50": {
                start: {
                    line: 217,
                    column: 6
                },
                end: {
                    line: 217,
                    column: 61
                }
            },
            "51": {
                start: {
                    line: 218,
                    column: 6
                },
                end: {
                    line: 218,
                    column: 44
                }
            },
            "52": {
                start: {
                    line: 226,
                    column: 4
                },
                end: {
                    line: 226,
                    column: 25
                }
            },
            "53": {
                start: {
                    line: 229,
                    column: 28
                },
                end: {
                    line: 229,
                    column: 71
                }
            },
            "54": {
                start: {
                    line: 230,
                    column: 25
                },
                end: {
                    line: 230,
                    column: 65
                }
            },
            "55": {
                start: {
                    line: 232,
                    column: 4
                },
                end: {
                    line: 234,
                    column: 5
                }
            },
            "56": {
                start: {
                    line: 233,
                    column: 6
                },
                end: {
                    line: 233,
                    column: 39
                }
            },
            "57": {
                start: {
                    line: 236,
                    column: 4
                },
                end: {
                    line: 238,
                    column: 5
                }
            },
            "58": {
                start: {
                    line: 237,
                    column: 6
                },
                end: {
                    line: 237,
                    column: 42
                }
            },
            "59": {
                start: {
                    line: 240,
                    column: 6
                },
                end: {
                    line: 240,
                    column: 62
                }
            },
            "60": {
                start: {
                    line: 241,
                    column: 4
                },
                end: {
                    line: 245,
                    column: 5
                }
            },
            "61": {
                start: {
                    line: 242,
                    column: 6
                },
                end: {
                    line: 242,
                    column: 31
                }
            },
            "62": {
                start: {
                    line: 244,
                    column: 6
                },
                end: {
                    line: 244,
                    column: 52
                }
            },
            "63": {
                start: {
                    line: 247,
                    column: 4
                },
                end: {
                    line: 252,
                    column: 6
                }
            },
            "64": {
                start: {
                    line: 254,
                    column: 4
                },
                end: {
                    line: 254,
                    column: 21
                }
            },
            "65": {
                start: {
                    line: 263,
                    column: 4
                },
                end: {
                    line: 263,
                    column: 73
                }
            },
            "66": {
                start: {
                    line: 271,
                    column: 2
                },
                end: {
                    line: 271,
                    column: 30
                }
            },
            "67": {
                start: {
                    line: 272,
                    column: 2
                },
                end: {
                    line: 272,
                    column: 59
                }
            }
        },
        fnMap: {
            "0": {
                name: "getTemplate",
                decl: {
                    start: {
                        line: 12,
                        column: 9
                    },
                    end: {
                        line: 12,
                        column: 20
                    }
                },
                loc: {
                    start: {
                        line: 12,
                        column: 54
                    },
                    end: {
                        line: 18,
                        column: 1
                    }
                },
                line: 12
            },
            "1": {
                name: "(anonymous_1)",
                decl: {
                    start: {
                        line: 27,
                        column: 2
                    },
                    end: {
                        line: 27,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 27,
                        column: 28
                    },
                    end: {
                        line: 29,
                        column: 3
                    }
                },
                line: 27
            },
            "2": {
                name: "(anonymous_2)",
                decl: {
                    start: {
                        line: 33,
                        column: 2
                    },
                    end: {
                        line: 33,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 33,
                        column: 16
                    },
                    end: {
                        line: 110,
                        column: 3
                    }
                },
                line: 33
            },
            "3": {
                name: "(anonymous_3)",
                decl: {
                    start: {
                        line: 118,
                        column: 2
                    },
                    end: {
                        line: 118,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 118,
                        column: 28
                    },
                    end: {
                        line: 138,
                        column: 3
                    }
                },
                line: 118
            },
            "4": {
                name: "(anonymous_4)",
                decl: {
                    start: {
                        line: 120,
                        column: 37
                    },
                    end: {
                        line: 120,
                        column: 38
                    }
                },
                loc: {
                    start: {
                        line: 120,
                        column: 48
                    },
                    end: {
                        line: 122,
                        column: 5
                    }
                },
                line: 120
            },
            "5": {
                name: "(anonymous_5)",
                decl: {
                    start: {
                        line: 133,
                        column: 45
                    },
                    end: {
                        line: 133,
                        column: 46
                    }
                },
                loc: {
                    start: {
                        line: 133,
                        column: 51
                    },
                    end: {
                        line: 133,
                        column: 64
                    }
                },
                line: 133
            },
            "6": {
                name: "(anonymous_6)",
                decl: {
                    start: {
                        line: 137,
                        column: 41
                    },
                    end: {
                        line: 137,
                        column: 42
                    }
                },
                loc: {
                    start: {
                        line: 137,
                        column: 52
                    },
                    end: {
                        line: 137,
                        column: 75
                    }
                },
                line: 137
            },
            "7": {
                name: "(anonymous_7)",
                decl: {
                    start: {
                        line: 143,
                        column: 2
                    },
                    end: {
                        line: 143,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 143,
                        column: 27
                    },
                    end: {
                        line: 154,
                        column: 3
                    }
                },
                line: 143
            },
            "8": {
                name: "(anonymous_8)",
                decl: {
                    start: {
                        line: 159,
                        column: 2
                    },
                    end: {
                        line: 159,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 159,
                        column: 28
                    },
                    end: {
                        line: 168,
                        column: 3
                    }
                },
                line: 159
            },
            "9": {
                name: "(anonymous_9)",
                decl: {
                    start: {
                        line: 174,
                        column: 2
                    },
                    end: {
                        line: 174,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 174,
                        column: 42
                    },
                    end: {
                        line: 193,
                        column: 3
                    }
                },
                line: 174
            },
            "10": {
                name: "(anonymous_10)",
                decl: {
                    start: {
                        line: 199,
                        column: 2
                    },
                    end: {
                        line: 199,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 199,
                        column: 45
                    },
                    end: {
                        line: 207,
                        column: 3
                    }
                },
                line: 199
            },
            "11": {
                name: "(anonymous_11)",
                decl: {
                    start: {
                        line: 212,
                        column: 2
                    },
                    end: {
                        line: 212,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 212,
                        column: 40
                    },
                    end: {
                        line: 220,
                        column: 3
                    }
                },
                line: 212
            },
            "12": {
                name: "(anonymous_12)",
                decl: {
                    start: {
                        line: 225,
                        column: 2
                    },
                    end: {
                        line: 225,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 225,
                        column: 25
                    },
                    end: {
                        line: 255,
                        column: 3
                    }
                },
                line: 225
            },
            "13": {
                name: "(anonymous_13)",
                decl: {
                    start: {
                        line: 261,
                        column: 2
                    },
                    end: {
                        line: 261,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 261,
                        column: 49
                    },
                    end: {
                        line: 264,
                        column: 3
                    }
                },
                line: 261
            },
            "14": {
                name: "initComponents",
                decl: {
                    start: {
                        line: 270,
                        column: 16
                    },
                    end: {
                        line: 270,
                        column: 30
                    }
                },
                loc: {
                    start: {
                        line: 270,
                        column: 39
                    },
                    end: {
                        line: 273,
                        column: 1
                    }
                },
                line: 270
            }
        },
        branchMap: {
            "0": {
                loc: {
                    start: {
                        line: 14,
                        column: 2
                    },
                    end: {
                        line: 16,
                        column: 3
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 14,
                            column: 2
                        },
                        end: {
                            line: 16,
                            column: 3
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 14
            },
            "1": {
                loc: {
                    start: {
                        line: 132,
                        column: 4
                    },
                    end: {
                        line: 134,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 132,
                            column: 4
                        },
                        end: {
                            line: 134,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 132
            },
            "2": {
                loc: {
                    start: {
                        line: 150,
                        column: 4
                    },
                    end: {
                        line: 153,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 150,
                            column: 4
                        },
                        end: {
                            line: 153,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 150
            },
            "3": {
                loc: {
                    start: {
                        line: 164,
                        column: 4
                    },
                    end: {
                        line: 167,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 164,
                            column: 4
                        },
                        end: {
                            line: 167,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 164
            },
            "4": {
                loc: {
                    start: {
                        line: 181,
                        column: 4
                    },
                    end: {
                        line: 189,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 181,
                            column: 4
                        },
                        end: {
                            line: 189,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 181
            },
            "5": {
                loc: {
                    start: {
                        line: 216,
                        column: 4
                    },
                    end: {
                        line: 219,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 216,
                            column: 4
                        },
                        end: {
                            line: 219,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 216
            },
            "6": {
                loc: {
                    start: {
                        line: 216,
                        column: 8
                    },
                    end: {
                        line: 216,
                        column: 56
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 216,
                            column: 8
                        },
                        end: {
                            line: 216,
                            column: 23
                        }
                    },
                    {
                        start: {
                            line: 216,
                            column: 27
                        },
                        end: {
                            line: 216,
                            column: 39
                        }
                    },
                    {
                        start: {
                            line: 216,
                            column: 43
                        },
                        end: {
                            line: 216,
                            column: 56
                        }
                    }
                ],
                line: 216
            },
            "7": {
                loc: {
                    start: {
                        line: 232,
                        column: 4
                    },
                    end: {
                        line: 234,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 232,
                            column: 4
                        },
                        end: {
                            line: 234,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 232
            },
            "8": {
                loc: {
                    start: {
                        line: 236,
                        column: 4
                    },
                    end: {
                        line: 238,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 236,
                            column: 4
                        },
                        end: {
                            line: 238,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 236
            },
            "9": {
                loc: {
                    start: {
                        line: 241,
                        column: 4
                    },
                    end: {
                        line: 245,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 241,
                            column: 4
                        },
                        end: {
                            line: 245,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: 243,
                            column: 11
                        },
                        end: {
                            line: 245,
                            column: 5
                        }
                    }
                ],
                line: 241
            }
        },
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0,
            "18": 0,
            "19": 0,
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "31": 0,
            "32": 0,
            "33": 0,
            "34": 0,
            "35": 0,
            "36": 0,
            "37": 0,
            "38": 0,
            "39": 0,
            "40": 0,
            "41": 0,
            "42": 0,
            "43": 0,
            "44": 0,
            "45": 0,
            "46": 0,
            "47": 0,
            "48": 0,
            "49": 0,
            "50": 0,
            "51": 0,
            "52": 0,
            "53": 0,
            "54": 0,
            "55": 0,
            "56": 0,
            "57": 0,
            "58": 0,
            "59": 0,
            "60": 0,
            "61": 0,
            "62": 0,
            "63": 0,
            "64": 0,
            "65": 0,
            "66": 0,
            "67": 0
        },
        f: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0
        },
        b: {
            "0": [
                0,
                0
            ],
            "1": [
                0,
                0
            ],
            "2": [
                0,
                0
            ],
            "3": [
                0,
                0
            ],
            "4": [
                0,
                0
            ],
            "5": [
                0,
                0
            ],
            "6": [
                0,
                0,
                0
            ],
            "7": [
                0,
                0
            ],
            "8": [
                0,
                0
            ],
            "9": [
                0,
                0
            ]
        },
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "205b5fc36e85243b346fb9aa07974bac3eda5ebe"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_h53nmsx2j = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_h53nmsx2j();
//declare const process: { env: { DATABASE_HOST: string; AUTH_PATH: string } };
const loginComponentId = (cov_h53nmsx2j().s[0]++, "#login-component-template");
/**
 * Get the template from the DOM
 * @param id - The CSS selector for the template element.
 * @returns the template element from the DOM.
 * @throws an error if the specified ID does not correspond to a template element.
 */ function getTemplate(id) {
    cov_h53nmsx2j().f[0]++;
    const template = (cov_h53nmsx2j().s[1]++, document.querySelector(id));
    cov_h53nmsx2j().s[2]++;
    if (!(template instanceof HTMLTemplateElement)) {
        cov_h53nmsx2j().b[0][0]++;
        cov_h53nmsx2j().s[3]++;
        throw new Error(`Error: ${id} is not a template`);
    } else cov_h53nmsx2j().b[0][1]++;
    cov_h53nmsx2j().s[4]++;
    return template;
}
class LoginComponent extends HTMLElement {
    static template;
    shadow;
    username = (cov_h53nmsx2j().s[5]++, null);
    static initialize() {
        cov_h53nmsx2j().f[1]++;
        cov_h53nmsx2j().s[6]++;
        LoginComponent.template = getTemplate(loginComponentId);
    }
    /**
   * Constructor defines the shadow root and appends the template content to the shadow root.
   */ constructor(){
        cov_h53nmsx2j().f[2]++;
        cov_h53nmsx2j().s[7]++;
        super();
        cov_h53nmsx2j().s[8]++;
        this.shadow = this.attachShadow({
            mode: "open"
        });
        // Append the template content to the shadow root
        cov_h53nmsx2j().s[9]++;
        this.shadow.append(LoginComponent.template.content.cloneNode(true));
        // Inject styles specific to the component
        const style = (cov_h53nmsx2j().s[10]++, document.createElement("style"));
        cov_h53nmsx2j().s[11]++;
        style.textContent = `
      #popup-overlay {
        position: fixed;
        top: 0; left: 0;
        width: 100%; height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 10;
      }

      #popup {
        font-family: "RubikBurned", sans-serif;
        font-size: 13pt;
        position: fixed;
        justify-content: center;
        align-items: center;
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        z-index: 1000;
      }
      
      #close-popup {
        background: #bbaab8;
        color: white;
        border: none;
        padding: 5px;
        cursor: pointer;
        border-radius: 4px;
      }

      #login-form {
        font-family: "Jersey20", sans-serif;
        display: flex;
        flex-direction: column;
      }

      #login-form input {
        font-family: "Jersey20", sans-serif;
        font-size: 11.5pt;
        margin: 5px 0;
        padding: 8px;
        border-radius: 4px;
        border: 1px solid #44426e;
      }

      #login-form input:focus {
        outline: none;
        border-color: #44426e;
        box-shadow: 0 0 5px rgba(187, 170, 184, 0.5);
      }

      #login-form button {
        font-family: "Jersey20", sans-serif;
        padding: 10px;
        background: #3c1634;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }

      .blur {
        filter: blur(8px);
        -webkit-filter: blur(8px);}
      }
    `;
        cov_h53nmsx2j().s[12]++;
        this.shadow.appendChild(style);
    }
    /**
   * Lifecycle method called when the component is connected to the DOM.
   * It sets up event listeners for handling popup cancellation, login form submission,
   * and logout button click. Additionally, it manages the behavior of the login dialog
   * and its associated components.
   */ connectedCallback() {
        cov_h53nmsx2j().f[3]++;
        const popup = (cov_h53nmsx2j().s[13]++, this.shadow.querySelector("#popup"));
        cov_h53nmsx2j().s[14]++;
        popup.addEventListener("cancel", (event)=>{
            cov_h53nmsx2j().f[4]++;
            cov_h53nmsx2j().s[15]++;
            event.preventDefault();
        });
        // const closeButton = this.shadow.querySelector(
        //   "#close-popup",
        // ) as HTMLButtonElement;
        const loginForm = (cov_h53nmsx2j().s[16]++, this.shadow.querySelector("#login-form"));
        const logoutButton = (cov_h53nmsx2j().s[17]++, document.getElementById("logout-button"));
        cov_h53nmsx2j().s[18]++;
        if (logoutButton) {
            cov_h53nmsx2j().b[1][0]++;
            cov_h53nmsx2j().s[19]++;
            logoutButton.addEventListener("click", ()=>{
                cov_h53nmsx2j().f[5]++;
                cov_h53nmsx2j().s[20]++;
                return this.logout();
            });
        } else cov_h53nmsx2j().b[1][1]++;
        // Event listeners for closing and submitting
        // closeButton.addEventListener("click", () => this.hidePopup());
        cov_h53nmsx2j().s[21]++;
        loginForm.addEventListener("submit", (event)=>{
            cov_h53nmsx2j().f[6]++;
            cov_h53nmsx2j().s[22]++;
            return this.submitLogin(event);
        });
    }
    /**
   * Displays the popup dialog and adds a blur effect to the main content.
   */ showPopup() {
        cov_h53nmsx2j().f[7]++;
        const popup = (cov_h53nmsx2j().s[23]++, this.shadow.querySelector("#popup"));
        cov_h53nmsx2j().s[24]++;
        popup.showModal();
        // Add blur effect to the main content
        const backPage = (cov_h53nmsx2j().s[25]++, document.getElementById("app"));
        cov_h53nmsx2j().s[26]++;
        if (backPage) {
            cov_h53nmsx2j().b[2][0]++;
            cov_h53nmsx2j().s[27]++;
            backPage.classList.add("blur");
            cov_h53nmsx2j().s[28]++;
            backPage.style.pointerEvents = "none"; // Disable interaction
        } else cov_h53nmsx2j().b[2][1]++;
    }
    /**
   * Closes the popup dialog and removes the blur effect from the main content.
   */ hidePopup() {
        cov_h53nmsx2j().f[8]++;
        const popup = (cov_h53nmsx2j().s[29]++, this.shadow.querySelector("#popup"));
        cov_h53nmsx2j().s[30]++;
        popup.close();
        // Remove blur effect from the main content
        const backPage = (cov_h53nmsx2j().s[31]++, document.getElementById("app"));
        cov_h53nmsx2j().s[32]++;
        if (backPage) {
            cov_h53nmsx2j().b[3][0]++;
            cov_h53nmsx2j().s[33]++;
            backPage.classList.remove("blur");
            cov_h53nmsx2j().s[34]++;
            backPage.style.pointerEvents = ""; // Restore interaction
        } else cov_h53nmsx2j().b[3][1]++;
    }
    /**
   * Connect to backend and handle the login submission.
   * @param event - The event triggered by the login form submission.
   */ submitLogin(event) {
        cov_h53nmsx2j().f[9]++;
        cov_h53nmsx2j().s[35]++;
        event.preventDefault();
        const usernameInput = (cov_h53nmsx2j().s[36]++, this.shadow.querySelector("#username"));
        cov_h53nmsx2j().s[37]++;
        (0, _slog.slog).info("Submitting login", [
            "username",
            usernameInput.value
        ]);
        cov_h53nmsx2j().s[38]++;
        this.username = usernameInput.value.trim();
        cov_h53nmsx2j().s[39]++;
        if (this.username) {
            cov_h53nmsx2j().b[4][0]++;
            cov_h53nmsx2j().s[40]++;
            this.dispatchEvent(new CustomEvent("login-attempt", {
                detail: {
                    username: this.username
                },
                bubbles: true,
                composed: true
            }));
        } else cov_h53nmsx2j().b[4][1]++;
        cov_h53nmsx2j().s[41]++;
        this.hidePopup();
        cov_h53nmsx2j().s[42]++;
        console.log("Login submitted");
    }
    /**
   * Updates the view with showing login.
   * @param token - The token received from the backend.
   */ displaySuccess(token) {
        cov_h53nmsx2j().f[10]++;
        cov_h53nmsx2j().s[43]++;
        (0, _slog.slog).info("Displaying success in UI", [
            "token",
            token
        ]);
        // Get the username property from input
        const usernameInput = (cov_h53nmsx2j().s[44]++, this.shadow.querySelector("#username"));
        cov_h53nmsx2j().s[45]++;
        this.username = usernameInput.value;
        cov_h53nmsx2j().s[46]++;
        this.updateUsernameDisplay();
    }
    /**
   * Updates the username display next to the login button.
   */ updateUsernameDisplay() {
        cov_h53nmsx2j().f[11]++;
        const usernameDisplay = (cov_h53nmsx2j().s[47]++, document.getElementById("username-display"));
        const logoutButton = (cov_h53nmsx2j().s[48]++, document.getElementById("logout-button"));
        cov_h53nmsx2j().s[49]++;
        if ((cov_h53nmsx2j().b[6][0]++, usernameDisplay) && (cov_h53nmsx2j().b[6][1]++, logoutButton) && (cov_h53nmsx2j().b[6][2]++, this.username)) {
            cov_h53nmsx2j().b[5][0]++;
            cov_h53nmsx2j().s[50]++;
            usernameDisplay.textContent = `User: ${this.username}`;
            cov_h53nmsx2j().s[51]++;
            logoutButton.style.display = "inline";
        } else cov_h53nmsx2j().b[5][1]++;
    }
    /**
   * Logs the user out by clearing the username and updating the UI.
   */ logout() {
        cov_h53nmsx2j().f[12]++;
        cov_h53nmsx2j().s[52]++;
        this.username = null;
        // Clear the username display and hide logout button
        const usernameDisplay = (cov_h53nmsx2j().s[53]++, document.getElementById("username-display"));
        const logoutButton = (cov_h53nmsx2j().s[54]++, document.getElementById("logout-button"));
        cov_h53nmsx2j().s[55]++;
        if (usernameDisplay) {
            cov_h53nmsx2j().b[7][0]++;
            cov_h53nmsx2j().s[56]++;
            usernameDisplay.textContent = "";
        } else cov_h53nmsx2j().b[7][1]++;
        cov_h53nmsx2j().s[57]++;
        if (logoutButton) {
            cov_h53nmsx2j().b[8][0]++;
            cov_h53nmsx2j().s[58]++;
            logoutButton.style.display = "none";
        } else cov_h53nmsx2j().b[8][1]++;
        const usernameInput = (cov_h53nmsx2j().s[59]++, this.shadow.querySelector("#username"));
        cov_h53nmsx2j().s[60]++;
        if (usernameInput) {
            cov_h53nmsx2j().b[9][0]++;
            cov_h53nmsx2j().s[61]++;
            usernameInput.value = ""; // Clear the input field
        } else {
            cov_h53nmsx2j().b[9][1]++;
            cov_h53nmsx2j().s[62]++;
            (0, _slog.slog).warn("Username input field not cleared");
        }
        // Dispatch a "logout" event
        cov_h53nmsx2j().s[63]++;
        this.dispatchEvent(new CustomEvent("logout", {
            bubbles: true,
            composed: true
        }));
        // Show login modal again
        cov_h53nmsx2j().s[64]++;
        this.showPopup();
    }
    /**
   * Updates the view with an error message.
   * @param errorMessage - The error message to display.
   */ displayError(errorMessage) {
        cov_h53nmsx2j().f[13]++;
        cov_h53nmsx2j().s[65]++;
        // TODO: add some error message to UI
        (0, _slog.slog).warn("Displaying error in UI", [
            "error",
            errorMessage.message
        ]);
    }
}
function initComponents() {
    cov_h53nmsx2j().f[14]++;
    cov_h53nmsx2j().s[66]++;
    LoginComponent.initialize();
    cov_h53nmsx2j().s[67]++;
    customElements.define("login-component", LoginComponent);
}

},{"../slog":"jExiC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kJ80C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A custom web component representing a workspace, extending `HTMLElement`.
 * Provides functionality for interacting with workspace-related elements,
 * including a dropdown, refresh button, and error container.
 */ parcelHelpers.export(exports, "WorkspaceComponent", ()=>WorkspaceComponent);
// src/view/WorkspaceComponent.ts
var _slog = require("../slog");
function cov_1xose5suuh() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/view/WorkspaceComponents.ts";
    var hash = "db76d546dd6440e473ccfe7da305b15fc00a12c3";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/view/WorkspaceComponents.ts",
        statementMap: {
            "0": {
                start: {
                    line: 22,
                    column: 4
                },
                end: {
                    line: 22,
                    column: 12
                }
            },
            "1": {
                start: {
                    line: 23,
                    column: 4
                },
                end: {
                    line: 23,
                    column: 54
                }
            },
            "2": {
                start: {
                    line: 26,
                    column: 19
                },
                end: {
                    line: 26,
                    column: 51
                }
            },
            "3": {
                start: {
                    line: 27,
                    column: 4
                },
                end: {
                    line: 27,
                    column: 37
                }
            },
            "4": {
                start: {
                    line: 28,
                    column: 4
                },
                end: {
                    line: 28,
                    column: 36
                }
            },
            "5": {
                start: {
                    line: 29,
                    column: 4
                },
                end: {
                    line: 29,
                    column: 76
                }
            },
            "6": {
                start: {
                    line: 29,
                    column: 43
                },
                end: {
                    line: 29,
                    column: 74
                }
            },
            "7": {
                start: {
                    line: 32,
                    column: 4
                },
                end: {
                    line: 32,
                    column: 63
                }
            },
            "8": {
                start: {
                    line: 33,
                    column: 4
                },
                end: {
                    line: 33,
                    column: 63
                }
            },
            "9": {
                start: {
                    line: 36,
                    column: 4
                },
                end: {
                    line: 36,
                    column: 60
                }
            },
            "10": {
                start: {
                    line: 37,
                    column: 4
                },
                end: {
                    line: 37,
                    column: 57
                }
            },
            "11": {
                start: {
                    line: 38,
                    column: 4
                },
                end: {
                    line: 38,
                    column: 47
                }
            },
            "12": {
                start: {
                    line: 41,
                    column: 4
                },
                end: {
                    line: 41,
                    column: 67
                }
            },
            "13": {
                start: {
                    line: 42,
                    column: 4
                },
                end: {
                    line: 42,
                    column: 66
                }
            },
            "14": {
                start: {
                    line: 43,
                    column: 4
                },
                end: {
                    line: 43,
                    column: 74
                }
            },
            "15": {
                start: {
                    line: 44,
                    column: 4
                },
                end: {
                    line: 46,
                    column: 6
                }
            },
            "16": {
                start: {
                    line: 45,
                    column: 6
                },
                end: {
                    line: 45,
                    column: 33
                }
            },
            "17": {
                start: {
                    line: 48,
                    column: 4
                },
                end: {
                    line: 48,
                    column: 52
                }
            },
            "18": {
                start: {
                    line: 50,
                    column: 4
                },
                end: {
                    line: 50,
                    column: 76
                }
            },
            "19": {
                start: {
                    line: 53,
                    column: 18
                },
                end: {
                    line: 53,
                    column: 49
                }
            },
            "20": {
                start: {
                    line: 54,
                    column: 4
                },
                end: {
                    line: 139,
                    column: 6
                }
            },
            "21": {
                start: {
                    line: 140,
                    column: 4
                },
                end: {
                    line: 140,
                    column: 35
                }
            },
            "22": {
                start: {
                    line: 147,
                    column: 4
                },
                end: {
                    line: 158,
                    column: 5
                }
            },
            "23": {
                start: {
                    line: 148,
                    column: 6
                },
                end: {
                    line: 148,
                    column: 52
                }
            },
            "24": {
                start: {
                    line: 151,
                    column: 6
                },
                end: {
                    line: 156,
                    column: 8
                }
            },
            "25": {
                start: {
                    line: 157,
                    column: 6
                },
                end: {
                    line: 157,
                    column: 53
                }
            },
            "26": {
                start: {
                    line: 166,
                    column: 4
                },
                end: {
                    line: 166,
                    column: 42
                }
            },
            "27": {
                start: {
                    line: 168,
                    column: 4
                },
                end: {
                    line: 174,
                    column: 7
                }
            },
            "28": {
                start: {
                    line: 169,
                    column: 19
                },
                end: {
                    line: 169,
                    column: 52
                }
            },
            "29": {
                start: {
                    line: 170,
                    column: 6
                },
                end: {
                    line: 170,
                    column: 42
                }
            },
            "30": {
                start: {
                    line: 171,
                    column: 6
                },
                end: {
                    line: 171,
                    column: 35
                }
            },
            "31": {
                start: {
                    line: 172,
                    column: 6
                },
                end: {
                    line: 172,
                    column: 78
                }
            },
            "32": {
                start: {
                    line: 172,
                    column: 43
                },
                end: {
                    line: 172,
                    column: 76
                }
            },
            "33": {
                start: {
                    line: 173,
                    column: 6
                },
                end: {
                    line: 173,
                    column: 47
                }
            },
            "34": {
                start: {
                    line: 176,
                    column: 4
                },
                end: {
                    line: 176,
                    column: 28
                }
            },
            "35": {
                start: {
                    line: 183,
                    column: 19
                },
                end: {
                    line: 183,
                    column: 77
                }
            },
            "36": {
                start: {
                    line: 184,
                    column: 4
                },
                end: {
                    line: 188,
                    column: 5
                }
            },
            "37": {
                start: {
                    line: 185,
                    column: 19
                },
                end: {
                    line: 185,
                    column: 49
                }
            },
            "38": {
                start: {
                    line: 186,
                    column: 6
                },
                end: {
                    line: 186,
                    column: 81
                }
            },
            "39": {
                start: {
                    line: 187,
                    column: 6
                },
                end: {
                    line: 187,
                    column: 76
                }
            },
            "40": {
                start: {
                    line: 196,
                    column: 4
                },
                end: {
                    line: 196,
                    column: 62
                }
            },
            "41": {
                start: {
                    line: 197,
                    column: 4
                },
                end: {
                    line: 197,
                    column: 50
                }
            },
            "42": {
                start: {
                    line: 200,
                    column: 25
                },
                end: {
                    line: 202,
                    column: 27
                }
            },
            "43": {
                start: {
                    line: 203,
                    column: 4
                },
                end: {
                    line: 205,
                    column: 5
                }
            },
            "44": {
                start: {
                    line: 204,
                    column: 6
                },
                end: {
                    line: 204,
                    column: 43
                }
            },
            "45": {
                start: {
                    line: 208,
                    column: 4
                },
                end: {
                    line: 214,
                    column: 6
                }
            },
            "46": {
                start: {
                    line: 223,
                    column: 4
                },
                end: {
                    line: 223,
                    column: 39
                }
            },
            "47": {
                start: {
                    line: 226,
                    column: 24
                },
                end: {
                    line: 226,
                    column: 56
                }
            },
            "48": {
                start: {
                    line: 227,
                    column: 4
                },
                end: {
                    line: 227,
                    column: 56
                }
            },
            "49": {
                start: {
                    line: 228,
                    column: 4
                },
                end: {
                    line: 228,
                    column: 38
                }
            },
            "50": {
                start: {
                    line: 231,
                    column: 22
                },
                end: {
                    line: 231,
                    column: 52
                }
            },
            "51": {
                start: {
                    line: 232,
                    column: 4
                },
                end: {
                    line: 232,
                    column: 42
                }
            },
            "52": {
                start: {
                    line: 233,
                    column: 4
                },
                end: {
                    line: 233,
                    column: 32
                }
            },
            "53": {
                start: {
                    line: 236,
                    column: 4
                },
                end: {
                    line: 236,
                    column: 39
                }
            },
            "54": {
                start: {
                    line: 239,
                    column: 4
                },
                end: {
                    line: 239,
                    column: 64
                }
            },
            "55": {
                start: {
                    line: 239,
                    column: 46
                },
                end: {
                    line: 239,
                    column: 62
                }
            },
            "56": {
                start: {
                    line: 242,
                    column: 4
                },
                end: {
                    line: 242,
                    column: 49
                }
            },
            "57": {
                start: {
                    line: 245,
                    column: 4
                },
                end: {
                    line: 245,
                    column: 48
                }
            },
            "58": {
                start: {
                    line: 252,
                    column: 4
                },
                end: {
                    line: 252,
                    column: 47
                }
            },
            "59": {
                start: {
                    line: 253,
                    column: 4
                },
                end: {
                    line: 253,
                    column: 39
                }
            },
            "60": {
                start: {
                    line: 260,
                    column: 4
                },
                end: {
                    line: 265,
                    column: 6
                }
            }
        },
        fnMap: {
            "0": {
                name: "(anonymous_0)",
                decl: {
                    start: {
                        line: 21,
                        column: 2
                    },
                    end: {
                        line: 21,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 21,
                        column: 16
                    },
                    end: {
                        line: 141,
                        column: 3
                    }
                },
                line: 21
            },
            "1": {
                name: "(anonymous_1)",
                decl: {
                    start: {
                        line: 29,
                        column: 37
                    },
                    end: {
                        line: 29,
                        column: 38
                    }
                },
                loc: {
                    start: {
                        line: 29,
                        column: 43
                    },
                    end: {
                        line: 29,
                        column: 74
                    }
                },
                line: 29
            },
            "2": {
                name: "(anonymous_2)",
                decl: {
                    start: {
                        line: 44,
                        column: 58
                    },
                    end: {
                        line: 44,
                        column: 59
                    }
                },
                loc: {
                    start: {
                        line: 45,
                        column: 6
                    },
                    end: {
                        line: 45,
                        column: 33
                    }
                },
                line: 45
            },
            "3": {
                name: "(anonymous_3)",
                decl: {
                    start: {
                        line: 146,
                        column: 2
                    },
                    end: {
                        line: 146,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 146,
                        column: 43
                    },
                    end: {
                        line: 159,
                        column: 3
                    }
                },
                line: 146
            },
            "4": {
                name: "(anonymous_4)",
                decl: {
                    start: {
                        line: 165,
                        column: 2
                    },
                    end: {
                        line: 165,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 165,
                        column: 52
                    },
                    end: {
                        line: 177,
                        column: 3
                    }
                },
                line: 165
            },
            "5": {
                name: "(anonymous_5)",
                decl: {
                    start: {
                        line: 168,
                        column: 23
                    },
                    end: {
                        line: 168,
                        column: 24
                    }
                },
                loc: {
                    start: {
                        line: 168,
                        column: 38
                    },
                    end: {
                        line: 174,
                        column: 5
                    }
                },
                line: 168
            },
            "6": {
                name: "(anonymous_6)",
                decl: {
                    start: {
                        line: 172,
                        column: 37
                    },
                    end: {
                        line: 172,
                        column: 38
                    }
                },
                loc: {
                    start: {
                        line: 172,
                        column: 43
                    },
                    end: {
                        line: 172,
                        column: 76
                    }
                },
                line: 172
            },
            "7": {
                name: "(anonymous_7)",
                decl: {
                    start: {
                        line: 182,
                        column: 2
                    },
                    end: {
                        line: 182,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 182,
                        column: 35
                    },
                    end: {
                        line: 189,
                        column: 3
                    }
                },
                line: 182
            },
            "8": {
                name: "(anonymous_8)",
                decl: {
                    start: {
                        line: 195,
                        column: 2
                    },
                    end: {
                        line: 195,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 195,
                        column: 53
                    },
                    end: {
                        line: 215,
                        column: 3
                    }
                },
                line: 195
            },
            "9": {
                name: "(anonymous_9)",
                decl: {
                    start: {
                        line: 221,
                        column: 2
                    },
                    end: {
                        line: 221,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 221,
                        column: 42
                    },
                    end: {
                        line: 246,
                        column: 3
                    }
                },
                line: 221
            },
            "10": {
                name: "(anonymous_10)",
                decl: {
                    start: {
                        line: 239,
                        column: 40
                    },
                    end: {
                        line: 239,
                        column: 41
                    }
                },
                loc: {
                    start: {
                        line: 239,
                        column: 46
                    },
                    end: {
                        line: 239,
                        column: 62
                    }
                },
                line: 239
            },
            "11": {
                name: "(anonymous_11)",
                decl: {
                    start: {
                        line: 251,
                        column: 2
                    },
                    end: {
                        line: 251,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 251,
                        column: 27
                    },
                    end: {
                        line: 254,
                        column: 3
                    }
                },
                line: 251
            },
            "12": {
                name: "(anonymous_12)",
                decl: {
                    start: {
                        line: 259,
                        column: 2
                    },
                    end: {
                        line: 259,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 259,
                        column: 39
                    },
                    end: {
                        line: 266,
                        column: 3
                    }
                },
                line: 259
            }
        },
        branchMap: {
            "0": {
                loc: {
                    start: {
                        line: 147,
                        column: 4
                    },
                    end: {
                        line: 158,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 147,
                            column: 4
                        },
                        end: {
                            line: 158,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: 149,
                            column: 11
                        },
                        end: {
                            line: 158,
                            column: 5
                        }
                    }
                ],
                line: 147
            },
            "1": {
                loc: {
                    start: {
                        line: 184,
                        column: 4
                    },
                    end: {
                        line: 188,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 184,
                            column: 4
                        },
                        end: {
                            line: 188,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 184
            },
            "2": {
                loc: {
                    start: {
                        line: 203,
                        column: 4
                    },
                    end: {
                        line: 205,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 203,
                            column: 4
                        },
                        end: {
                            line: 205,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 203
            }
        },
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0,
            "18": 0,
            "19": 0,
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "31": 0,
            "32": 0,
            "33": 0,
            "34": 0,
            "35": 0,
            "36": 0,
            "37": 0,
            "38": 0,
            "39": 0,
            "40": 0,
            "41": 0,
            "42": 0,
            "43": 0,
            "44": 0,
            "45": 0,
            "46": 0,
            "47": 0,
            "48": 0,
            "49": 0,
            "50": 0,
            "51": 0,
            "52": 0,
            "53": 0,
            "54": 0,
            "55": 0,
            "56": 0,
            "57": 0,
            "58": 0,
            "59": 0,
            "60": 0
        },
        f: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0
        },
        b: {
            "0": [
                0,
                0
            ],
            "1": [
                0,
                0
            ],
            "2": [
                0,
                0
            ]
        },
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "db76d546dd6440e473ccfe7da305b15fc00a12c3"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_1xose5suuh = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_1xose5suuh();
class WorkspaceComponent extends HTMLElement {
    shadow;
    dropdownContainer;
    refreshButtonworkspace;
    errorContainer;
    /**
   * Creates and initializes the `WorkspaceComponent`.
   * This constructor sets up the shadow DOM and creates essential elements
   * such as a dropdown button and its event listeners.
   */ constructor(){
        cov_1xose5suuh().f[0]++;
        cov_1xose5suuh().s[0]++;
        super();
        cov_1xose5suuh().s[1]++;
        this.shadow = this.attachShadow({
            mode: "open"
        });
        // Create the dropdown button within the shadow DOM
        const button = (cov_1xose5suuh().s[2]++, document.createElement("button"));
        cov_1xose5suuh().s[3]++;
        button.textContent = "Workspace";
        cov_1xose5suuh().s[4]++;
        button.classList.add("dropbtn");
        cov_1xose5suuh().s[5]++;
        button.addEventListener("click", ()=>{
            cov_1xose5suuh().f[1]++;
            cov_1xose5suuh().s[6]++;
            return this.toggleDropdownVisibility();
        });
        // Create the dropdown container as a section within the shadow DOM
        cov_1xose5suuh().s[7]++;
        this.dropdownContainer = document.createElement("section");
        cov_1xose5suuh().s[8]++;
        this.dropdownContainer.classList.add("dropdown-container");
        // Create the error container
        cov_1xose5suuh().s[9]++;
        this.errorContainer = document.createElement("section");
        cov_1xose5suuh().s[10]++;
        this.errorContainer.classList.add("error-container");
        cov_1xose5suuh().s[11]++;
        this.errorContainer.style.display = "none"; // Initially hidden
        // Create the refresh button
        cov_1xose5suuh().s[12]++;
        this.refreshButtonworkspace = document.createElement("button");
        cov_1xose5suuh().s[13]++;
        this.refreshButtonworkspace.textContent = "Refresh workspace";
        cov_1xose5suuh().s[14]++;
        this.refreshButtonworkspace.classList.add("refresh-button-workspace");
        cov_1xose5suuh().s[15]++;
        this.refreshButtonworkspace.addEventListener("click", ()=>{
            cov_1xose5suuh().f[2]++;
            cov_1xose5suuh().s[16]++;
            return this.onRefreshButtonClick();
        });
        cov_1xose5suuh().s[17]++;
        this.shadow.append(this.refreshButtonworkspace);
        cov_1xose5suuh().s[18]++;
        this.shadow.append(button, this.dropdownContainer, this.errorContainer);
        // Add styles
        const style = (cov_1xose5suuh().s[19]++, document.createElement("style"));
        cov_1xose5suuh().s[20]++;
        style.textContent = `
      .dropbtn {
        font-family: "Jersey20", sans-serif;
        font-size: 12pt;
        background-color: #420e39;
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
        position: fixed;
        top: 10px;
        right: 100px;
      }
      
      .dropdown-container {
        display: none;
        position: fixed;
        background-color: white;
        border: 3px solid #ccc;
        border-radius: 3px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        z-index: 1000;
        width: 80px;
      }
    
      .dropdown-item {
        font-family: "Jersey20", sans-serif;
        padding: 10px;
        cursor: pointer;
        font-size: 15px;
      }
    
      .dropdown-item:hover {
        background-color: #f0f0f0;
      }
      /* Styles for the error container */
      .error-container {
        position: fixed;
        top: 60px; /* Adjust as needed */
        right: 100px; /* Align with the dropbtn */
        z-index: 1001; /* Above the dropdown */
      }

      .error-button-workspace {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        padding: 10px 15px;
        font-size: 14px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: space-between;
        min-width: 200px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      }

      .error-button-workspace .close-icon {
        margin-left: 10px;
        font-weight: bold;
        cursor: pointer;
      }

      .error-button-workspace:hover {
        background-color: #f5c6cb;
      }
      .refresh-button-workspace {
        font-family: "Jersey20", sans-serif;
        font-size: 12pt;
        background-color: #420e39;
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
        position: fixed;
        top: 10px;
        right: 450px; 
        margin-right: 5px;
      }
      .refresh-button-workspace:hover {
        background-color: #4a6bb5;
      }
    `;
        cov_1xose5suuh().s[21]++;
        this.shadow.appendChild(style);
    }
    /**
   * Toggles the dropdown visibility by dispatching a "get-workspaces" event.
   */ toggleDropdownVisibility() {
        cov_1xose5suuh().f[3]++;
        cov_1xose5suuh().s[22]++;
        if (this.dropdownContainer.style.display === "block") {
            cov_1xose5suuh().b[0][0]++;
            cov_1xose5suuh().s[23]++;
            this.dropdownContainer.style.display = "none";
        } else {
            cov_1xose5suuh().b[0][1]++;
            cov_1xose5suuh().s[24]++;
            // Dispatch a "get-workspaces" event
            this.dispatchEvent(new CustomEvent("get-workspaces", {
                bubbles: true,
                composed: true
            }));
            cov_1xose5suuh().s[25]++;
            this.dropdownContainer.style.display = "block";
        }
    }
    /**
   * Populates the dropdown with workspace names.
   * @param workspaces Array of workspace names.
   */ updateDropdown(workspaces) {
        cov_1xose5suuh().f[4]++;
        cov_1xose5suuh().s[26]++;
        this.dropdownContainer.innerHTML = ""; // Clear previous content
        cov_1xose5suuh().s[27]++;
        workspaces.forEach((workspace)=>{
            cov_1xose5suuh().f[5]++;
            const item = (cov_1xose5suuh().s[28]++, document.createElement("section"));
            cov_1xose5suuh().s[29]++;
            item.classList.add("dropdown-item");
            cov_1xose5suuh().s[30]++;
            item.textContent = workspace;
            cov_1xose5suuh().s[31]++;
            item.addEventListener("click", ()=>{
                cov_1xose5suuh().f[6]++;
                cov_1xose5suuh().s[32]++;
                return this.onWorkspaceSelect(workspace);
            });
            cov_1xose5suuh().s[33]++;
            this.dropdownContainer.appendChild(item);
        });
        cov_1xose5suuh().s[34]++;
        this.positionDropdown();
    }
    /**
   * Positions the dropdown under the "Workspace" button.
   */ positionDropdown() {
        cov_1xose5suuh().f[7]++;
        const button = (cov_1xose5suuh().s[35]++, this.shadow.querySelector(".dropbtn"));
        cov_1xose5suuh().s[36]++;
        if (button) {
            cov_1xose5suuh().b[1][0]++;
            const rect = (cov_1xose5suuh().s[37]++, button.getBoundingClientRect());
            cov_1xose5suuh().s[38]++;
            this.dropdownContainer.style.top = `${rect.bottom + window.scrollY + 8}px`;
            cov_1xose5suuh().s[39]++;
            this.dropdownContainer.style.left = `${rect.left + window.scrollX}px`;
        } else cov_1xose5suuh().b[1][1]++;
    }
    /**
   * Handles workspace selection by dispatching a "workspace-select" event.
   * @param workspace Selected workspace name.
   */ onWorkspaceSelect(workspace) {
        cov_1xose5suuh().f[8]++;
        cov_1xose5suuh().s[40]++;
        (0, _slog.slog).info("Selected workspace", [
            "workspace",
            workspace
        ]);
        cov_1xose5suuh().s[41]++;
        this.dropdownContainer.style.display = "none";
        // Update the sidebar's h2 with the selected workspace name
        const sidebarTitle = (cov_1xose5suuh().s[42]++, document.querySelector("#sidebar h2"));
        cov_1xose5suuh().s[43]++;
        if (sidebarTitle) {
            cov_1xose5suuh().b[2][0]++;
            cov_1xose5suuh().s[44]++;
            sidebarTitle.textContent = workspace;
        } else cov_1xose5suuh().b[2][1]++;
        // Dispatch a "workspace-select" event
        cov_1xose5suuh().s[45]++;
        this.dispatchEvent(new CustomEvent("get-collections", {
            detail: {
                workspace
            },
            bubbles: true,
            composed: true
        }));
    }
    /**
   * Displays an error message.
   * @param message - The error message to display.
   */ showError(message) {
        cov_1xose5suuh().f[9]++;
        cov_1xose5suuh().s[46]++;
        // Clear any existing error messages
        this.errorContainer.innerHTML = "";
        // Create the error button
        const errorButton = (cov_1xose5suuh().s[47]++, document.createElement("button"));
        cov_1xose5suuh().s[48]++;
        errorButton.classList.add("error-button-workspace");
        cov_1xose5suuh().s[49]++;
        errorButton.textContent = message;
        // Create the close icon
        const closeIcon = (cov_1xose5suuh().s[50]++, document.createElement("span"));
        cov_1xose5suuh().s[51]++;
        closeIcon.classList.add("close-icon");
        cov_1xose5suuh().s[52]++;
        closeIcon.textContent = "\u2716"; // Unicode for "x"
        // Append the close icon to the error button
        cov_1xose5suuh().s[53]++;
        errorButton.appendChild(closeIcon);
        // Add event listener to hide the error message when "x" is clicked
        cov_1xose5suuh().s[54]++;
        closeIcon.addEventListener("click", ()=>{
            cov_1xose5suuh().f[10]++;
            cov_1xose5suuh().s[55]++;
            return this.hideError();
        });
        // Append the error button to the error container
        cov_1xose5suuh().s[56]++;
        this.errorContainer.appendChild(errorButton);
        // Make the error container visible
        cov_1xose5suuh().s[57]++;
        this.errorContainer.style.display = "block";
    }
    /**
   * Hides the error message.
   */ hideError() {
        cov_1xose5suuh().f[11]++;
        cov_1xose5suuh().s[58]++;
        this.errorContainer.style.display = "none";
        cov_1xose5suuh().s[59]++;
        this.errorContainer.innerHTML = "";
    }
    /**
   * Handles the click event for the refresh button.
   */ onRefreshButtonClick() {
        cov_1xose5suuh().f[12]++;
        cov_1xose5suuh().s[60]++;
        document.dispatchEvent(new CustomEvent("get-workspaces", {
            bubbles: true,
            composed: true
        }));
    }
}

},{"../slog":"jExiC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lr558":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Sidebar Component: GET Doc which contains all the collections.
 */ parcelHelpers.export(exports, "SidebarComponent", ()=>SidebarComponent);
var _slog = require("../slog");
function cov_2okl4jjzbp() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/view/SidebarComponents.ts";
    var hash = "0a56ea25c332c8b11d109be9f8e6a9b0b1b552f4";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/view/SidebarComponents.ts",
        statementMap: {
            "0": {
                start: {
                    line: 16,
                    column: 4
                },
                end: {
                    line: 16,
                    column: 12
                }
            },
            "1": {
                start: {
                    line: 17,
                    column: 4
                },
                end: {
                    line: 17,
                    column: 54
                }
            },
            "2": {
                start: {
                    line: 20,
                    column: 4
                },
                end: {
                    line: 20,
                    column: 62
                }
            },
            "3": {
                start: {
                    line: 21,
                    column: 4
                },
                end: {
                    line: 21,
                    column: 61
                }
            },
            "4": {
                start: {
                    line: 23,
                    column: 4
                },
                end: {
                    line: 23,
                    column: 46
                }
            },
            "5": {
                start: {
                    line: 26,
                    column: 4
                },
                end: {
                    line: 26,
                    column: 58
                }
            },
            "6": {
                start: {
                    line: 27,
                    column: 4
                },
                end: {
                    line: 27,
                    column: 56
                }
            },
            "7": {
                start: {
                    line: 28,
                    column: 4
                },
                end: {
                    line: 28,
                    column: 63
                }
            },
            "8": {
                start: {
                    line: 29,
                    column: 4
                },
                end: {
                    line: 31,
                    column: 6
                }
            },
            "9": {
                start: {
                    line: 30,
                    column: 6
                },
                end: {
                    line: 30,
                    column: 33
                }
            },
            "10": {
                start: {
                    line: 33,
                    column: 4
                },
                end: {
                    line: 33,
                    column: 43
                }
            },
            "11": {
                start: {
                    line: 35,
                    column: 4
                },
                end: {
                    line: 35,
                    column: 67
                }
            },
            "12": {
                start: {
                    line: 36,
                    column: 4
                },
                end: {
                    line: 36,
                    column: 64
                }
            },
            "13": {
                start: {
                    line: 37,
                    column: 4
                },
                end: {
                    line: 37,
                    column: 54
                }
            },
            "14": {
                start: {
                    line: 39,
                    column: 4
                },
                end: {
                    line: 39,
                    column: 51
                }
            },
            "15": {
                start: {
                    line: 42,
                    column: 18
                },
                end: {
                    line: 42,
                    column: 49
                }
            },
            "16": {
                start: {
                    line: 43,
                    column: 4
                },
                end: {
                    line: 110,
                    column: 8
                }
            },
            "17": {
                start: {
                    line: 111,
                    column: 4
                },
                end: {
                    line: 111,
                    column: 35
                }
            },
            "18": {
                start: {
                    line: 120,
                    column: 4
                },
                end: {
                    line: 123,
                    column: 6
                }
            },
            "19": {
                start: {
                    line: 132,
                    column: 4
                },
                end: {
                    line: 135,
                    column: 6
                }
            },
            "20": {
                start: {
                    line: 143,
                    column: 34
                },
                end: {
                    line: 153,
                    column: 3
                }
            },
            "21": {
                start: {
                    line: 144,
                    column: 24
                },
                end: {
                    line: 144,
                    column: 44
                }
            },
            "22": {
                start: {
                    line: 145,
                    column: 22
                },
                end: {
                    line: 145,
                    column: 50
                }
            },
            "23": {
                start: {
                    line: 146,
                    column: 4
                },
                end: {
                    line: 152,
                    column: 6
                }
            },
            "24": {
                start: {
                    line: 164,
                    column: 4
                },
                end: {
                    line: 164,
                    column: 41
                }
            },
            "25": {
                start: {
                    line: 167,
                    column: 18
                },
                end: {
                    line: 167,
                    column: 55
                }
            },
            "26": {
                start: {
                    line: 168,
                    column: 4
                },
                end: {
                    line: 177,
                    column: 5
                }
            },
            "27": {
                start: {
                    line: 169,
                    column: 6
                },
                end: {
                    line: 169,
                    column: 63
                }
            },
            "28": {
                start: {
                    line: 171,
                    column: 23
                },
                end: {
                    line: 171,
                    column: 51
                }
            },
            "29": {
                start: {
                    line: 172,
                    column: 6
                },
                end: {
                    line: 172,
                    column: 66
                }
            },
            "30": {
                start: {
                    line: 173,
                    column: 6
                },
                end: {
                    line: 176,
                    column: 8
                }
            },
            "31": {
                start: {
                    line: 180,
                    column: 4
                },
                end: {
                    line: 186,
                    column: 7
                }
            },
            "32": {
                start: {
                    line: 181,
                    column: 19
                },
                end: {
                    line: 181,
                    column: 52
                }
            },
            "33": {
                start: {
                    line: 182,
                    column: 6
                },
                end: {
                    line: 182,
                    column: 41
                }
            },
            "34": {
                start: {
                    line: 183,
                    column: 6
                },
                end: {
                    line: 183,
                    column: 36
                }
            },
            "35": {
                start: {
                    line: 184,
                    column: 6
                },
                end: {
                    line: 184,
                    column: 77
                }
            },
            "36": {
                start: {
                    line: 184,
                    column: 43
                },
                end: {
                    line: 184,
                    column: 75
                }
            },
            "37": {
                start: {
                    line: 185,
                    column: 6
                },
                end: {
                    line: 185,
                    column: 46
                }
            },
            "38": {
                start: {
                    line: 194,
                    column: 4
                },
                end: {
                    line: 197,
                    column: 7
                }
            },
            "39": {
                start: {
                    line: 198,
                    column: 33
                },
                end: {
                    line: 198,
                    column: 70
                }
            },
            "40": {
                start: {
                    line: 199,
                    column: 26
                },
                end: {
                    line: 201,
                    column: 27
                }
            },
            "41": {
                start: {
                    line: 202,
                    column: 4
                },
                end: {
                    line: 202,
                    column: 77
                }
            },
            "42": {
                start: {
                    line: 203,
                    column: 4
                },
                end: {
                    line: 209,
                    column: 6
                }
            },
            "43": {
                start: {
                    line: 217,
                    column: 33
                },
                end: {
                    line: 217,
                    column: 70
                }
            },
            "44": {
                start: {
                    line: 218,
                    column: 22
                },
                end: {
                    line: 220,
                    column: 27
                }
            },
            "45": {
                start: {
                    line: 222,
                    column: 4
                },
                end: {
                    line: 222,
                    column: 40
                }
            },
            "46": {
                start: {
                    line: 223,
                    column: 4
                },
                end: {
                    line: 226,
                    column: 7
                }
            },
            "47": {
                start: {
                    line: 227,
                    column: 4
                },
                end: {
                    line: 233,
                    column: 6
                }
            },
            "48": {
                start: {
                    line: 242,
                    column: 4
                },
                end: {
                    line: 242,
                    column: 46
                }
            },
            "49": {
                start: {
                    line: 245,
                    column: 24
                },
                end: {
                    line: 245,
                    column: 56
                }
            },
            "50": {
                start: {
                    line: 246,
                    column: 4
                },
                end: {
                    line: 246,
                    column: 54
                }
            },
            "51": {
                start: {
                    line: 247,
                    column: 4
                },
                end: {
                    line: 247,
                    column: 38
                }
            },
            "52": {
                start: {
                    line: 250,
                    column: 22
                },
                end: {
                    line: 250,
                    column: 52
                }
            },
            "53": {
                start: {
                    line: 251,
                    column: 4
                },
                end: {
                    line: 251,
                    column: 42
                }
            },
            "54": {
                start: {
                    line: 252,
                    column: 4
                },
                end: {
                    line: 252,
                    column: 32
                }
            },
            "55": {
                start: {
                    line: 255,
                    column: 4
                },
                end: {
                    line: 255,
                    column: 39
                }
            },
            "56": {
                start: {
                    line: 258,
                    column: 4
                },
                end: {
                    line: 258,
                    column: 64
                }
            },
            "57": {
                start: {
                    line: 258,
                    column: 46
                },
                end: {
                    line: 258,
                    column: 62
                }
            },
            "58": {
                start: {
                    line: 261,
                    column: 4
                },
                end: {
                    line: 261,
                    column: 56
                }
            },
            "59": {
                start: {
                    line: 264,
                    column: 4
                },
                end: {
                    line: 264,
                    column: 55
                }
            },
            "60": {
                start: {
                    line: 271,
                    column: 4
                },
                end: {
                    line: 271,
                    column: 54
                }
            },
            "61": {
                start: {
                    line: 272,
                    column: 4
                },
                end: {
                    line: 272,
                    column: 46
                }
            }
        },
        fnMap: {
            "0": {
                name: "(anonymous_0)",
                decl: {
                    start: {
                        line: 15,
                        column: 2
                    },
                    end: {
                        line: 15,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 15,
                        column: 16
                    },
                    end: {
                        line: 112,
                        column: 3
                    }
                },
                line: 15
            },
            "1": {
                name: "(anonymous_1)",
                decl: {
                    start: {
                        line: 29,
                        column: 49
                    },
                    end: {
                        line: 29,
                        column: 50
                    }
                },
                loc: {
                    start: {
                        line: 30,
                        column: 6
                    },
                    end: {
                        line: 30,
                        column: 33
                    }
                },
                line: 30
            },
            "2": {
                name: "(anonymous_2)",
                decl: {
                    start: {
                        line: 118,
                        column: 2
                    },
                    end: {
                        line: 118,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 118,
                        column: 22
                    },
                    end: {
                        line: 124,
                        column: 3
                    }
                },
                line: 118
            },
            "3": {
                name: "(anonymous_3)",
                decl: {
                    start: {
                        line: 130,
                        column: 2
                    },
                    end: {
                        line: 130,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 130,
                        column: 25
                    },
                    end: {
                        line: 136,
                        column: 3
                    }
                },
                line: 130
            },
            "4": {
                name: "(anonymous_4)",
                decl: {
                    start: {
                        line: 143,
                        column: 34
                    },
                    end: {
                        line: 143,
                        column: 35
                    }
                },
                loc: {
                    start: {
                        line: 143,
                        column: 52
                    },
                    end: {
                        line: 153,
                        column: 3
                    }
                },
                line: 143
            },
            "5": {
                name: "(anonymous_5)",
                decl: {
                    start: {
                        line: 160,
                        column: 2
                    },
                    end: {
                        line: 160,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 163,
                        column: 10
                    },
                    end: {
                        line: 187,
                        column: 3
                    }
                },
                line: 163
            },
            "6": {
                name: "(anonymous_6)",
                decl: {
                    start: {
                        line: 180,
                        column: 24
                    },
                    end: {
                        line: 180,
                        column: 25
                    }
                },
                loc: {
                    start: {
                        line: 180,
                        column: 40
                    },
                    end: {
                        line: 186,
                        column: 5
                    }
                },
                line: 180
            },
            "7": {
                name: "(anonymous_7)",
                decl: {
                    start: {
                        line: 184,
                        column: 37
                    },
                    end: {
                        line: 184,
                        column: 38
                    }
                },
                loc: {
                    start: {
                        line: 184,
                        column: 43
                    },
                    end: {
                        line: 184,
                        column: 75
                    }
                },
                line: 184
            },
            "8": {
                name: "(anonymous_8)",
                decl: {
                    start: {
                        line: 193,
                        column: 2
                    },
                    end: {
                        line: 193,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 193,
                        column: 48
                    },
                    end: {
                        line: 210,
                        column: 3
                    }
                },
                line: 193
            },
            "9": {
                name: "(anonymous_9)",
                decl: {
                    start: {
                        line: 216,
                        column: 2
                    },
                    end: {
                        line: 216,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 216,
                        column: 39
                    },
                    end: {
                        line: 234,
                        column: 3
                    }
                },
                line: 216
            },
            "10": {
                name: "(anonymous_10)",
                decl: {
                    start: {
                        line: 240,
                        column: 2
                    },
                    end: {
                        line: 240,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 240,
                        column: 42
                    },
                    end: {
                        line: 265,
                        column: 3
                    }
                },
                line: 240
            },
            "11": {
                name: "(anonymous_11)",
                decl: {
                    start: {
                        line: 258,
                        column: 40
                    },
                    end: {
                        line: 258,
                        column: 41
                    }
                },
                loc: {
                    start: {
                        line: 258,
                        column: 46
                    },
                    end: {
                        line: 258,
                        column: 62
                    }
                },
                line: 258
            },
            "12": {
                name: "(anonymous_12)",
                decl: {
                    start: {
                        line: 270,
                        column: 2
                    },
                    end: {
                        line: 270,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 270,
                        column: 27
                    },
                    end: {
                        line: 273,
                        column: 3
                    }
                },
                line: 270
            }
        },
        branchMap: {
            "0": {
                loc: {
                    start: {
                        line: 168,
                        column: 4
                    },
                    end: {
                        line: 177,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 168,
                            column: 4
                        },
                        end: {
                            line: 177,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: 170,
                            column: 11
                        },
                        end: {
                            line: 177,
                            column: 5
                        }
                    }
                ],
                line: 168
            },
            "1": {
                loc: {
                    start: {
                        line: 169,
                        column: 26
                    },
                    end: {
                        line: 169,
                        column: 62
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 169,
                            column: 26
                        },
                        end: {
                            line: 169,
                            column: 39
                        }
                    },
                    {
                        start: {
                            line: 169,
                            column: 43
                        },
                        end: {
                            line: 169,
                            column: 62
                        }
                    }
                ],
                line: 169
            },
            "2": {
                loc: {
                    start: {
                        line: 172,
                        column: 29
                    },
                    end: {
                        line: 172,
                        column: 65
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 172,
                            column: 29
                        },
                        end: {
                            line: 172,
                            column: 42
                        }
                    },
                    {
                        start: {
                            line: 172,
                            column: 46
                        },
                        end: {
                            line: 172,
                            column: 65
                        }
                    }
                ],
                line: 172
            },
            "3": {
                loc: {
                    start: {
                        line: 199,
                        column: 26
                    },
                    end: {
                        line: 201,
                        column: 27
                    }
                },
                type: "cond-expr",
                locations: [
                    {
                        start: {
                            line: 200,
                            column: 8
                        },
                        end: {
                            line: 200,
                            column: 48
                        }
                    },
                    {
                        start: {
                            line: 201,
                            column: 8
                        },
                        end: {
                            line: 201,
                            column: 27
                        }
                    }
                ],
                line: 199
            },
            "4": {
                loc: {
                    start: {
                        line: 218,
                        column: 22
                    },
                    end: {
                        line: 220,
                        column: 27
                    }
                },
                type: "cond-expr",
                locations: [
                    {
                        start: {
                            line: 219,
                            column: 8
                        },
                        end: {
                            line: 219,
                            column: 48
                        }
                    },
                    {
                        start: {
                            line: 220,
                            column: 8
                        },
                        end: {
                            line: 220,
                            column: 27
                        }
                    }
                ],
                line: 218
            }
        },
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0,
            "18": 0,
            "19": 0,
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "31": 0,
            "32": 0,
            "33": 0,
            "34": 0,
            "35": 0,
            "36": 0,
            "37": 0,
            "38": 0,
            "39": 0,
            "40": 0,
            "41": 0,
            "42": 0,
            "43": 0,
            "44": 0,
            "45": 0,
            "46": 0,
            "47": 0,
            "48": 0,
            "49": 0,
            "50": 0,
            "51": 0,
            "52": 0,
            "53": 0,
            "54": 0,
            "55": 0,
            "56": 0,
            "57": 0,
            "58": 0,
            "59": 0,
            "60": 0,
            "61": 0
        },
        f: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0
        },
        b: {
            "0": [
                0,
                0
            ],
            "1": [
                0,
                0
            ],
            "2": [
                0,
                0
            ],
            "3": [
                0,
                0
            ],
            "4": [
                0,
                0
            ]
        },
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "0a56ea25c332c8b11d109be9f8e6a9b0b1b552f4"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_2okl4jjzbp = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_2okl4jjzbp();
class SidebarComponent extends HTMLElement {
    shadow;
    sidebarContainer;
    refreshButton;
    errorContainersidebar;
    /**
   * Constructor defines the shadow root and appends the sidebar container to the shadow root.
   */ constructor(){
        cov_2okl4jjzbp().f[0]++;
        cov_2okl4jjzbp().s[0]++;
        super();
        cov_2okl4jjzbp().s[1]++;
        this.shadow = this.attachShadow({
            mode: "open"
        });
        // Create the sidebar container within the shadow DOM
        cov_2okl4jjzbp().s[2]++;
        this.sidebarContainer = document.createElement("section");
        cov_2okl4jjzbp().s[3]++;
        this.sidebarContainer.classList.add("sidebar-container");
        cov_2okl4jjzbp().s[4]++;
        this.shadow.append(this.sidebarContainer);
        // Create the refresh button
        cov_2okl4jjzbp().s[5]++;
        this.refreshButton = document.createElement("button");
        cov_2okl4jjzbp().s[6]++;
        this.refreshButton.textContent = "Refresh channels";
        cov_2okl4jjzbp().s[7]++;
        this.refreshButton.classList.add("refresh-button-sidebar");
        cov_2okl4jjzbp().s[8]++;
        this.refreshButton.addEventListener("click", ()=>{
            cov_2okl4jjzbp().f[1]++;
            cov_2okl4jjzbp().s[9]++;
            return this.onRefreshButtonClick();
        });
        cov_2okl4jjzbp().s[10]++;
        this.shadow.append(this.refreshButton);
        // Create the error container
        cov_2okl4jjzbp().s[11]++;
        this.errorContainersidebar = document.createElement("section");
        cov_2okl4jjzbp().s[12]++;
        this.errorContainersidebar.classList.add("error-container");
        cov_2okl4jjzbp().s[13]++;
        this.errorContainersidebar.style.display = "none"; // Initially hidden
        cov_2okl4jjzbp().s[14]++;
        this.shadow.append(this.errorContainersidebar);
        // Add styles
        const style = (cov_2okl4jjzbp().s[15]++, document.createElement("style"));
        cov_2okl4jjzbp().s[16]++;
        style.textContent = `
        .sidebar-container {
          background-color: #E99E75;
          color: black;
          padding: 10px;
          width: 200px;
          position: fixed;
          overflow-y: auto;
          left: 0; 
        }
        .sidebar-item {
          font-family: "Jersey20", sans-serif;
          font-size: 1.55em;
          margin-bottom: 15px;
          padding: 10px;
          cursor: pointer;
          color: white;
          font-weight: bold;
        }
        .sidebar-item:hover {
          background-color: #f0f0f0;
        }
        .refresh-button-sidebar {
          font-family: "Jersey20", sans-serif;
          font-size: 12pt;
          margin-top: 410px;
          padding: 8px 10px;
          cursor: pointer;
          background-color: #420e39;
          color: white;
          border: none;
          border-radius: 10px;
        }
        .refresh-button-sidebar:hover {
          background-color: #4a6bb5;
        }
        /* Styles for the error container */
      .error-container {
        position: fixed;
        top: 500px; /* Adjust as needed */
        left: 0; /* Align with the sidebar */
        z-index: 1001; /* Above the dropdown */
      }

      .error-button-channel {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        padding: 10px 15px;
        font-size: 12px;
        cursor: pointer;
        display: flex;
        align-items: left;
        justify-content: space-between;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      }

      .error-button-channel.close-icon {
        margin-left: 10px;
        font-weight: bold;
        cursor: pointer;
      }

      .error-button-channe :hover {
        background-color: #f5c6cb;
      }
      `;
        cov_2okl4jjzbp().s[17]++;
        this.shadow.appendChild(style);
    }
    /**
   * Lifecycle method called when the element is connected to the DOM.
   * Listens for the "workspace-select" event and attaches the event listener for handling workspace selection.
   */ connectedCallback() {
        cov_2okl4jjzbp().f[2]++;
        cov_2okl4jjzbp().s[18]++;
        // Listen for the workspace-select event when the element is connected to the DOM
        document.addEventListener("workspace-select", this.handleWorkspaceSelect);
    }
    /**
   * Lifecycle method called when the element is disconnected from the DOM.
   * Removes the event listener for the "workspace-select" event to clean up resources.
   */ disconnectedCallback() {
        cov_2okl4jjzbp().f[3]++;
        cov_2okl4jjzbp().s[19]++;
        // Clean up the event listener when the element is removed from the DOM
        document.removeEventListener("workspace-select", this.handleWorkspaceSelect);
    }
    /**
   * Handles the "workspace-select" event, retrieves the collections for the selected workspace,
   * and updates the component accordingly.
   * @param event - The event triggered when a workspace is selected.
   */ handleWorkspaceSelect = (cov_2okl4jjzbp().s[20]++, (event)=>{
        cov_2okl4jjzbp().f[4]++;
        const customEvent = (cov_2okl4jjzbp().s[21]++, event);
        const workspace = (cov_2okl4jjzbp().s[22]++, customEvent.detail.workspace);
        cov_2okl4jjzbp().s[23]++;
        document.dispatchEvent(new CustomEvent("get-collections", {
            detail: {
                workspace
            },
            bubbles: true,
            composed: true
        }));
    });
    /**
   * Populates the workspace with the collections retrieved for the selected workspace.
   * @param collections - An array of collection names to be displayed in the workspace.
   * @param workspaceName - The name of the workspace for which the collections are being populated.
   */ populateCollections(collections, workspaceName) {
        cov_2okl4jjzbp().f[5]++;
        cov_2okl4jjzbp().s[24]++;
        this.sidebarContainer.innerHTML = ""; // Clear previous content
        // Update the workspace title (h2)
        const title = (cov_2okl4jjzbp().s[25]++, document.querySelector("#sidebar h2"));
        cov_2okl4jjzbp().s[26]++;
        if (title) {
            cov_2okl4jjzbp().b[0][0]++;
            cov_2okl4jjzbp().s[27]++;
            title.textContent = (cov_2okl4jjzbp().b[1][0]++, workspaceName) || (cov_2okl4jjzbp().b[1][1]++, "Unknown Workspace");
        } else {
            cov_2okl4jjzbp().b[0][1]++;
            const newTitle = (cov_2okl4jjzbp().s[28]++, document.createElement("h2"));
            cov_2okl4jjzbp().s[29]++;
            newTitle.textContent = (cov_2okl4jjzbp().b[2][0]++, workspaceName) || (cov_2okl4jjzbp().b[2][1]++, "Unknown Workspace");
            cov_2okl4jjzbp().s[30]++;
            this.sidebarContainer.insertBefore(newTitle, this.sidebarContainer.firstChild);
        }
        // Add each collection (channel) as a clickable item
        cov_2okl4jjzbp().s[31]++;
        collections.forEach((collection)=>{
            cov_2okl4jjzbp().f[6]++;
            const item = (cov_2okl4jjzbp().s[32]++, document.createElement("section"));
            cov_2okl4jjzbp().s[33]++;
            item.classList.add("sidebar-item");
            cov_2okl4jjzbp().s[34]++;
            item.textContent = collection;
            cov_2okl4jjzbp().s[35]++;
            item.addEventListener("click", ()=>{
                cov_2okl4jjzbp().f[7]++;
                cov_2okl4jjzbp().s[36]++;
                return this.onChannelSelect(collection);
            });
            cov_2okl4jjzbp().s[37]++;
            this.sidebarContainer.appendChild(item);
        });
    }
    /**
   * onChannelSelect function to select the channel
   * @param channel - The name of the channel to be selected.
   */ onChannelSelect(channel) {
        cov_2okl4jjzbp().f[8]++;
        cov_2okl4jjzbp().s[38]++;
        (0, _slog.slog).info("Selected channel in sidebar (sidebar onChannelSelect)", [
            "channel",
            channel
        ]);
        const workspaceNameElement = (cov_2okl4jjzbp().s[39]++, document.querySelector("#sidebar h2"));
        const workspaceName = (cov_2okl4jjzbp().s[40]++, workspaceNameElement ? (cov_2okl4jjzbp().b[3][0]++, workspaceNameElement.textContent?.trim()) : (cov_2okl4jjzbp().b[3][1]++, "Unknown Workspace"));
        cov_2okl4jjzbp().s[41]++;
        (0, _slog.slog).info("workspacename to be passed into event", [
            "channel",
            channel
        ]);
        cov_2okl4jjzbp().s[42]++;
        document.dispatchEvent(new CustomEvent("channel-select", {
            detail: {
                workspaceName,
                channel
            },
            bubbles: true,
            composed: true
        }));
    }
    /**
   * Handles the click event for the refresh button.
   * Triggers the refresh logic for the workspace component.
   */ onRefreshButtonClick() {
        cov_2okl4jjzbp().f[9]++;
        const workspaceNameElement = (cov_2okl4jjzbp().s[43]++, document.querySelector("#sidebar h2"));
        const workspace = (cov_2okl4jjzbp().s[44]++, workspaceNameElement ? (cov_2okl4jjzbp().b[4][0]++, workspaceNameElement.textContent?.trim()) : (cov_2okl4jjzbp().b[4][1]++, "Unknown Workspace"));
        cov_2okl4jjzbp().s[45]++;
        (0, _slog.slog).info("Refresh button clicked");
        cov_2okl4jjzbp().s[46]++;
        (0, _slog.slog).info("workspaceName to be passed into event", [
            "workspaceName",
            workspace
        ]);
        cov_2okl4jjzbp().s[47]++;
        document.dispatchEvent(new CustomEvent("get-collections", {
            detail: {
                workspace
            },
            bubbles: true,
            composed: true
        }));
    }
    /**
   * Displays an error message.
   * @param message - The error message to display.
   */ showError(message) {
        cov_2okl4jjzbp().f[10]++;
        cov_2okl4jjzbp().s[48]++;
        // Clear any existing error messages
        this.errorContainersidebar.innerHTML = "";
        // Create the error button
        const errorButton = (cov_2okl4jjzbp().s[49]++, document.createElement("button"));
        cov_2okl4jjzbp().s[50]++;
        errorButton.classList.add("error-button-channel");
        cov_2okl4jjzbp().s[51]++;
        errorButton.textContent = message;
        // Create the close icon
        const closeIcon = (cov_2okl4jjzbp().s[52]++, document.createElement("span"));
        cov_2okl4jjzbp().s[53]++;
        closeIcon.classList.add("close-icon");
        cov_2okl4jjzbp().s[54]++;
        closeIcon.textContent = "\u2716"; // Unicode for "x"
        // Append the close icon to the error button
        cov_2okl4jjzbp().s[55]++;
        errorButton.appendChild(closeIcon);
        // Add event listener to hide the error message when "x" is clicked
        cov_2okl4jjzbp().s[56]++;
        closeIcon.addEventListener("click", ()=>{
            cov_2okl4jjzbp().f[11]++;
            cov_2okl4jjzbp().s[57]++;
            return this.hideError();
        });
        // Append the error button to the error container
        cov_2okl4jjzbp().s[58]++;
        this.errorContainersidebar.appendChild(errorButton);
        // Make the error container visible
        cov_2okl4jjzbp().s[59]++;
        this.errorContainersidebar.style.display = "block";
    }
    /**
   * Hides the error message.
   */ hideError() {
        cov_2okl4jjzbp().f[12]++;
        cov_2okl4jjzbp().s[60]++;
        this.errorContainersidebar.style.display = "none";
        cov_2okl4jjzbp().s[61]++;
        this.errorContainersidebar.innerHTML = "";
    }
}

},{"../slog":"jExiC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3fr3u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * The MainContentComponent class is a custom Web Component designed to manage
 * the main content area of the application. This includes handling the header,
 * chat container, and error containers. It also maintains a message map and a retry queue
 * for handling message posting and retries.
 */ parcelHelpers.export(exports, "MainContentComponent", ()=>MainContentComponent);
var _slog = require("../slog");
function cov_1k7pt80ota() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/view/MainContentComponents.ts";
    var hash = "95b2d6b374188d2d0880681b2f2ac2997ab9eb1f";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/view/MainContentComponents.ts",
        statementMap: {
            "0": {
                start: {
                    line: 7,
                    column: 23
                },
                end: {
                    line: 18,
                    column: 31
                }
            },
            "1": {
                start: {
                    line: 23,
                    column: 22
                },
                end: {
                    line: 42,
                    column: 31
                }
            },
            "2": {
                start: {
                    line: 47,
                    column: 19
                },
                end: {
                    line: 59,
                    column: 31
                }
            },
            "3": {
                start: {
                    line: 88,
                    column: 23
                },
                end: {
                    line: 88,
                    column: 56
                }
            },
            "4": {
                start: {
                    line: 89,
                    column: 31
                },
                end: {
                    line: 89,
                    column: 33
                }
            },
            "5": {
                start: {
                    line: 94,
                    column: 4
                },
                end: {
                    line: 94,
                    column: 12
                }
            },
            "6": {
                start: {
                    line: 97,
                    column: 19
                },
                end: {
                    line: 97,
                    column: 54
                }
            },
            "7": {
                start: {
                    line: 100,
                    column: 4
                },
                end: {
                    line: 102,
                    column: 28
                }
            },
            "8": {
                start: {
                    line: 103,
                    column: 4
                },
                end: {
                    line: 105,
                    column: 21
                }
            },
            "9": {
                start: {
                    line: 106,
                    column: 4
                },
                end: {
                    line: 106,
                    column: 38
                }
            },
            "10": {
                start: {
                    line: 108,
                    column: 4
                },
                end: {
                    line: 108,
                    column: 36
                }
            },
            "11": {
                start: {
                    line: 111,
                    column: 4
                },
                end: {
                    line: 111,
                    column: 64
                }
            },
            "12": {
                start: {
                    line: 112,
                    column: 4
                },
                end: {
                    line: 112,
                    column: 61
                }
            },
            "13": {
                start: {
                    line: 113,
                    column: 4
                },
                end: {
                    line: 113,
                    column: 51
                }
            },
            "14": {
                start: {
                    line: 115,
                    column: 4
                },
                end: {
                    line: 115,
                    column: 43
                }
            },
            "15": {
                start: {
                    line: 117,
                    column: 4
                },
                end: {
                    line: 117,
                    column: 47
                }
            },
            "16": {
                start: {
                    line: 120,
                    column: 18
                },
                end: {
                    line: 120,
                    column: 49
                }
            },
            "17": {
                start: {
                    line: 121,
                    column: 4
                },
                end: {
                    line: 206,
                    column: 6
                }
            },
            "18": {
                start: {
                    line: 207,
                    column: 4
                },
                end: {
                    line: 207,
                    column: 30
                }
            },
            "19": {
                start: {
                    line: 214,
                    column: 25
                },
                end: {
                    line: 222,
                    column: 3
                }
            },
            "20": {
                start: {
                    line: 215,
                    column: 4
                },
                end: {
                    line: 215,
                    column: 52
                }
            },
            "21": {
                start: {
                    line: 216,
                    column: 24
                },
                end: {
                    line: 216,
                    column: 44
                }
            },
            "22": {
                start: {
                    line: 217,
                    column: 20
                },
                end: {
                    line: 217,
                    column: 46
                }
            },
            "23": {
                start: {
                    line: 218,
                    column: 4
                },
                end: {
                    line: 218,
                    column: 74
                }
            },
            "24": {
                start: {
                    line: 220,
                    column: 26
                },
                end: {
                    line: 220,
                    column: 47
                }
            },
            "25": {
                start: {
                    line: 221,
                    column: 4
                },
                end: {
                    line: 221,
                    column: 49
                }
            },
            "26": {
                start: {
                    line: 228,
                    column: 21
                },
                end: {
                    line: 232,
                    column: 3
                }
            },
            "27": {
                start: {
                    line: 229,
                    column: 4
                },
                end: {
                    line: 229,
                    column: 49
                }
            },
            "28": {
                start: {
                    line: 230,
                    column: 4
                },
                end: {
                    line: 230,
                    column: 38
                }
            },
            "29": {
                start: {
                    line: 231,
                    column: 4
                },
                end: {
                    line: 231,
                    column: 60
                }
            },
            "30": {
                start: {
                    line: 245,
                    column: 25
                },
                end: {
                    line: 245,
                    column: 58
                }
            },
            "31": {
                start: {
                    line: 247,
                    column: 14
                },
                end: {
                    line: 247,
                    column: 15
                }
            },
            "32": {
                start: {
                    line: 248,
                    column: 15
                },
                end: {
                    line: 248,
                    column: 30
                }
            },
            "33": {
                start: {
                    line: 249,
                    column: 4
                },
                end: {
                    line: 256,
                    column: 5
                }
            },
            "34": {
                start: {
                    line: 250,
                    column: 18
                },
                end: {
                    line: 250,
                    column: 46
                }
            },
            "35": {
                start: {
                    line: 251,
                    column: 6
                },
                end: {
                    line: 255,
                    column: 7
                }
            },
            "36": {
                start: {
                    line: 252,
                    column: 8
                },
                end: {
                    line: 252,
                    column: 19
                }
            },
            "37": {
                start: {
                    line: 254,
                    column: 8
                },
                end: {
                    line: 254,
                    column: 22
                }
            },
            "38": {
                start: {
                    line: 258,
                    column: 4
                },
                end: {
                    line: 258,
                    column: 40
                }
            },
            "39": {
                start: {
                    line: 259,
                    column: 4
                },
                end: {
                    line: 259,
                    column: 52
                }
            },
            "40": {
                start: {
                    line: 261,
                    column: 4
                },
                end: {
                    line: 261,
                    column: 46
                }
            },
            "41": {
                start: {
                    line: 269,
                    column: 4
                },
                end: {
                    line: 269,
                    column: 41
                }
            },
            "42": {
                start: {
                    line: 270,
                    column: 16
                },
                end: {
                    line: 270,
                    column: 46
                }
            },
            "43": {
                start: {
                    line: 272,
                    column: 4
                },
                end: {
                    line: 274,
                    column: 5
                }
            },
            "44": {
                start: {
                    line: 273,
                    column: 6
                },
                end: {
                    line: 273,
                    column: 31
                }
            },
            "45": {
                start: {
                    line: 281,
                    column: 19
                },
                end: {
                    line: 281,
                    column: 23
                }
            },
            "46": {
                start: {
                    line: 282,
                    column: 4
                },
                end: {
                    line: 290,
                    column: 5
                }
            },
            "47": {
                start: {
                    line: 283,
                    column: 6
                },
                end: {
                    line: 283,
                    column: 23
                }
            },
            "48": {
                start: {
                    line: 284,
                    column: 6
                },
                end: {
                    line: 289,
                    column: 9
                }
            },
            "49": {
                start: {
                    line: 285,
                    column: 8
                },
                end: {
                    line: 288,
                    column: 9
                }
            },
            "50": {
                start: {
                    line: 286,
                    column: 10
                },
                end: {
                    line: 286,
                    column: 70
                }
            },
            "51": {
                start: {
                    line: 286,
                    column: 58
                },
                end: {
                    line: 286,
                    column: 68
                }
            },
            "52": {
                start: {
                    line: 287,
                    column: 10
                },
                end: {
                    line: 287,
                    column: 26
                }
            },
            "53": {
                start: {
                    line: 299,
                    column: 23
                },
                end: {
                    line: 299,
                    column: 41
                }
            },
            "54": {
                start: {
                    line: 300,
                    column: 23
                },
                end: {
                    line: 300,
                    column: 57
                }
            },
            "55": {
                start: {
                    line: 301,
                    column: 37
                },
                end: {
                    line: 301,
                    column: 41
                }
            },
            "56": {
                start: {
                    line: 302,
                    column: 17
                },
                end: {
                    line: 302,
                    column: 22
                }
            },
            "57": {
                start: {
                    line: 303,
                    column: 4
                },
                end: {
                    line: 303,
                    column: 69
                }
            },
            "58": {
                start: {
                    line: 304,
                    column: 4
                },
                end: {
                    line: 304,
                    column: 74
                }
            },
            "59": {
                start: {
                    line: 306,
                    column: 28
                },
                end: {
                    line: 306,
                    column: 61
                }
            },
            "60": {
                start: {
                    line: 308,
                    column: 4
                },
                end: {
                    line: 314,
                    column: 5
                }
            },
            "61": {
                start: {
                    line: 309,
                    column: 6
                },
                end: {
                    line: 309,
                    column: 40
                }
            },
            "62": {
                start: {
                    line: 311,
                    column: 6
                },
                end: {
                    line: 311,
                    column: 43
                }
            },
            "63": {
                start: {
                    line: 313,
                    column: 6
                },
                end: {
                    line: 313,
                    column: 18
                }
            },
            "64": {
                start: {
                    line: 316,
                    column: 4
                },
                end: {
                    line: 352,
                    column: 5
                }
            },
            "65": {
                start: {
                    line: 317,
                    column: 6
                },
                end: {
                    line: 317,
                    column: 73
                }
            },
            "66": {
                start: {
                    line: 318,
                    column: 28
                },
                end: {
                    line: 318,
                    column: 59
                }
            },
            "67": {
                start: {
                    line: 319,
                    column: 6
                },
                end: {
                    line: 322,
                    column: 7
                }
            },
            "68": {
                start: {
                    line: 320,
                    column: 8
                },
                end: {
                    line: 320,
                    column: 78
                }
            },
            "69": {
                start: {
                    line: 320,
                    column: 48
                },
                end: {
                    line: 320,
                    column: 78
                }
            },
            "70": {
                start: {
                    line: 321,
                    column: 8
                },
                end: {
                    line: 321,
                    column: 21
                }
            },
            "71": {
                start: {
                    line: 323,
                    column: 6
                },
                end: {
                    line: 326,
                    column: 8
                }
            },
            "72": {
                start: {
                    line: 327,
                    column: 6
                },
                end: {
                    line: 330,
                    column: 7
                }
            },
            "73": {
                start: {
                    line: 328,
                    column: 8
                },
                end: {
                    line: 328,
                    column: 22
                }
            },
            "74": {
                start: {
                    line: 329,
                    column: 8
                },
                end: {
                    line: 329,
                    column: 58
                }
            },
            "75": {
                start: {
                    line: 332,
                    column: 6
                },
                end: {
                    line: 332,
                    column: 52
                }
            },
            "76": {
                start: {
                    line: 334,
                    column: 6
                },
                end: {
                    line: 334,
                    column: 40
                }
            },
            "77": {
                start: {
                    line: 336,
                    column: 26
                },
                end: {
                    line: 336,
                    column: 62
                }
            },
            "78": {
                start: {
                    line: 339,
                    column: 6
                },
                end: {
                    line: 341,
                    column: 9
                }
            },
            "79": {
                start: {
                    line: 340,
                    column: 8
                },
                end: {
                    line: 340,
                    column: 43
                }
            },
            "80": {
                start: {
                    line: 343,
                    column: 28
                },
                end: {
                    line: 345,
                    column: 7
                }
            },
            "81": {
                start: {
                    line: 344,
                    column: 18
                },
                end: {
                    line: 344,
                    column: 69
                }
            },
            "82": {
                start: {
                    line: 346,
                    column: 6
                },
                end: {
                    line: 346,
                    column: 79
                }
            },
            "83": {
                start: {
                    line: 347,
                    column: 6
                },
                end: {
                    line: 350,
                    column: 9
                }
            },
            "84": {
                start: {
                    line: 351,
                    column: 6
                },
                end: {
                    line: 351,
                    column: 52
                }
            },
            "85": {
                start: {
                    line: 353,
                    column: 27
                },
                end: {
                    line: 353,
                    column: 68
                }
            },
            "86": {
                start: {
                    line: 354,
                    column: 4
                },
                end: {
                    line: 357,
                    column: 7
                }
            },
            "87": {
                start: {
                    line: 358,
                    column: 4
                },
                end: {
                    line: 358,
                    column: 65
                }
            },
            "88": {
                start: {
                    line: 359,
                    column: 4
                },
                end: {
                    line: 408,
                    column: 5
                }
            },
            "89": {
                start: {
                    line: 360,
                    column: 25
                },
                end: {
                    line: 362,
                    column: 22
                }
            },
            "90": {
                start: {
                    line: 363,
                    column: 6
                },
                end: {
                    line: 382,
                    column: 7
                }
            },
            "91": {
                start: {
                    line: 364,
                    column: 33
                },
                end: {
                    line: 364,
                    column: 72
                }
            },
            "92": {
                start: {
                    line: 365,
                    column: 8
                },
                end: {
                    line: 379,
                    column: 9
                }
            },
            "93": {
                start: {
                    line: 366,
                    column: 30
                },
                end: {
                    line: 366,
                    column: 69
                }
            },
            "94": {
                start: {
                    line: 367,
                    column: 32
                },
                end: {
                    line: 369,
                    column: 26
                }
            },
            "95": {
                start: {
                    line: 370,
                    column: 10
                },
                end: {
                    line: 373,
                    column: 13
                }
            },
            "96": {
                start: {
                    line: 374,
                    column: 10
                },
                end: {
                    line: 378,
                    column: 11
                }
            },
            "97": {
                start: {
                    line: 375,
                    column: 12
                },
                end: {
                    line: 375,
                    column: 79
                }
            },
            "98": {
                start: {
                    line: 377,
                    column: 12
                },
                end: {
                    line: 377,
                    column: 76
                }
            },
            "99": {
                start: {
                    line: 381,
                    column: 8
                },
                end: {
                    line: 381,
                    column: 69
                }
            },
            "100": {
                start: {
                    line: 384,
                    column: 6
                },
                end: {
                    line: 384,
                    column: 36
                }
            },
            "101": {
                start: {
                    line: 385,
                    column: 24
                },
                end: {
                    line: 385,
                    column: 42
                }
            },
            "102": {
                start: {
                    line: 386,
                    column: 6
                },
                end: {
                    line: 407,
                    column: 7
                }
            },
            "103": {
                start: {
                    line: 387,
                    column: 8
                },
                end: {
                    line: 390,
                    column: 11
                }
            },
            "104": {
                start: {
                    line: 391,
                    column: 33
                },
                end: {
                    line: 391,
                    column: 72
                }
            },
            "105": {
                start: {
                    line: 392,
                    column: 8
                },
                end: {
                    line: 404,
                    column: 9
                }
            },
            "106": {
                start: {
                    line: 393,
                    column: 30
                },
                end: {
                    line: 393,
                    column: 69
                }
            },
            "107": {
                start: {
                    line: 394,
                    column: 32
                },
                end: {
                    line: 396,
                    column: 26
                }
            },
            "108": {
                start: {
                    line: 397,
                    column: 10
                },
                end: {
                    line: 397,
                    column: 71
                }
            },
            "109": {
                start: {
                    line: 399,
                    column: 10
                },
                end: {
                    line: 403,
                    column: 11
                }
            },
            "110": {
                start: {
                    line: 400,
                    column: 12
                },
                end: {
                    line: 400,
                    column: 76
                }
            },
            "111": {
                start: {
                    line: 402,
                    column: 12
                },
                end: {
                    line: 402,
                    column: 73
                }
            },
            "112": {
                start: {
                    line: 406,
                    column: 8
                },
                end: {
                    line: 406,
                    column: 69
                }
            },
            "113": {
                start: {
                    line: 410,
                    column: 4
                },
                end: {
                    line: 413,
                    column: 5
                }
            },
            "114": {
                start: {
                    line: 411,
                    column: 6
                },
                end: {
                    line: 411,
                    column: 44
                }
            },
            "115": {
                start: {
                    line: 412,
                    column: 6
                },
                end: {
                    line: 412,
                    column: 30
                }
            },
            "116": {
                start: {
                    line: 415,
                    column: 4
                },
                end: {
                    line: 415,
                    column: 16
                }
            },
            "117": {
                start: {
                    line: 424,
                    column: 4
                },
                end: {
                    line: 424,
                    column: 74
                }
            },
            "118": {
                start: {
                    line: 425,
                    column: 24
                },
                end: {
                    line: 427,
                    column: 5
                }
            },
            "119": {
                start: {
                    line: 428,
                    column: 4
                },
                end: {
                    line: 431,
                    column: 5
                }
            },
            "120": {
                start: {
                    line: 429,
                    column: 6
                },
                end: {
                    line: 429,
                    column: 72
                }
            },
            "121": {
                start: {
                    line: 430,
                    column: 6
                },
                end: {
                    line: 430,
                    column: 13
                }
            },
            "122": {
                start: {
                    line: 433,
                    column: 29
                },
                end: {
                    line: 433,
                    column: 68
                }
            },
            "123": {
                start: {
                    line: 434,
                    column: 4
                },
                end: {
                    line: 437,
                    column: 5
                }
            },
            "124": {
                start: {
                    line: 435,
                    column: 6
                },
                end: {
                    line: 435,
                    column: 77
                }
            },
            "125": {
                start: {
                    line: 436,
                    column: 6
                },
                end: {
                    line: 436,
                    column: 13
                }
            },
            "126": {
                start: {
                    line: 439,
                    column: 19
                },
                end: {
                    line: 446,
                    column: 5
                }
            },
            "127": {
                start: {
                    line: 449,
                    column: 4
                },
                end: {
                    line: 456,
                    column: 7
                }
            },
            "128": {
                start: {
                    line: 450,
                    column: 29
                },
                end: {
                    line: 452,
                    column: 28
                }
            },
            "129": {
                start: {
                    line: 454,
                    column: 24
                },
                end: {
                    line: 454,
                    column: 67
                }
            },
            "130": {
                start: {
                    line: 455,
                    column: 6
                },
                end: {
                    line: 455,
                    column: 56
                }
            },
            "131": {
                start: {
                    line: 470,
                    column: 22
                },
                end: {
                    line: 470,
                    column: 23
                }
            },
            "132": {
                start: {
                    line: 471,
                    column: 22
                },
                end: {
                    line: 471,
                    column: 37
                }
            },
            "133": {
                start: {
                    line: 473,
                    column: 4
                },
                end: {
                    line: 478,
                    column: 5
                }
            },
            "134": {
                start: {
                    line: 474,
                    column: 28
                },
                end: {
                    line: 474,
                    column: 55
                }
            },
            "135": {
                start: {
                    line: 475,
                    column: 6
                },
                end: {
                    line: 475,
                    column: 32
                }
            },
            "136": {
                start: {
                    line: 475,
                    column: 26
                },
                end: {
                    line: 475,
                    column: 32
                }
            },
            "137": {
                start: {
                    line: 476,
                    column: 6
                },
                end: {
                    line: 476,
                    column: 20
                }
            },
            "138": {
                start: {
                    line: 477,
                    column: 6
                },
                end: {
                    line: 477,
                    column: 53
                }
            },
            "139": {
                start: {
                    line: 481,
                    column: 27
                },
                end: {
                    line: 481,
                    column: 66
                }
            },
            "140": {
                start: {
                    line: 483,
                    column: 4
                },
                end: {
                    line: 483,
                    column: 26
                }
            },
            "141": {
                start: {
                    line: 492,
                    column: 4
                },
                end: {
                    line: 492,
                    column: 74
                }
            },
            "142": {
                start: {
                    line: 492,
                    column: 45
                },
                end: {
                    line: 492,
                    column: 74
                }
            },
            "143": {
                start: {
                    line: 494,
                    column: 4
                },
                end: {
                    line: 496,
                    column: 6
                }
            },
            "144": {
                start: {
                    line: 506,
                    column: 27
                },
                end: {
                    line: 506,
                    column: 60
                }
            },
            "145": {
                start: {
                    line: 507,
                    column: 4
                },
                end: {
                    line: 507,
                    column: 44
                }
            },
            "146": {
                start: {
                    line: 508,
                    column: 4
                },
                end: {
                    line: 508,
                    column: 44
                }
            },
            "147": {
                start: {
                    line: 511,
                    column: 26
                },
                end: {
                    line: 511,
                    column: 55
                }
            },
            "148": {
                start: {
                    line: 512,
                    column: 26
                },
                end: {
                    line: 521,
                    column: 6
                }
            },
            "149": {
                start: {
                    line: 523,
                    column: 26
                },
                end: {
                    line: 523,
                    column: 64
                }
            },
            "150": {
                start: {
                    line: 526,
                    column: 4
                },
                end: {
                    line: 526,
                    column: 126
                }
            },
            "151": {
                start: {
                    line: 527,
                    column: 4
                },
                end: {
                    line: 529,
                    column: 5
                }
            },
            "152": {
                start: {
                    line: 528,
                    column: 6
                },
                end: {
                    line: 528,
                    column: 64
                }
            },
            "153": {
                start: {
                    line: 532,
                    column: 29
                },
                end: {
                    line: 532,
                    column: 62
                }
            },
            "154": {
                start: {
                    line: 533,
                    column: 4
                },
                end: {
                    line: 533,
                    column: 48
                }
            },
            "155": {
                start: {
                    line: 535,
                    column: 19
                },
                end: {
                    line: 542,
                    column: 5
                }
            },
            "156": {
                start: {
                    line: 545,
                    column: 4
                },
                end: {
                    line: 569,
                    column: 7
                }
            },
            "157": {
                start: {
                    line: 546,
                    column: 29
                },
                end: {
                    line: 546,
                    column: 61
                }
            },
            "158": {
                start: {
                    line: 547,
                    column: 6
                },
                end: {
                    line: 547,
                    column: 54
                }
            },
            "159": {
                start: {
                    line: 548,
                    column: 6
                },
                end: {
                    line: 548,
                    column: 46
                }
            },
            "160": {
                start: {
                    line: 549,
                    column: 24
                },
                end: {
                    line: 549,
                    column: 64
                }
            },
            "161": {
                start: {
                    line: 550,
                    column: 6
                },
                end: {
                    line: 550,
                    column: 56
                }
            },
            "162": {
                start: {
                    line: 551,
                    column: 6
                },
                end: {
                    line: 551,
                    column: 35
                }
            },
            "163": {
                start: {
                    line: 552,
                    column: 6
                },
                end: {
                    line: 552,
                    column: 32
                }
            },
            "164": {
                start: {
                    line: 553,
                    column: 6
                },
                end: {
                    line: 553,
                    column: 51
                }
            },
            "165": {
                start: {
                    line: 556,
                    column: 6
                },
                end: {
                    line: 568,
                    column: 9
                }
            },
            "166": {
                start: {
                    line: 558,
                    column: 8
                },
                end: {
                    line: 567,
                    column: 10
                }
            },
            "167": {
                start: {
                    line: 572,
                    column: 24
                },
                end: {
                    line: 572,
                    column: 56
                }
            },
            "168": {
                start: {
                    line: 573,
                    column: 4
                },
                end: {
                    line: 573,
                    column: 36
                }
            },
            "169": {
                start: {
                    line: 574,
                    column: 4
                },
                end: {
                    line: 574,
                    column: 49
                }
            },
            "170": {
                start: {
                    line: 575,
                    column: 4
                },
                end: {
                    line: 575,
                    column: 38
                }
            },
            "171": {
                start: {
                    line: 576,
                    column: 4
                },
                end: {
                    line: 578,
                    column: 6
                }
            },
            "172": {
                start: {
                    line: 577,
                    column: 6
                },
                end: {
                    line: 577,
                    column: 38
                }
            },
            "173": {
                start: {
                    line: 579,
                    column: 4
                },
                end: {
                    line: 579,
                    column: 46
                }
            },
            "174": {
                start: {
                    line: 582,
                    column: 4
                },
                end: {
                    line: 582,
                    column: 49
                }
            },
            "175": {
                start: {
                    line: 584,
                    column: 4
                },
                end: {
                    line: 584,
                    column: 26
                }
            },
            "176": {
                start: {
                    line: 595,
                    column: 4
                },
                end: {
                    line: 598,
                    column: 29
                }
            },
            "177": {
                start: {
                    line: 601,
                    column: 4
                },
                end: {
                    line: 601,
                    column: 39
                }
            },
            "178": {
                start: {
                    line: 604,
                    column: 4
                },
                end: {
                    line: 604,
                    column: 65
                }
            },
            "179": {
                start: {
                    line: 607,
                    column: 4
                },
                end: {
                    line: 607,
                    column: 79
                }
            },
            "180": {
                start: {
                    line: 610,
                    column: 4
                },
                end: {
                    line: 610,
                    column: 70
                }
            },
            "181": {
                start: {
                    line: 613,
                    column: 50
                },
                end: {
                    line: 620,
                    column: 5
                }
            },
            "182": {
                start: {
                    line: 621,
                    column: 4
                },
                end: {
                    line: 623,
                    column: 7
                }
            },
            "183": {
                start: {
                    line: 622,
                    column: 6
                },
                end: {
                    line: 622,
                    column: 40
                }
            },
            "184": {
                start: {
                    line: 625,
                    column: 4
                },
                end: {
                    line: 625,
                    column: 16
                }
            },
            "185": {
                start: {
                    line: 633,
                    column: 4
                },
                end: {
                    line: 633,
                    column: 80
                }
            },
            "186": {
                start: {
                    line: 636,
                    column: 4
                },
                end: {
                    line: 642,
                    column: 6
                }
            },
            "187": {
                start: {
                    line: 650,
                    column: 4
                },
                end: {
                    line: 650,
                    column: 70
                }
            },
            "188": {
                start: {
                    line: 653,
                    column: 24
                },
                end: {
                    line: 655,
                    column: 5
                }
            },
            "189": {
                start: {
                    line: 654,
                    column: 16
                },
                end: {
                    line: 654,
                    column: 51
                }
            },
            "190": {
                start: {
                    line: 658,
                    column: 20
                },
                end: {
                    line: 658,
                    column: 43
                }
            },
            "191": {
                start: {
                    line: 659,
                    column: 24
                },
                end: {
                    line: 659,
                    column: 51
                }
            },
            "192": {
                start: {
                    line: 660,
                    column: 4
                },
                end: {
                    line: 673,
                    column: 7
                }
            },
            "193": {
                start: {
                    line: 661,
                    column: 6
                },
                end: {
                    line: 661,
                    column: 35
                }
            },
            "194": {
                start: {
                    line: 662,
                    column: 6
                },
                end: {
                    line: 672,
                    column: 7
                }
            },
            "195": {
                start: {
                    line: 663,
                    column: 27
                },
                end: {
                    line: 663,
                    column: 42
                }
            },
            "196": {
                start: {
                    line: 664,
                    column: 8
                },
                end: {
                    line: 666,
                    column: 9
                }
            },
            "197": {
                start: {
                    line: 665,
                    column: 10
                },
                end: {
                    line: 665,
                    column: 42
                }
            },
            "198": {
                start: {
                    line: 667,
                    column: 8
                },
                end: {
                    line: 667,
                    column: 53
                }
            },
            "199": {
                start: {
                    line: 669,
                    column: 8
                },
                end: {
                    line: 671,
                    column: 9
                }
            },
            "200": {
                start: {
                    line: 670,
                    column: 10
                },
                end: {
                    line: 670,
                    column: 41
                }
            },
            "201": {
                start: {
                    line: 675,
                    column: 4
                },
                end: {
                    line: 675,
                    column: 38
                }
            },
            "202": {
                start: {
                    line: 676,
                    column: 4
                },
                end: {
                    line: 676,
                    column: 44
                }
            },
            "203": {
                start: {
                    line: 693,
                    column: 26
                },
                end: {
                    line: 697,
                    column: 9
                }
            },
            "204": {
                start: {
                    line: 696,
                    column: 20
                },
                end: {
                    line: 696,
                    column: 50
                }
            },
            "205": {
                start: {
                    line: 699,
                    column: 4
                },
                end: {
                    line: 699,
                    column: 31
                }
            },
            "206": {
                start: {
                    line: 699,
                    column: 24
                },
                end: {
                    line: 699,
                    column: 31
                }
            },
            "207": {
                start: {
                    line: 701,
                    column: 4
                },
                end: {
                    line: 722,
                    column: 5
                }
            },
            "208": {
                start: {
                    line: 702,
                    column: 19
                },
                end: {
                    line: 702,
                    column: 36
                }
            },
            "209": {
                start: {
                    line: 703,
                    column: 6
                },
                end: {
                    line: 721,
                    column: 7
                }
            },
            "210": {
                start: {
                    line: 713,
                    column: 31
                },
                end: {
                    line: 713,
                    column: 65
                }
            },
            "211": {
                start: {
                    line: 714,
                    column: 8
                },
                end: {
                    line: 714,
                    column: 55
                }
            },
            "212": {
                start: {
                    line: 717,
                    column: 25
                },
                end: {
                    line: 717,
                    column: 46
                }
            },
            "213": {
                start: {
                    line: 718,
                    column: 8
                },
                end: {
                    line: 720,
                    column: 9
                }
            },
            "214": {
                start: {
                    line: 719,
                    column: 10
                },
                end: {
                    line: 719,
                    column: 68
                }
            },
            "215": {
                start: {
                    line: 731,
                    column: 24
                },
                end: {
                    line: 731,
                    column: 44
                }
            },
            "216": {
                start: {
                    line: 732,
                    column: 39
                },
                end: {
                    line: 732,
                    column: 57
                }
            },
            "217": {
                start: {
                    line: 733,
                    column: 4
                },
                end: {
                    line: 737,
                    column: 6
                }
            },
            "218": {
                start: {
                    line: 738,
                    column: 4
                },
                end: {
                    line: 744,
                    column: 6
                }
            },
            "219": {
                start: {
                    line: 753,
                    column: 4
                },
                end: {
                    line: 756,
                    column: 6
                }
            },
            "220": {
                start: {
                    line: 757,
                    column: 4
                },
                end: {
                    line: 760,
                    column: 6
                }
            },
            "221": {
                start: {
                    line: 761,
                    column: 4
                },
                end: {
                    line: 764,
                    column: 6
                }
            },
            "222": {
                start: {
                    line: 772,
                    column: 4
                },
                end: {
                    line: 775,
                    column: 6
                }
            },
            "223": {
                start: {
                    line: 776,
                    column: 4
                },
                end: {
                    line: 779,
                    column: 6
                }
            },
            "224": {
                start: {
                    line: 788,
                    column: 4
                },
                end: {
                    line: 788,
                    column: 43
                }
            },
            "225": {
                start: {
                    line: 791,
                    column: 24
                },
                end: {
                    line: 791,
                    column: 56
                }
            },
            "226": {
                start: {
                    line: 792,
                    column: 4
                },
                end: {
                    line: 792,
                    column: 46
                }
            },
            "227": {
                start: {
                    line: 793,
                    column: 4
                },
                end: {
                    line: 793,
                    column: 38
                }
            },
            "228": {
                start: {
                    line: 796,
                    column: 22
                },
                end: {
                    line: 796,
                    column: 52
                }
            },
            "229": {
                start: {
                    line: 797,
                    column: 4
                },
                end: {
                    line: 797,
                    column: 42
                }
            },
            "230": {
                start: {
                    line: 798,
                    column: 4
                },
                end: {
                    line: 798,
                    column: 32
                }
            },
            "231": {
                start: {
                    line: 801,
                    column: 4
                },
                end: {
                    line: 801,
                    column: 39
                }
            },
            "232": {
                start: {
                    line: 804,
                    column: 4
                },
                end: {
                    line: 804,
                    column: 64
                }
            },
            "233": {
                start: {
                    line: 804,
                    column: 46
                },
                end: {
                    line: 804,
                    column: 62
                }
            },
            "234": {
                start: {
                    line: 807,
                    column: 4
                },
                end: {
                    line: 807,
                    column: 53
                }
            },
            "235": {
                start: {
                    line: 810,
                    column: 4
                },
                end: {
                    line: 810,
                    column: 52
                }
            },
            "236": {
                start: {
                    line: 817,
                    column: 4
                },
                end: {
                    line: 817,
                    column: 51
                }
            },
            "237": {
                start: {
                    line: 818,
                    column: 4
                },
                end: {
                    line: 818,
                    column: 43
                }
            },
            "238": {
                start: {
                    line: 826,
                    column: 21
                },
                end: {
                    line: 826,
                    column: 59
                }
            },
            "239": {
                start: {
                    line: 827,
                    column: 4
                },
                end: {
                    line: 827,
                    column: 59
                }
            },
            "240": {
                start: {
                    line: 828,
                    column: 4
                },
                end: {
                    line: 828,
                    column: 49
                }
            },
            "241": {
                start: {
                    line: 829,
                    column: 4
                },
                end: {
                    line: 829,
                    column: 41
                }
            },
            "242": {
                start: {
                    line: 830,
                    column: 4
                },
                end: {
                    line: 830,
                    column: 57
                }
            },
            "243": {
                start: {
                    line: 833,
                    column: 4
                },
                end: {
                    line: 851,
                    column: 5
                }
            },
            "244": {
                start: {
                    line: 834,
                    column: 6
                },
                end: {
                    line: 834,
                    column: 44
                }
            },
            "245": {
                start: {
                    line: 837,
                    column: 6
                },
                end: {
                    line: 839,
                    column: 9
                }
            },
            "246": {
                start: {
                    line: 838,
                    column: 8
                },
                end: {
                    line: 838,
                    column: 39
                }
            },
            "247": {
                start: {
                    line: 842,
                    column: 6
                },
                end: {
                    line: 848,
                    column: 15
                }
            },
            "248": {
                start: {
                    line: 843,
                    column: 8
                },
                end: {
                    line: 843,
                    column: 42
                }
            },
            "249": {
                start: {
                    line: 845,
                    column: 8
                },
                end: {
                    line: 847,
                    column: 16
                }
            },
            "250": {
                start: {
                    line: 846,
                    column: 10
                },
                end: {
                    line: 846,
                    column: 28
                }
            },
            "251": {
                start: {
                    line: 850,
                    column: 6
                },
                end: {
                    line: 850,
                    column: 46
                }
            }
        },
        fnMap: {
            "0": {
                name: "(anonymous_0)",
                decl: {
                    start: {
                        line: 93,
                        column: 2
                    },
                    end: {
                        line: 93,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 93,
                        column: 16
                    },
                    end: {
                        line: 208,
                        column: 3
                    }
                },
                line: 93
            },
            "1": {
                name: "(anonymous_1)",
                decl: {
                    start: {
                        line: 214,
                        column: 25
                    },
                    end: {
                        line: 214,
                        column: 26
                    }
                },
                loc: {
                    start: {
                        line: 214,
                        column: 43
                    },
                    end: {
                        line: 222,
                        column: 3
                    }
                },
                line: 214
            },
            "2": {
                name: "(anonymous_2)",
                decl: {
                    start: {
                        line: 228,
                        column: 21
                    },
                    end: {
                        line: 228,
                        column: 22
                    }
                },
                loc: {
                    start: {
                        line: 228,
                        column: 39
                    },
                    end: {
                        line: 232,
                        column: 3
                    }
                },
                line: 228
            },
            "3": {
                name: "(anonymous_3)",
                decl: {
                    start: {
                        line: 241,
                        column: 2
                    },
                    end: {
                        line: 241,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 244,
                        column: 17
                    },
                    end: {
                        line: 262,
                        column: 3
                    }
                },
                line: 244
            },
            "4": {
                name: "(anonymous_4)",
                decl: {
                    start: {
                        line: 268,
                        column: 2
                    },
                    end: {
                        line: 268,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 268,
                        column: 38
                    },
                    end: {
                        line: 275,
                        column: 3
                    }
                },
                line: 268
            },
            "5": {
                name: "(anonymous_5)",
                decl: {
                    start: {
                        line: 280,
                        column: 2
                    },
                    end: {
                        line: 280,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 280,
                        column: 30
                    },
                    end: {
                        line: 291,
                        column: 3
                    }
                },
                line: 280
            },
            "6": {
                name: "(anonymous_6)",
                decl: {
                    start: {
                        line: 284,
                        column: 30
                    },
                    end: {
                        line: 284,
                        column: 31
                    }
                },
                loc: {
                    start: {
                        line: 284,
                        column: 40
                    },
                    end: {
                        line: 289,
                        column: 7
                    }
                },
                line: 284
            },
            "7": {
                name: "(anonymous_7)",
                decl: {
                    start: {
                        line: 286,
                        column: 51
                    },
                    end: {
                        line: 286,
                        column: 52
                    }
                },
                loc: {
                    start: {
                        line: 286,
                        column: 58
                    },
                    end: {
                        line: 286,
                        column: 68
                    }
                },
                line: 286
            },
            "8": {
                name: "(anonymous_8)",
                decl: {
                    start: {
                        line: 298,
                        column: 2
                    },
                    end: {
                        line: 298,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 298,
                        column: 51
                    },
                    end: {
                        line: 416,
                        column: 3
                    }
                },
                line: 298
            },
            "9": {
                name: "(anonymous_9)",
                decl: {
                    start: {
                        line: 339,
                        column: 43
                    },
                    end: {
                        line: 339,
                        column: 44
                    }
                },
                loc: {
                    start: {
                        line: 339,
                        column: 56
                    },
                    end: {
                        line: 341,
                        column: 7
                    }
                },
                line: 339
            },
            "10": {
                name: "(anonymous_10)",
                decl: {
                    start: {
                        line: 344,
                        column: 8
                    },
                    end: {
                        line: 344,
                        column: 9
                    }
                },
                loc: {
                    start: {
                        line: 344,
                        column: 18
                    },
                    end: {
                        line: 344,
                        column: 69
                    }
                },
                line: 344
            },
            "11": {
                name: "(anonymous_11)",
                decl: {
                    start: {
                        line: 422,
                        column: 2
                    },
                    end: {
                        line: 422,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 422,
                        column: 54
                    },
                    end: {
                        line: 457,
                        column: 3
                    }
                },
                line: 422
            },
            "12": {
                name: "(anonymous_12)",
                decl: {
                    start: {
                        line: 449,
                        column: 35
                    },
                    end: {
                        line: 449,
                        column: 36
                    }
                },
                loc: {
                    start: {
                        line: 449,
                        column: 54
                    },
                    end: {
                        line: 456,
                        column: 5
                    }
                },
                line: 449
            },
            "13": {
                name: "(anonymous_13)",
                decl: {
                    start: {
                        line: 465,
                        column: 2
                    },
                    end: {
                        line: 465,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 468,
                        column: 17
                    },
                    end: {
                        line: 484,
                        column: 3
                    }
                },
                line: 468
            },
            "14": {
                name: "(anonymous_14)",
                decl: {
                    start: {
                        line: 491,
                        column: 2
                    },
                    end: {
                        line: 491,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 491,
                        column: 64
                    },
                    end: {
                        line: 497,
                        column: 3
                    }
                },
                line: 491
            },
            "15": {
                name: "(anonymous_15)",
                decl: {
                    start: {
                        line: 505,
                        column: 2
                    },
                    end: {
                        line: 505,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 505,
                        column: 72
                    },
                    end: {
                        line: 585,
                        column: 3
                    }
                },
                line: 505
            },
            "16": {
                name: "(anonymous_16)",
                decl: {
                    start: {
                        line: 545,
                        column: 35
                    },
                    end: {
                        line: 545,
                        column: 36
                    }
                },
                loc: {
                    start: {
                        line: 545,
                        column: 54
                    },
                    end: {
                        line: 569,
                        column: 5
                    }
                },
                line: 545
            },
            "17": {
                name: "(anonymous_17)",
                decl: {
                    start: {
                        line: 556,
                        column: 47
                    },
                    end: {
                        line: 556,
                        column: 48
                    }
                },
                loc: {
                    start: {
                        line: 556,
                        column: 53
                    },
                    end: {
                        line: 568,
                        column: 7
                    }
                },
                line: 556
            },
            "18": {
                name: "(anonymous_18)",
                decl: {
                    start: {
                        line: 576,
                        column: 42
                    },
                    end: {
                        line: 576,
                        column: 43
                    }
                },
                loc: {
                    start: {
                        line: 577,
                        column: 6
                    },
                    end: {
                        line: 577,
                        column: 38
                    }
                },
                line: 577
            },
            "19": {
                name: "(anonymous_19)",
                decl: {
                    start: {
                        line: 593,
                        column: 2
                    },
                    end: {
                        line: 593,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 593,
                        column: 46
                    },
                    end: {
                        line: 626,
                        column: 3
                    }
                },
                line: 593
            },
            "20": {
                name: "(anonymous_20)",
                decl: {
                    start: {
                        line: 621,
                        column: 43
                    },
                    end: {
                        line: 621,
                        column: 44
                    }
                },
                loc: {
                    start: {
                        line: 621,
                        column: 54
                    },
                    end: {
                        line: 623,
                        column: 5
                    }
                },
                line: 621
            },
            "21": {
                name: "(anonymous_21)",
                decl: {
                    start: {
                        line: 632,
                        column: 2
                    },
                    end: {
                        line: 632,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 632,
                        column: 51
                    },
                    end: {
                        line: 643,
                        column: 3
                    }
                },
                line: 632
            },
            "22": {
                name: "(anonymous_22)",
                decl: {
                    start: {
                        line: 649,
                        column: 2
                    },
                    end: {
                        line: 649,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 649,
                        column: 43
                    },
                    end: {
                        line: 677,
                        column: 3
                    }
                },
                line: 649
            },
            "23": {
                name: "(anonymous_23)",
                decl: {
                    start: {
                        line: 654,
                        column: 6
                    },
                    end: {
                        line: 654,
                        column: 7
                    }
                },
                loc: {
                    start: {
                        line: 654,
                        column: 16
                    },
                    end: {
                        line: 654,
                        column: 51
                    }
                },
                line: 654
            },
            "24": {
                name: "(anonymous_24)",
                decl: {
                    start: {
                        line: 660,
                        column: 24
                    },
                    end: {
                        line: 660,
                        column: 25
                    }
                },
                loc: {
                    start: {
                        line: 660,
                        column: 34
                    },
                    end: {
                        line: 673,
                        column: 5
                    }
                },
                line: 660
            },
            "25": {
                name: "(anonymous_25)",
                decl: {
                    start: {
                        line: 686,
                        column: 2
                    },
                    end: {
                        line: 686,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 691,
                        column: 10
                    },
                    end: {
                        line: 723,
                        column: 3
                    }
                },
                line: 691
            },
            "26": {
                name: "(anonymous_26)",
                decl: {
                    start: {
                        line: 696,
                        column: 10
                    },
                    end: {
                        line: 696,
                        column: 11
                    }
                },
                loc: {
                    start: {
                        line: 696,
                        column: 20
                    },
                    end: {
                        line: 696,
                        column: 50
                    }
                },
                line: 696
            },
            "27": {
                name: "(anonymous_27)",
                decl: {
                    start: {
                        line: 730,
                        column: 2
                    },
                    end: {
                        line: 730,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 730,
                        column: 55
                    },
                    end: {
                        line: 745,
                        column: 3
                    }
                },
                line: 730
            },
            "28": {
                name: "(anonymous_28)",
                decl: {
                    start: {
                        line: 750,
                        column: 2
                    },
                    end: {
                        line: 750,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 750,
                        column: 22
                    },
                    end: {
                        line: 765,
                        column: 3
                    }
                },
                line: 750
            },
            "29": {
                name: "(anonymous_29)",
                decl: {
                    start: {
                        line: 770,
                        column: 2
                    },
                    end: {
                        line: 770,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 770,
                        column: 25
                    },
                    end: {
                        line: 780,
                        column: 3
                    }
                },
                line: 770
            },
            "30": {
                name: "(anonymous_30)",
                decl: {
                    start: {
                        line: 786,
                        column: 2
                    },
                    end: {
                        line: 786,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 786,
                        column: 42
                    },
                    end: {
                        line: 811,
                        column: 3
                    }
                },
                line: 786
            },
            "31": {
                name: "(anonymous_31)",
                decl: {
                    start: {
                        line: 804,
                        column: 40
                    },
                    end: {
                        line: 804,
                        column: 41
                    }
                },
                loc: {
                    start: {
                        line: 804,
                        column: 46
                    },
                    end: {
                        line: 804,
                        column: 62
                    }
                },
                line: 804
            },
            "32": {
                name: "(anonymous_32)",
                decl: {
                    start: {
                        line: 816,
                        column: 2
                    },
                    end: {
                        line: 816,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 816,
                        column: 27
                    },
                    end: {
                        line: 819,
                        column: 3
                    }
                },
                line: 816
            },
            "33": {
                name: "(anonymous_33)",
                decl: {
                    start: {
                        line: 824,
                        column: 2
                    },
                    end: {
                        line: 824,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 824,
                        column: 34
                    },
                    end: {
                        line: 852,
                        column: 3
                    }
                },
                line: 824
            },
            "34": {
                name: "(anonymous_34)",
                decl: {
                    start: {
                        line: 837,
                        column: 28
                    },
                    end: {
                        line: 837,
                        column: 29
                    }
                },
                loc: {
                    start: {
                        line: 837,
                        column: 34
                    },
                    end: {
                        line: 839,
                        column: 7
                    }
                },
                line: 837
            },
            "35": {
                name: "(anonymous_35)",
                decl: {
                    start: {
                        line: 842,
                        column: 17
                    },
                    end: {
                        line: 842,
                        column: 18
                    }
                },
                loc: {
                    start: {
                        line: 842,
                        column: 23
                    },
                    end: {
                        line: 848,
                        column: 7
                    }
                },
                line: 842
            },
            "36": {
                name: "(anonymous_36)",
                decl: {
                    start: {
                        line: 845,
                        column: 19
                    },
                    end: {
                        line: 845,
                        column: 20
                    }
                },
                loc: {
                    start: {
                        line: 845,
                        column: 25
                    },
                    end: {
                        line: 847,
                        column: 9
                    }
                },
                line: 845
            }
        },
        branchMap: {
            "0": {
                loc: {
                    start: {
                        line: 251,
                        column: 6
                    },
                    end: {
                        line: 255,
                        column: 7
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 251,
                            column: 6
                        },
                        end: {
                            line: 255,
                            column: 7
                        }
                    },
                    {
                        start: {
                            line: 253,
                            column: 13
                        },
                        end: {
                            line: 255,
                            column: 7
                        }
                    }
                ],
                line: 251
            },
            "1": {
                loc: {
                    start: {
                        line: 261,
                        column: 11
                    },
                    end: {
                        line: 261,
                        column: 45
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 261,
                            column: 11
                        },
                        end: {
                            line: 261,
                            column: 37
                        }
                    },
                    {
                        start: {
                            line: 261,
                            column: 41
                        },
                        end: {
                            line: 261,
                            column: 45
                        }
                    }
                ],
                line: 261
            },
            "2": {
                loc: {
                    start: {
                        line: 272,
                        column: 4
                    },
                    end: {
                        line: 274,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 272,
                            column: 4
                        },
                        end: {
                            line: 274,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 272
            },
            "3": {
                loc: {
                    start: {
                        line: 282,
                        column: 11
                    },
                    end: {
                        line: 282,
                        column: 49
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 282,
                            column: 11
                        },
                        end: {
                            line: 282,
                            column: 19
                        }
                    },
                    {
                        start: {
                            line: 282,
                            column: 23
                        },
                        end: {
                            line: 282,
                            column: 49
                        }
                    }
                ],
                line: 282
            },
            "4": {
                loc: {
                    start: {
                        line: 285,
                        column: 8
                    },
                    end: {
                        line: 288,
                        column: 9
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 285,
                            column: 8
                        },
                        end: {
                            line: 288,
                            column: 9
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 285
            },
            "5": {
                loc: {
                    start: {
                        line: 308,
                        column: 4
                    },
                    end: {
                        line: 314,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 308,
                            column: 4
                        },
                        end: {
                            line: 314,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 308
            },
            "6": {
                loc: {
                    start: {
                        line: 316,
                        column: 4
                    },
                    end: {
                        line: 352,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 316,
                            column: 4
                        },
                        end: {
                            line: 352,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: 333,
                            column: 11
                        },
                        end: {
                            line: 352,
                            column: 5
                        }
                    }
                ],
                line: 316
            },
            "7": {
                loc: {
                    start: {
                        line: 319,
                        column: 6
                    },
                    end: {
                        line: 322,
                        column: 7
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 319,
                            column: 6
                        },
                        end: {
                            line: 322,
                            column: 7
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 319
            },
            "8": {
                loc: {
                    start: {
                        line: 320,
                        column: 8
                    },
                    end: {
                        line: 320,
                        column: 78
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 320,
                            column: 8
                        },
                        end: {
                            line: 320,
                            column: 78
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 320
            },
            "9": {
                loc: {
                    start: {
                        line: 327,
                        column: 6
                    },
                    end: {
                        line: 330,
                        column: 7
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 327,
                            column: 6
                        },
                        end: {
                            line: 330,
                            column: 7
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 327
            },
            "10": {
                loc: {
                    start: {
                        line: 327,
                        column: 10
                    },
                    end: {
                        line: 327,
                        column: 61
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 327,
                            column: 10
                        },
                        end: {
                            line: 327,
                            column: 24
                        }
                    },
                    {
                        start: {
                            line: 327,
                            column: 28
                        },
                        end: {
                            line: 327,
                            column: 61
                        }
                    }
                ],
                line: 327
            },
            "11": {
                loc: {
                    start: {
                        line: 359,
                        column: 4
                    },
                    end: {
                        line: 408,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 359,
                            column: 4
                        },
                        end: {
                            line: 408,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: 383,
                            column: 11
                        },
                        end: {
                            line: 408,
                            column: 5
                        }
                    }
                ],
                line: 359
            },
            "12": {
                loc: {
                    start: {
                        line: 363,
                        column: 6
                    },
                    end: {
                        line: 382,
                        column: 7
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 363,
                            column: 6
                        },
                        end: {
                            line: 382,
                            column: 7
                        }
                    },
                    {
                        start: {
                            line: 380,
                            column: 13
                        },
                        end: {
                            line: 382,
                            column: 7
                        }
                    }
                ],
                line: 363
            },
            "13": {
                loc: {
                    start: {
                        line: 365,
                        column: 8
                    },
                    end: {
                        line: 379,
                        column: 9
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 365,
                            column: 8
                        },
                        end: {
                            line: 379,
                            column: 9
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 365
            },
            "14": {
                loc: {
                    start: {
                        line: 374,
                        column: 10
                    },
                    end: {
                        line: 378,
                        column: 11
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 374,
                            column: 10
                        },
                        end: {
                            line: 378,
                            column: 11
                        }
                    },
                    {
                        start: {
                            line: 376,
                            column: 17
                        },
                        end: {
                            line: 378,
                            column: 11
                        }
                    }
                ],
                line: 374
            },
            "15": {
                loc: {
                    start: {
                        line: 386,
                        column: 6
                    },
                    end: {
                        line: 407,
                        column: 7
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 386,
                            column: 6
                        },
                        end: {
                            line: 407,
                            column: 7
                        }
                    },
                    {
                        start: {
                            line: 405,
                            column: 13
                        },
                        end: {
                            line: 407,
                            column: 7
                        }
                    }
                ],
                line: 386
            },
            "16": {
                loc: {
                    start: {
                        line: 392,
                        column: 8
                    },
                    end: {
                        line: 404,
                        column: 9
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 392,
                            column: 8
                        },
                        end: {
                            line: 404,
                            column: 9
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 392
            },
            "17": {
                loc: {
                    start: {
                        line: 399,
                        column: 10
                    },
                    end: {
                        line: 403,
                        column: 11
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 399,
                            column: 10
                        },
                        end: {
                            line: 403,
                            column: 11
                        }
                    },
                    {
                        start: {
                            line: 401,
                            column: 17
                        },
                        end: {
                            line: 403,
                            column: 11
                        }
                    }
                ],
                line: 399
            },
            "18": {
                loc: {
                    start: {
                        line: 399,
                        column: 14
                    },
                    end: {
                        line: 399,
                        column: 64
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 399,
                            column: 14
                        },
                        end: {
                            line: 399,
                            column: 27
                        }
                    },
                    {
                        start: {
                            line: 399,
                            column: 31
                        },
                        end: {
                            line: 399,
                            column: 64
                        }
                    }
                ],
                line: 399
            },
            "19": {
                loc: {
                    start: {
                        line: 410,
                        column: 4
                    },
                    end: {
                        line: 413,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 410,
                            column: 4
                        },
                        end: {
                            line: 413,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 410
            },
            "20": {
                loc: {
                    start: {
                        line: 410,
                        column: 9
                    },
                    end: {
                        line: 410,
                        column: 30
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 410,
                            column: 9
                        },
                        end: {
                            line: 410,
                            column: 24
                        }
                    },
                    {
                        start: {
                            line: 410,
                            column: 28
                        },
                        end: {
                            line: 410,
                            column: 30
                        }
                    }
                ],
                line: 410
            },
            "21": {
                loc: {
                    start: {
                        line: 428,
                        column: 4
                    },
                    end: {
                        line: 431,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 428,
                            column: 4
                        },
                        end: {
                            line: 431,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 428
            },
            "22": {
                loc: {
                    start: {
                        line: 434,
                        column: 4
                    },
                    end: {
                        line: 437,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 434,
                            column: 4
                        },
                        end: {
                            line: 437,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 434
            },
            "23": {
                loc: {
                    start: {
                        line: 454,
                        column: 24
                    },
                    end: {
                        line: 454,
                        column: 67
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 454,
                            column: 24
                        },
                        end: {
                            line: 454,
                            column: 62
                        }
                    },
                    {
                        start: {
                            line: 454,
                            column: 66
                        },
                        end: {
                            line: 454,
                            column: 67
                        }
                    }
                ],
                line: 454
            },
            "24": {
                loc: {
                    start: {
                        line: 475,
                        column: 6
                    },
                    end: {
                        line: 475,
                        column: 32
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 475,
                            column: 6
                        },
                        end: {
                            line: 475,
                            column: 32
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 475
            },
            "25": {
                loc: {
                    start: {
                        line: 492,
                        column: 4
                    },
                    end: {
                        line: 492,
                        column: 74
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 492,
                            column: 4
                        },
                        end: {
                            line: 492,
                            column: 74
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 492
            },
            "26": {
                loc: {
                    start: {
                        line: 523,
                        column: 45
                    },
                    end: {
                        line: 523,
                        column: 63
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 523,
                            column: 45
                        },
                        end: {
                            line: 523,
                            column: 57
                        }
                    },
                    {
                        start: {
                            line: 523,
                            column: 61
                        },
                        end: {
                            line: 523,
                            column: 63
                        }
                    }
                ],
                line: 523
            },
            "27": {
                loc: {
                    start: {
                        line: 527,
                        column: 4
                    },
                    end: {
                        line: 529,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 527,
                            column: 4
                        },
                        end: {
                            line: 529,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 527
            },
            "28": {
                loc: {
                    start: {
                        line: 549,
                        column: 24
                    },
                    end: {
                        line: 549,
                        column: 64
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 549,
                            column: 24
                        },
                        end: {
                            line: 549,
                            column: 59
                        }
                    },
                    {
                        start: {
                            line: 549,
                            column: 63
                        },
                        end: {
                            line: 549,
                            column: 64
                        }
                    }
                ],
                line: 549
            },
            "29": {
                loc: {
                    start: {
                        line: 622,
                        column: 13
                    },
                    end: {
                        line: 622,
                        column: 39
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 622,
                            column: 13
                        },
                        end: {
                            line: 622,
                            column: 30
                        }
                    },
                    {
                        start: {
                            line: 622,
                            column: 34
                        },
                        end: {
                            line: 622,
                            column: 39
                        }
                    }
                ],
                line: 622
            },
            "30": {
                loc: {
                    start: {
                        line: 662,
                        column: 6
                    },
                    end: {
                        line: 672,
                        column: 7
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 662,
                            column: 6
                        },
                        end: {
                            line: 672,
                            column: 7
                        }
                    },
                    {
                        start: {
                            line: 668,
                            column: 13
                        },
                        end: {
                            line: 672,
                            column: 7
                        }
                    }
                ],
                line: 662
            },
            "31": {
                loc: {
                    start: {
                        line: 664,
                        column: 8
                    },
                    end: {
                        line: 666,
                        column: 9
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 664,
                            column: 8
                        },
                        end: {
                            line: 666,
                            column: 9
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 664
            },
            "32": {
                loc: {
                    start: {
                        line: 669,
                        column: 8
                    },
                    end: {
                        line: 671,
                        column: 9
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 669,
                            column: 8
                        },
                        end: {
                            line: 671,
                            column: 9
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 669
            },
            "33": {
                loc: {
                    start: {
                        line: 689,
                        column: 4
                    },
                    end: {
                        line: 689,
                        column: 34
                    }
                },
                type: "default-arg",
                locations: [
                    {
                        start: {
                            line: 689,
                            column: 30
                        },
                        end: {
                            line: 689,
                            column: 34
                        }
                    }
                ],
                line: 689
            },
            "34": {
                loc: {
                    start: {
                        line: 690,
                        column: 4
                    },
                    end: {
                        line: 690,
                        column: 22
                    }
                },
                type: "default-arg",
                locations: [
                    {
                        start: {
                            line: 690,
                            column: 21
                        },
                        end: {
                            line: 690,
                            column: 22
                        }
                    }
                ],
                line: 690
            },
            "35": {
                loc: {
                    start: {
                        line: 693,
                        column: 26
                    },
                    end: {
                        line: 697,
                        column: 9
                    }
                },
                type: "cond-expr",
                locations: [
                    {
                        start: {
                            line: 694,
                            column: 8
                        },
                        end: {
                            line: 694,
                            column: 33
                        }
                    },
                    {
                        start: {
                            line: 695,
                            column: 8
                        },
                        end: {
                            line: 697,
                            column: 9
                        }
                    }
                ],
                line: 693
            },
            "36": {
                loc: {
                    start: {
                        line: 699,
                        column: 4
                    },
                    end: {
                        line: 699,
                        column: 31
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 699,
                            column: 4
                        },
                        end: {
                            line: 699,
                            column: 31
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 699
            },
            "37": {
                loc: {
                    start: {
                        line: 703,
                        column: 6
                    },
                    end: {
                        line: 721,
                        column: 7
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 703,
                            column: 6
                        },
                        end: {
                            line: 721,
                            column: 7
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 703
            },
            "38": {
                loc: {
                    start: {
                        line: 718,
                        column: 8
                    },
                    end: {
                        line: 720,
                        column: 9
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 718,
                            column: 8
                        },
                        end: {
                            line: 720,
                            column: 9
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 718
            },
            "39": {
                loc: {
                    start: {
                        line: 718,
                        column: 12
                    },
                    end: {
                        line: 718,
                        column: 43
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 718,
                            column: 12
                        },
                        end: {
                            line: 718,
                            column: 20
                        }
                    },
                    {
                        start: {
                            line: 718,
                            column: 24
                        },
                        end: {
                            line: 718,
                            column: 43
                        }
                    }
                ],
                line: 718
            },
            "40": {
                loc: {
                    start: {
                        line: 833,
                        column: 4
                    },
                    end: {
                        line: 851,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 833,
                            column: 4
                        },
                        end: {
                            line: 851,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: 849,
                            column: 11
                        },
                        end: {
                            line: 851,
                            column: 5
                        }
                    }
                ],
                line: 833
            }
        },
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0,
            "18": 0,
            "19": 0,
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "31": 0,
            "32": 0,
            "33": 0,
            "34": 0,
            "35": 0,
            "36": 0,
            "37": 0,
            "38": 0,
            "39": 0,
            "40": 0,
            "41": 0,
            "42": 0,
            "43": 0,
            "44": 0,
            "45": 0,
            "46": 0,
            "47": 0,
            "48": 0,
            "49": 0,
            "50": 0,
            "51": 0,
            "52": 0,
            "53": 0,
            "54": 0,
            "55": 0,
            "56": 0,
            "57": 0,
            "58": 0,
            "59": 0,
            "60": 0,
            "61": 0,
            "62": 0,
            "63": 0,
            "64": 0,
            "65": 0,
            "66": 0,
            "67": 0,
            "68": 0,
            "69": 0,
            "70": 0,
            "71": 0,
            "72": 0,
            "73": 0,
            "74": 0,
            "75": 0,
            "76": 0,
            "77": 0,
            "78": 0,
            "79": 0,
            "80": 0,
            "81": 0,
            "82": 0,
            "83": 0,
            "84": 0,
            "85": 0,
            "86": 0,
            "87": 0,
            "88": 0,
            "89": 0,
            "90": 0,
            "91": 0,
            "92": 0,
            "93": 0,
            "94": 0,
            "95": 0,
            "96": 0,
            "97": 0,
            "98": 0,
            "99": 0,
            "100": 0,
            "101": 0,
            "102": 0,
            "103": 0,
            "104": 0,
            "105": 0,
            "106": 0,
            "107": 0,
            "108": 0,
            "109": 0,
            "110": 0,
            "111": 0,
            "112": 0,
            "113": 0,
            "114": 0,
            "115": 0,
            "116": 0,
            "117": 0,
            "118": 0,
            "119": 0,
            "120": 0,
            "121": 0,
            "122": 0,
            "123": 0,
            "124": 0,
            "125": 0,
            "126": 0,
            "127": 0,
            "128": 0,
            "129": 0,
            "130": 0,
            "131": 0,
            "132": 0,
            "133": 0,
            "134": 0,
            "135": 0,
            "136": 0,
            "137": 0,
            "138": 0,
            "139": 0,
            "140": 0,
            "141": 0,
            "142": 0,
            "143": 0,
            "144": 0,
            "145": 0,
            "146": 0,
            "147": 0,
            "148": 0,
            "149": 0,
            "150": 0,
            "151": 0,
            "152": 0,
            "153": 0,
            "154": 0,
            "155": 0,
            "156": 0,
            "157": 0,
            "158": 0,
            "159": 0,
            "160": 0,
            "161": 0,
            "162": 0,
            "163": 0,
            "164": 0,
            "165": 0,
            "166": 0,
            "167": 0,
            "168": 0,
            "169": 0,
            "170": 0,
            "171": 0,
            "172": 0,
            "173": 0,
            "174": 0,
            "175": 0,
            "176": 0,
            "177": 0,
            "178": 0,
            "179": 0,
            "180": 0,
            "181": 0,
            "182": 0,
            "183": 0,
            "184": 0,
            "185": 0,
            "186": 0,
            "187": 0,
            "188": 0,
            "189": 0,
            "190": 0,
            "191": 0,
            "192": 0,
            "193": 0,
            "194": 0,
            "195": 0,
            "196": 0,
            "197": 0,
            "198": 0,
            "199": 0,
            "200": 0,
            "201": 0,
            "202": 0,
            "203": 0,
            "204": 0,
            "205": 0,
            "206": 0,
            "207": 0,
            "208": 0,
            "209": 0,
            "210": 0,
            "211": 0,
            "212": 0,
            "213": 0,
            "214": 0,
            "215": 0,
            "216": 0,
            "217": 0,
            "218": 0,
            "219": 0,
            "220": 0,
            "221": 0,
            "222": 0,
            "223": 0,
            "224": 0,
            "225": 0,
            "226": 0,
            "227": 0,
            "228": 0,
            "229": 0,
            "230": 0,
            "231": 0,
            "232": 0,
            "233": 0,
            "234": 0,
            "235": 0,
            "236": 0,
            "237": 0,
            "238": 0,
            "239": 0,
            "240": 0,
            "241": 0,
            "242": 0,
            "243": 0,
            "244": 0,
            "245": 0,
            "246": 0,
            "247": 0,
            "248": 0,
            "249": 0,
            "250": 0,
            "251": 0
        },
        f: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0,
            "18": 0,
            "19": 0,
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "31": 0,
            "32": 0,
            "33": 0,
            "34": 0,
            "35": 0,
            "36": 0
        },
        b: {
            "0": [
                0,
                0
            ],
            "1": [
                0,
                0
            ],
            "2": [
                0,
                0
            ],
            "3": [
                0,
                0
            ],
            "4": [
                0,
                0
            ],
            "5": [
                0,
                0
            ],
            "6": [
                0,
                0
            ],
            "7": [
                0,
                0
            ],
            "8": [
                0,
                0
            ],
            "9": [
                0,
                0
            ],
            "10": [
                0,
                0
            ],
            "11": [
                0,
                0
            ],
            "12": [
                0,
                0
            ],
            "13": [
                0,
                0
            ],
            "14": [
                0,
                0
            ],
            "15": [
                0,
                0
            ],
            "16": [
                0,
                0
            ],
            "17": [
                0,
                0
            ],
            "18": [
                0,
                0
            ],
            "19": [
                0,
                0
            ],
            "20": [
                0,
                0
            ],
            "21": [
                0,
                0
            ],
            "22": [
                0,
                0
            ],
            "23": [
                0,
                0
            ],
            "24": [
                0,
                0
            ],
            "25": [
                0,
                0
            ],
            "26": [
                0,
                0
            ],
            "27": [
                0,
                0
            ],
            "28": [
                0,
                0
            ],
            "29": [
                0,
                0
            ],
            "30": [
                0,
                0
            ],
            "31": [
                0,
                0
            ],
            "32": [
                0,
                0
            ],
            "33": [
                0
            ],
            "34": [
                0
            ],
            "35": [
                0,
                0
            ],
            "36": [
                0,
                0
            ],
            "37": [
                0,
                0
            ],
            "38": [
                0,
                0
            ],
            "39": [
                0,
                0
            ],
            "40": [
                0,
                0
            ]
        },
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "95b2d6b374188d2d0880681b2f2ac2997ab9eb1f"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_1k7pt80ota = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_1k7pt80ota();
/**
 * JSON Schema definition for the metadata of a post.
 */ const PostMetaSchema = (cov_1k7pt80ota().s[0]++, {
    $id: "postMeta.json",
    $schema: "http://json-schema.org/draft-07/schema",
    title: "PostMeta",
    type: "object",
    required: [
        "createdBy",
        "createdAt"
    ],
    properties: {
        createdBy: {
            type: "string"
        },
        createdAt: {
            type: "number"
        }
    },
    additionalProperties: false
});
/**
 * JSON Schema definition for the document structure of a post.
 */ const PostDocSchema = (cov_1k7pt80ota().s[1]++, {
    $id: "postDoc.json",
    $schema: "http://json-schema.org/draft-07/schema",
    title: "PostDoc",
    type: "object",
    required: [],
    properties: {
        msg: {
            type: "string"
        },
        parent: {
            type: "string"
        },
        reactions: {
            type: "object",
            additionalProperties: {
                type: "array",
                items: {
                    type: "string"
                }
            }
        },
        p2group64: {
            type: "string"
        } // our extension?
    },
    additionalProperties: true // Allow other arbitrary fields, but ignore them (other exntensions that arent ours)
});
/**
 * JSON Schema definition for the structure of a post.
 */ const PostSchema = (cov_1k7pt80ota().s[2]++, {
    $id: "post.json",
    $schema: "http://json-schema.org/draft-07/schema",
    title: "Post",
    type: "object",
    required: [
        "path",
        "doc",
        "meta"
    ],
    properties: {
        path: {
            type: "string"
        },
        doc: {
            $ref: "postDoc.json"
        },
        meta: {
            $ref: "postMeta.json"
        }
    },
    additionalProperties: false
});
class MainContentComponent extends HTMLElement {
    header;
    chatContainer;
    errorContainerpost;
    messageMap = (cov_1k7pt80ota().s[3]++, new Map());
    retryQueue = (cov_1k7pt80ota().s[4]++, []);
    /**
   * Constructor define the shadow root and append the header to the shadow root.
   */ constructor(){
        cov_1k7pt80ota().f[0]++;
        cov_1k7pt80ota().s[5]++;
        super();
        // Attach a shadow root to this element
        const shadow = (cov_1k7pt80ota().s[6]++, this.attachShadow({
            mode: "open"
        }));
        // Select header element and chat container
        cov_1k7pt80ota().s[7]++;
        this.header = document.querySelector("#main-content #header");
        cov_1k7pt80ota().s[8]++;
        this.chatContainer = document.querySelector("#main-content #chat-container");
        cov_1k7pt80ota().s[9]++;
        this.messageMap = this.messageMap;
        cov_1k7pt80ota().s[10]++;
        shadow.appendChild(this.header);
        // Create the error container
        cov_1k7pt80ota().s[11]++;
        this.errorContainerpost = document.createElement("section");
        cov_1k7pt80ota().s[12]++;
        this.errorContainerpost.classList.add("error-container");
        cov_1k7pt80ota().s[13]++;
        this.errorContainerpost.style.display = "none"; // Initially hidden
        cov_1k7pt80ota().s[14]++;
        shadow.append(this.errorContainerpost);
        cov_1k7pt80ota().s[15]++;
        this.loadPosts = this.loadPosts.bind(this);
        // Add styles
        const style = (cov_1k7pt80ota().s[16]++, document.createElement("style"));
        cov_1k7pt80ota().s[17]++;
        style.textContent = `
      #header {
        font-family: "Jersey20", sans-serif;
        background-color: #44426E;
        color: white;
        padding: 15px;
        font-size: 2em;
      }
      #chat-container {
        flex-grow: 1;
        padding: 20px;
        overflow-y: auto;
      }
      .message {
        font-family: "VT323", sans-serif;
        background-color: #ffffff;
        border: 1px solid #44426e;
        padding: 10px;
        margin-bottom: 18px;
        border-radius: 5px;
        max-width: 70%;
        position: relative;
        margin-left: 0px;
      }
      .reactions {
        margin-top: 8px;
        display: flex;
        gap: 8px;
      }
      .reaction-button {
        background-color: #f0f0f0;
        border: 1px solid #ccc;
        border-radius: 12px;
        padding: 4px 8px;
        font-size: 0.9em;
        cursor: pointer;
      }
      .error-container {
        position: fixed;
        top: 500px; /* Adjust as needed */
        left: 0; /* Align with the sidebar */
        z-index: 1001; /* Above the dropdown */
      }

      .error-button {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        padding: 10px 15px;
        font-size: 12px;
        cursor: pointer;
        display: flex;
        align-items: left;
        justify-content: space-between;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      }

      .error-button .close-icon {
        margin-left: 10px;
        font-weight: bold;
        cursor: pointer;
      }

      .error-button:hover {
        background-color: #f5c6cb;
      }
      .birthday-cake-icon {
        position: fixed; /* Position relative to the viewport */
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%) scale(0); /* Start scaled down */
        width: 300px; /* Increased size */
        height: 300px; /* Increased size */
        font-size: 300px; /* Match the container size */
        opacity: 0; /* Start invisible */
        transition: transform 0.5s ease-out, opacity 0.5s ease-out; /* Smooth transition */
        z-index: 1000; /* Ensure it's on top of other elements */
        pointer-events: none; /* Allow interactions with underlying elements */
      }
      
      .birthday-cake-icon.show {
        transform: translate(-50%, -50%) scale(1); /* Scale to full size */
        opacity: 1; /* Fade in */
      }      
    `;
        cov_1k7pt80ota().s[18]++;
        shadow.appendChild(style);
    }
    /**
   * Updates the header text with the name of the selected channel.
   * @param event - The event object containing channel details.
   */ updateHeader = (cov_1k7pt80ota().s[19]++, (event)=>{
        cov_1k7pt80ota().f[1]++;
        cov_1k7pt80ota().s[20]++;
        (0, _slog.slog).info("MainContentComponent: updateHeader");
        const customEvent = (cov_1k7pt80ota().s[21]++, event);
        const channel = (cov_1k7pt80ota().s[22]++, customEvent.detail.channel);
        cov_1k7pt80ota().s[23]++;
        (0, _slog.slog).info("MainContentComponent: updateHeader", [
            "channel",
            channel
        ]);
        // Update header text with the selected channel name
        const channelString = (cov_1k7pt80ota().s[24]++, "\u2606 " + channel + " \u2606");
        cov_1k7pt80ota().s[25]++;
        this.header.textContent = `${channelString}`;
    });
    /**
   * clearpost function to clear the chat container and set the header to "☆ PLEASE SELECT A CHANNEL ☆"
   * @param event - The event that triggers the clearing of the chat container.
   */ clearpost = (cov_1k7pt80ota().s[26]++, (event)=>{
        cov_1k7pt80ota().f[2]++;
        cov_1k7pt80ota().s[27]++;
        (0, _slog.slog).info("MainContentComponent: clearpost");
        cov_1k7pt80ota().s[28]++;
        this.chatContainer.innerHTML = "";
        cov_1k7pt80ota().s[29]++;
        this.header.textContent = "\u2606 PLEASE SELECT A CHANNEL \u2606";
    });
    /**
   * MessageWrapper stuff to take care of nested posts
   * Helper to insert into sorted children array (by createdAt metadata)
   * @param children - The array of existing child message wrappers.
   * @param newWrapper - The new message wrapper to insert.
   * @returns the message of the child directly before the inserted wrapper, or `null` if no such child exists.
   */ insertIntoSortedChildren(children, newWrapper) {
        cov_1k7pt80ota().f[3]++;
        const newTimestamp = (cov_1k7pt80ota().s[30]++, newWrapper.message.meta.createdAt);
        // Search for idx to insert at
        let low = (cov_1k7pt80ota().s[31]++, 0);
        let high = (cov_1k7pt80ota().s[32]++, children.length);
        cov_1k7pt80ota().s[33]++;
        while(low < high){
            const mid = (cov_1k7pt80ota().s[34]++, Math.floor((low + high) / 2));
            cov_1k7pt80ota().s[35]++;
            if (children[mid].message.meta.createdAt > newTimestamp) {
                cov_1k7pt80ota().b[0][0]++;
                cov_1k7pt80ota().s[36]++;
                high = mid;
            } else {
                cov_1k7pt80ota().b[0][1]++;
                cov_1k7pt80ota().s[37]++;
                low = mid + 1;
            }
        }
        // Insert new wrapper
        cov_1k7pt80ota().s[38]++;
        children.splice(low, 0, newWrapper);
        cov_1k7pt80ota().s[39]++;
        (0, _slog.slog).info("Children: ", [
            "children",
            children
        ]);
        cov_1k7pt80ota().s[40]++;
        return (cov_1k7pt80ota().b[1][0]++, children[low - 1]?.message) || (cov_1k7pt80ota().b[1][1]++, null);
    }
    /**
   * Renders a new message by attempting to insert it and processing any queued retries.
   * @param newPost - The `Post` object representing the new message to be rendered.
   */ renderMessage(newPost) {
        cov_1k7pt80ota().f[4]++;
        cov_1k7pt80ota().s[41]++;
        (0, _slog.slog).info("ENETERING RENDERMESSAGE");
        const res = (cov_1k7pt80ota().s[42]++, this.tryInsertMessage(newPost));
        cov_1k7pt80ota().s[43]++;
        if (res) {
            cov_1k7pt80ota().b[2][0]++;
            cov_1k7pt80ota().s[44]++;
            this.processRetryQueue();
        } else cov_1k7pt80ota().b[2][1]++;
    }
    /**
   * Processes the retry queue for message insertion.
   */ processRetryQueue() {
        cov_1k7pt80ota().f[5]++;
        let retrying = (cov_1k7pt80ota().s[45]++, true);
        cov_1k7pt80ota().s[46]++;
        while((cov_1k7pt80ota().b[3][0]++, retrying) && (cov_1k7pt80ota().b[3][1]++, this.retryQueue.length > 0)){
            cov_1k7pt80ota().s[47]++;
            retrying = false;
            cov_1k7pt80ota().s[48]++;
            this.retryQueue.forEach((post)=>{
                cov_1k7pt80ota().f[6]++;
                cov_1k7pt80ota().s[49]++;
                if (this.tryInsertMessage(post)) {
                    cov_1k7pt80ota().b[4][0]++;
                    cov_1k7pt80ota().s[50]++;
                    this.retryQueue = this.retryQueue.filter((p)=>{
                        cov_1k7pt80ota().f[7]++;
                        cov_1k7pt80ota().s[51]++;
                        return p !== post;
                    });
                    cov_1k7pt80ota().s[52]++;
                    retrying = true;
                } else cov_1k7pt80ota().b[4][1]++;
            });
        }
    }
    /**
   * Function to be called in main that will insert post into chat.
   * @param newPost - The `Post` object representing the new message to be rendered.
   * @returns `true` if the message was successfully inserted, otherwise `false.
   */ tryInsertMessage(newPost) {
        cov_1k7pt80ota().f[8]++;
        const parentPath = (cov_1k7pt80ota().s[53]++, newPost.doc.parent);
        const newWrapper = (cov_1k7pt80ota().s[54]++, {
            message: newPost,
            children: []
        });
        let precedingPost = (cov_1k7pt80ota().s[55]++, null);
        let before = (cov_1k7pt80ota().s[56]++, false);
        cov_1k7pt80ota().s[57]++;
        (0, _slog.slog).info("tryInsertMessage: newPost", [
            "newpost",
            newPost.doc
        ]);
        cov_1k7pt80ota().s[58]++;
        (0, _slog.slog).info("tryInsertMessage: parentPath", [
            "parentPath",
            parentPath
        ]);
        const existingWrapper = (cov_1k7pt80ota().s[59]++, this.messageMap.get(newPost.path));
        cov_1k7pt80ota().s[60]++;
        if (existingWrapper) {
            cov_1k7pt80ota().b[5][0]++;
            cov_1k7pt80ota().s[61]++;
            existingWrapper.message = newPost;
            cov_1k7pt80ota().s[62]++;
            this.updateMessageReactions(newPost);
            // TODO: update reactions for the post this.updateMessageReactions(newPost);
            cov_1k7pt80ota().s[63]++;
            return true;
        } else cov_1k7pt80ota().b[5][1]++;
        cov_1k7pt80ota().s[64]++;
        if (parentPath) {
            cov_1k7pt80ota().b[6][0]++;
            cov_1k7pt80ota().s[65]++;
            (0, _slog.slog).info("Its a reply, parentPath: ", [
                "parentPath",
                parentPath
            ]);
            const parentWrapper = (cov_1k7pt80ota().s[66]++, this.messageMap.get(parentPath));
            cov_1k7pt80ota().s[67]++;
            if (!parentWrapper) {
                cov_1k7pt80ota().b[7][0]++;
                cov_1k7pt80ota().s[68]++;
                if (!this.retryQueue.includes(newPost)) {
                    cov_1k7pt80ota().b[8][0]++;
                    cov_1k7pt80ota().s[69]++;
                    this.retryQueue.push(newPost);
                } else cov_1k7pt80ota().b[8][1]++;
                cov_1k7pt80ota().s[70]++;
                return false;
            } else cov_1k7pt80ota().b[7][1]++;
            cov_1k7pt80ota().s[71]++;
            precedingPost = this.insertIntoSortedChildren(parentWrapper.children, newWrapper);
            cov_1k7pt80ota().s[72]++;
            if ((cov_1k7pt80ota().b[10][0]++, !precedingPost) && (cov_1k7pt80ota().b[10][1]++, parentWrapper.children.length > 1)) {
                cov_1k7pt80ota().b[9][0]++;
                cov_1k7pt80ota().s[73]++;
                before = true;
                cov_1k7pt80ota().s[74]++;
                precedingPost = parentWrapper.children[1].message;
            } else cov_1k7pt80ota().b[9][1]++;
            cov_1k7pt80ota().s[75]++;
            this.messageMap.set(newPost.path, newWrapper);
        } else {
            cov_1k7pt80ota().b[6][1]++;
            cov_1k7pt80ota().s[76]++;
            (0, _slog.slog).info("Its a top level post");
            // Convert the values of the messageMap to an array
            let messagesArray = (cov_1k7pt80ota().s[77]++, Array.from(this.messageMap.values()));
            // Filter out nodes that have parents (i.e., only top-level nodes)
            cov_1k7pt80ota().s[78]++;
            messagesArray = messagesArray.filter((wrapper)=>{
                cov_1k7pt80ota().f[9]++;
                cov_1k7pt80ota().s[79]++;
                return !wrapper.message.doc.parent; // Keep nodes without parents
            });
            const topLevelArray = (cov_1k7pt80ota().s[80]++, Array.from(messagesArray).sort((a, b)=>{
                cov_1k7pt80ota().f[10]++;
                cov_1k7pt80ota().s[81]++;
                return a.message.meta.createdAt - b.message.meta.createdAt;
            }));
            cov_1k7pt80ota().s[82]++;
            precedingPost = this.insertIntoSortedChildren(topLevelArray, newWrapper);
            cov_1k7pt80ota().s[83]++;
            (0, _slog.slog).info("After insertion into sorted children: ", [
                "precedingPost",
                precedingPost
            ]);
            cov_1k7pt80ota().s[84]++;
            this.messageMap.set(newPost.path, newWrapper);
        }
        const newMessageElem = (cov_1k7pt80ota().s[85]++, this.addMessage(newPost, this.messageMap));
        cov_1k7pt80ota().s[86]++;
        (0, _slog.slog).info("tryInsertMessage: newMessageElem", [
            "newMessageElem",
            newMessageElem
        ]);
        cov_1k7pt80ota().s[87]++;
        (0, _slog.slog).info("precedingPost", [
            "precedingPost",
            precedingPost
        ]);
        cov_1k7pt80ota().s[88]++;
        if (parentPath) {
            cov_1k7pt80ota().b[11][0]++;
            const parentElem = (cov_1k7pt80ota().s[89]++, document.querySelector(`[data-path="${parentPath}"]`));
            cov_1k7pt80ota().s[90]++;
            if (precedingPost) {
                cov_1k7pt80ota().b[12][0]++;
                const precedingWrapper = (cov_1k7pt80ota().s[91]++, this.messageMap.get(precedingPost.path));
                cov_1k7pt80ota().s[92]++;
                if (precedingWrapper) {
                    cov_1k7pt80ota().b[13][0]++;
                    const deepestPost = (cov_1k7pt80ota().s[93]++, this.findDeepestChild(precedingWrapper));
                    const precedingElem = (cov_1k7pt80ota().s[94]++, document.querySelector(`[data-path="${deepestPost.path}"]`));
                    cov_1k7pt80ota().s[95]++;
                    (0, _slog.slog).info("precedingElem for deepest post", [
                        "precedingElem",
                        precedingElem
                    ]);
                    cov_1k7pt80ota().s[96]++;
                    if (before) {
                        cov_1k7pt80ota().b[14][0]++;
                        cov_1k7pt80ota().s[97]++;
                        precedingElem.insertAdjacentElement("beforebegin", newMessageElem);
                    } else {
                        cov_1k7pt80ota().b[14][1]++;
                        cov_1k7pt80ota().s[98]++;
                        precedingElem.insertAdjacentElement("afterend", newMessageElem);
                    }
                } else cov_1k7pt80ota().b[13][1]++;
            } else {
                cov_1k7pt80ota().b[12][1]++;
                cov_1k7pt80ota().s[99]++;
                parentElem.insertAdjacentElement("afterend", newMessageElem);
            }
        } else {
            cov_1k7pt80ota().b[11][1]++;
            cov_1k7pt80ota().s[100]++;
            (0, _slog.slog).info("no parents, here");
            const container = (cov_1k7pt80ota().s[101]++, this.chatContainer);
            cov_1k7pt80ota().s[102]++;
            if (precedingPost) {
                cov_1k7pt80ota().b[15][0]++;
                cov_1k7pt80ota().s[103]++;
                (0, _slog.slog).info("precedingPost.path", [
                    "precedingPost.path",
                    precedingPost.path
                ]);
                const precedingWrapper = (cov_1k7pt80ota().s[104]++, this.messageMap.get(precedingPost.path));
                cov_1k7pt80ota().s[105]++;
                if (precedingWrapper) {
                    cov_1k7pt80ota().b[16][0]++;
                    const deepestPost = (cov_1k7pt80ota().s[106]++, this.findDeepestChild(precedingWrapper));
                    const precedingElem = (cov_1k7pt80ota().s[107]++, document.querySelector(`[data-path="${deepestPost.path}"]`));
                    cov_1k7pt80ota().s[108]++;
                    (0, _slog.slog).info("precedingElem", [
                        "precedingElem",
                        precedingElem
                    ]);
                    // Need to check if this is in a completely new channel
                    cov_1k7pt80ota().s[109]++;
                    if ((cov_1k7pt80ota().b[18][0]++, precedingElem) && (cov_1k7pt80ota().b[18][1]++, container.contains(precedingElem))) {
                        cov_1k7pt80ota().b[17][0]++;
                        cov_1k7pt80ota().s[110]++;
                        precedingElem.insertAdjacentElement("afterend", newMessageElem);
                    } else {
                        cov_1k7pt80ota().b[17][1]++;
                        cov_1k7pt80ota().s[111]++;
                        container.insertBefore(newMessageElem, container.firstChild);
                    }
                } else cov_1k7pt80ota().b[16][1]++;
            } else {
                cov_1k7pt80ota().b[15][1]++;
                cov_1k7pt80ota().s[112]++;
                container.insertBefore(newMessageElem, container.firstChild);
            }
        }
        cov_1k7pt80ota().s[113]++;
        if (((cov_1k7pt80ota().b[20][0]++, newPost.doc.msg) || (cov_1k7pt80ota().b[20][1]++, "")).toLowerCase().includes("happy birthday")) {
            cov_1k7pt80ota().b[19][0]++;
            cov_1k7pt80ota().s[114]++;
            (0, _slog.slog).info("Happy Birthday detected!");
            cov_1k7pt80ota().s[115]++;
            this.showBirthdayCake();
        } else cov_1k7pt80ota().b[19][1]++;
        cov_1k7pt80ota().s[116]++;
        return true;
    }
    /**
   * Updates the reaction section of a message element in the chat UI.
   * @param newPost - The `Post` object containing updated reaction data.
   */ updateMessageReactions(newPost) {
        cov_1k7pt80ota().f[11]++;
        cov_1k7pt80ota().s[117]++;
        // Find the message element by data-path
        (0, _slog.slog)["info"]("updateMessageReactions: newPost", [
            "newPost",
            newPost
        ]);
        const messageElem = (cov_1k7pt80ota().s[118]++, this.chatContainer.querySelector(`[data-path="${newPost.path}"]`));
        cov_1k7pt80ota().s[119]++;
        if (!messageElem) {
            cov_1k7pt80ota().b[21][0]++;
            cov_1k7pt80ota().s[120]++;
            (0, _slog.slog).error(`Message element not found for path: ${newPost.path}`);
            cov_1k7pt80ota().s[121]++;
            return;
        } else cov_1k7pt80ota().b[21][1]++;
        const reactionsSection = (cov_1k7pt80ota().s[122]++, messageElem.querySelector(".reactions"));
        cov_1k7pt80ota().s[123]++;
        if (!reactionsSection) {
            cov_1k7pt80ota().b[22][0]++;
            cov_1k7pt80ota().s[124]++;
            (0, _slog.slog).error(`Reactions section not found for message: ${newPost.path}`);
            cov_1k7pt80ota().s[125]++;
            return;
        } else cov_1k7pt80ota().b[22][1]++;
        const emojis = (cov_1k7pt80ota().s[126]++, {
            ":smile:": '<iconify-icon icon="twemoji:smiling-face"></iconify-icon>',
            ":frown:": '<iconify-icon icon="twemoji:slightly-frowning-face"></iconify-icon>',
            ":like:": '<iconify-icon icon="twemoji:thumbs-up"></iconify-icon>',
            ":celebrate:": '<iconify-icon icon="twemoji:party-popper"></iconify-icon>'
        });
        // Iterate over each reaction type
        cov_1k7pt80ota().s[127]++;
        Object.entries(emojis).forEach(([emoji, icon])=>{
            cov_1k7pt80ota().f[12]++;
            const reactionButton = (cov_1k7pt80ota().s[128]++, reactionsSection.querySelector(`[data-reaction="${emoji}"]`));
            // Update the count
            const userCount = (cov_1k7pt80ota().s[129]++, (cov_1k7pt80ota().b[23][0]++, newPost.doc.reactions?.[emoji]?.length) || (cov_1k7pt80ota().b[23][1]++, 0));
            cov_1k7pt80ota().s[130]++;
            reactionButton.innerHTML = `${icon} ${userCount}`;
        });
    }
    /**
   * Adds a new message element to the chat UI, handling reply indentation.
   * @param post - The `Post` object containing the message data.
   * @param messageMap - A mapping of message paths to `MessageWrapper` objects for easy parent lookup.
   * @returns the constructed message element to be appended to the chat container.
   */ addMessage(post, messageMap) {
        cov_1k7pt80ota().f[13]++;
        // Determine the reply indentation level
        let replyIndent = (cov_1k7pt80ota().s[131]++, 0);
        let currentPath = (cov_1k7pt80ota().s[132]++, post.doc.parent);
        cov_1k7pt80ota().s[133]++;
        while(currentPath){
            const parentWrapper = (cov_1k7pt80ota().s[134]++, messageMap.get(currentPath));
            cov_1k7pt80ota().s[135]++;
            if (!parentWrapper) {
                cov_1k7pt80ota().b[24][0]++;
                cov_1k7pt80ota().s[136]++;
                break;
            } else cov_1k7pt80ota().b[24][1]++;
             // Parent not found
            cov_1k7pt80ota().s[137]++;
            replyIndent++;
            cov_1k7pt80ota().s[138]++;
            currentPath = parentWrapper.message.doc.parent;
        }
        // Use the messageTemplate function to create the message element
        const messageElement = (cov_1k7pt80ota().s[139]++, this.messageTemplate(post, replyIndent));
        cov_1k7pt80ota().s[140]++;
        return messageElement;
    }
    /**
   * Finds the deepest child message in a nested reply structure.
   * @param parentWrapper - The `MessageWrapper` wrapper object containing the parent message and its child messages.
   * @returns the deepest `Post` child message in the hierarchy, or the parent message if there are no children.
   */ findDeepestChild(parentWrapper) {
        cov_1k7pt80ota().f[14]++;
        cov_1k7pt80ota().s[141]++;
        if (parentWrapper.children.length === 0) {
            cov_1k7pt80ota().b[25][0]++;
            cov_1k7pt80ota().s[142]++;
            return parentWrapper.message;
        } else cov_1k7pt80ota().b[25][1]++;
         // Base Case
        // Recursively find lowest child
        cov_1k7pt80ota().s[143]++;
        return this.findDeepestChild(parentWrapper.children[parentWrapper.children.length - 1]);
    }
    /**
   * Generates an HTML template for a given post with proper styling and metadata.
   * @param post - The `Post` object representing the message to be rendered.
   * @param replyIndent - The indentation level for replies.
   * @returns the structured HTML representation of the `Post` object.
   */ messageTemplate(post, replyIndent) {
        cov_1k7pt80ota().f[15]++;
        const messageSection = (cov_1k7pt80ota().s[144]++, document.createElement("section"));
        cov_1k7pt80ota().s[145]++;
        messageSection.classList.add("message");
        cov_1k7pt80ota().s[146]++;
        messageSection.dataset.path = post.path; // Add data attribute for identification
        // Format createdAt timestamp to a readable date string
        const createdAtDate = (cov_1k7pt80ota().s[147]++, new Date(post.meta.createdAt));
        const formattedDate = (cov_1k7pt80ota().s[148]++, createdAtDate.toLocaleString("en-US", {
            weekday: "short",
            year: "numeric",
            month: "short",
            day: "numeric",
            hour: "numeric",
            minute: "numeric",
            second: "numeric",
            timeZoneName: "short"
        }));
        const parsedContent = (cov_1k7pt80ota().s[149]++, this.parseMarkdown((cov_1k7pt80ota().b[26][0]++, post.doc.msg) || (cov_1k7pt80ota().b[26][1]++, "")));
        // Add message content with author and timestamp
        cov_1k7pt80ota().s[150]++;
        messageSection.innerHTML = `<span><strong>${post.meta.createdBy} - ${formattedDate}:</strong><br>${parsedContent}</span>`;
        cov_1k7pt80ota().s[151]++;
        if (replyIndent > 0) {
            cov_1k7pt80ota().b[27][0]++;
            cov_1k7pt80ota().s[152]++;
            messageSection.style.marginLeft = `${replyIndent * 40}px`;
        } else cov_1k7pt80ota().b[27][1]++;
        // Initialize reactions div
        const reactionsSection = (cov_1k7pt80ota().s[153]++, document.createElement("section"));
        cov_1k7pt80ota().s[154]++;
        reactionsSection.classList.add("reactions");
        const emojis = (cov_1k7pt80ota().s[155]++, {
            ":smile:": '<iconify-icon icon="twemoji:smiling-face"></iconify-icon>',
            ":frown:": '<iconify-icon icon="twemoji:slightly-frowning-face"></iconify-icon>',
            ":like:": '<iconify-icon icon="twemoji:thumbs-up"></iconify-icon>',
            ":celebrate:": '<iconify-icon icon="twemoji:party-popper"></iconify-icon>'
        });
        // Create a button for each reaction type with initial count 0
        cov_1k7pt80ota().s[156]++;
        Object.entries(emojis).forEach(([emoji, icon])=>{
            cov_1k7pt80ota().f[16]++;
            const reactionButton = (cov_1k7pt80ota().s[157]++, document.createElement("button"));
            cov_1k7pt80ota().s[158]++;
            reactionButton.classList.add("reaction-button");
            cov_1k7pt80ota().s[159]++;
            reactionButton.dataset.reaction = emoji;
            const userCount = (cov_1k7pt80ota().s[160]++, (cov_1k7pt80ota().b[28][0]++, post.doc.reactions?.[emoji]?.length) || (cov_1k7pt80ota().b[28][1]++, 0));
            cov_1k7pt80ota().s[161]++;
            reactionButton.innerHTML = `${icon} ${userCount}`;
            cov_1k7pt80ota().s[162]++;
            reactionButton.title = emoji;
            cov_1k7pt80ota().s[163]++;
            reactionButton.id = emoji;
            cov_1k7pt80ota().s[164]++;
            reactionsSection.appendChild(reactionButton);
            // Add event listener for the reaction button
            cov_1k7pt80ota().s[165]++;
            reactionButton.addEventListener("click", ()=>{
                cov_1k7pt80ota().f[17]++;
                cov_1k7pt80ota().s[166]++;
                // Dispatch a 'reaction' event with postPath and reactionType
                this.dispatchEvent(new CustomEvent("reaction", {
                    detail: {
                        postPath: post.path,
                        reactionType: emoji
                    },
                    bubbles: true,
                    composed: true
                }));
            });
        });
        // Add Reply button
        const replyButton = (cov_1k7pt80ota().s[167]++, document.createElement("button"));
        cov_1k7pt80ota().s[168]++;
        replyButton.id = "reply-button"; // Reusing the reaction-button style
        cov_1k7pt80ota().s[169]++;
        replyButton.classList.add("reaction-button"); // Reusing the reaction-button style
        cov_1k7pt80ota().s[170]++;
        replyButton.textContent = "Reply";
        cov_1k7pt80ota().s[171]++;
        replyButton.addEventListener("click", ()=>{
            cov_1k7pt80ota().f[18]++;
            cov_1k7pt80ota().s[172]++;
            return this.handleReplyClick(post.path);
        });
        cov_1k7pt80ota().s[173]++;
        reactionsSection.appendChild(replyButton);
        // Add reactions row to the message component
        cov_1k7pt80ota().s[174]++;
        messageSection.appendChild(reactionsSection);
        cov_1k7pt80ota().s[175]++;
        return messageSection;
    }
    /**
   * Parses a given text string into HTML, converting Markdown-style syntax and
   * formatting into appropriate HTML elements for rendering.
   * @param text - The raw string input from the user that may contain Markdown-like syntax for formatting.
   * @returns the HTML string with Markdown formatting converted and input sanitized.
   */ parseMarkdown(text) {
        cov_1k7pt80ota().f[19]++;
        cov_1k7pt80ota().s[176]++;
        // Escape HTML tags to prevent XSS
        text = text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        // Replace line breaks with <br>
        cov_1k7pt80ota().s[177]++;
        text = text.replace(/\n/g, "<br>");
        // Replace **text** with <strong>text</strong>
        cov_1k7pt80ota().s[178]++;
        text = text.replace(/\*\*(.+?)\*\*/g, "<strong>$1</strong>");
        // Replace *text* with <em>text</em>
        cov_1k7pt80ota().s[179]++;
        text = text.replace(/(?<!\*)\*(?!\*)(.+?)(?<!\*)\*(?!\*)/g, "<em>$1</em>");
        // Replace [text](url) with <a href="url">text</a>
        cov_1k7pt80ota().s[180]++;
        text = text.replace(/\[(.+?)\]\((.+?)\)/g, '<a href="$2">$1</a>');
        // Replace :emoji: with Iconify icons
        const emojiIcons = (cov_1k7pt80ota().s[181]++, {
            ":smile:": '<iconify-icon icon="twemoji:smiling-face"></iconify-icon>',
            ":frown:": '<iconify-icon icon="twemoji:slightly-frowning-face"></iconify-icon>',
            ":like:": '<iconify-icon icon="twemoji:thumbs-up"></iconify-icon>',
            ":celebrate:": '<iconify-icon icon="twemoji:party-popper"></iconify-icon>'
        });
        cov_1k7pt80ota().s[182]++;
        text = text.replace(/(:[a-zA-Z]+?:)/g, (match)=>{
            cov_1k7pt80ota().f[20]++;
            cov_1k7pt80ota().s[183]++;
            return (cov_1k7pt80ota().b[29][0]++, emojiIcons[match]) || (cov_1k7pt80ota().b[29][1]++, match);
        });
        cov_1k7pt80ota().s[184]++;
        return text;
    }
    /**
   * Handles the event when the "Reply" button is clicked on a post.
   * @param postPath - The unique identifier (path) of the post to which the user is replying.
   */ handleReplyClick(postPath) {
        cov_1k7pt80ota().f[21]++;
        cov_1k7pt80ota().s[185]++;
        (0, _slog.slog).info("MainContentComponent: handleReplyClick", [
            "postPath",
            postPath
        ]);
        // Dispatch a custom event with the postPath to notify other parts of the app
        cov_1k7pt80ota().s[186]++;
        document.dispatchEvent(new CustomEvent("reply-to-message", {
            detail: {
                postPath
            },
            bubbles: true,
            composed: true
        }));
    }
    /**
   * Displays a list of posts in the chat container by processing and rendering them.
   * @param posts - An array of `Post` objects to be displayed.
   */ displayPosts(posts) {
        cov_1k7pt80ota().f[22]++;
        cov_1k7pt80ota().s[187]++;
        (0, _slog.slog).info("MainContentComponent: displayPosts", [
            "posts",
            posts
        ]);
        // Sort posts by timestamp
        const sortedPosts = (cov_1k7pt80ota().s[188]++, posts.sort((a, b)=>{
            cov_1k7pt80ota().f[23]++;
            cov_1k7pt80ota().s[189]++;
            return a.meta.createdAt - b.meta.createdAt;
        }));
        // Create map of {"path": ["childrenpaths,..."]} and map of {"path": Post} for easy access
        const postMap = (cov_1k7pt80ota().s[190]++, new Map());
        const childrenMap = (cov_1k7pt80ota().s[191]++, new Map());
        cov_1k7pt80ota().s[192]++;
        sortedPosts.forEach((post)=>{
            cov_1k7pt80ota().f[24]++;
            cov_1k7pt80ota().s[193]++;
            postMap.set(post.path, post);
            cov_1k7pt80ota().s[194]++;
            if (post.doc.parent) {
                cov_1k7pt80ota().b[30][0]++;
                const parentPath = (cov_1k7pt80ota().s[195]++, post.doc.parent);
                cov_1k7pt80ota().s[196]++;
                if (!childrenMap.has(parentPath)) {
                    cov_1k7pt80ota().b[31][0]++;
                    cov_1k7pt80ota().s[197]++;
                    childrenMap.set(parentPath, []);
                } else cov_1k7pt80ota().b[31][1]++;
                cov_1k7pt80ota().s[198]++;
                childrenMap.get(parentPath).push(post.path);
            } else {
                cov_1k7pt80ota().b[30][1]++;
                cov_1k7pt80ota().s[199]++;
                if (!childrenMap.has(post.path)) {
                    cov_1k7pt80ota().b[32][0]++;
                    cov_1k7pt80ota().s[200]++;
                    childrenMap.set(post.path, []);
                } else cov_1k7pt80ota().b[32][1]++;
            }
        });
        cov_1k7pt80ota().s[201]++;
        this.chatContainer.innerHTML = ""; // Clear previous content
        cov_1k7pt80ota().s[202]++;
        this.populateChat(postMap, childrenMap); // Render the posts in the chat container
    }
    /**
   * Recursive function to populate chat container with posts and replies.
   * @param postMap - A map where the key is the `postPath` and the value is the corresponding `Post` object.
   * @param childrenMap - A map where the key is a `postPath`, and the value is an array of paths to the replies.
   * @param postPath - The path of the post to start from. If `null`, starts from the root.
   * @param indent - The indentation level for nested replies. Defaults to 0.
   */ populateChat(postMap, childrenMap, postPath = (cov_1k7pt80ota().b[33][0]++, null), indent = (cov_1k7pt80ota().b[34][0]++, 0)) {
        cov_1k7pt80ota().f[25]++;
        // If no specific postPath is provided, we start at the top-level posts (posts without a parent)
        const postsToRender = (cov_1k7pt80ota().s[203]++, postPath ? (cov_1k7pt80ota().b[35][0]++, childrenMap.get(postPath)) : (cov_1k7pt80ota().b[35][1]++, Array.from(postMap.keys()).filter((path)=>{
            cov_1k7pt80ota().f[26]++;
            cov_1k7pt80ota().s[204]++;
            return !postMap.get(path).doc.parent;
        })));
        cov_1k7pt80ota().s[205]++;
        if (!postsToRender) {
            cov_1k7pt80ota().b[36][0]++;
            cov_1k7pt80ota().s[206]++;
            return;
        } else cov_1k7pt80ota().b[36][1]++;
         // If there are no posts to render, exit
        cov_1k7pt80ota().s[207]++;
        for (const path of postsToRender){
            const post = (cov_1k7pt80ota().s[208]++, postMap.get(path));
            cov_1k7pt80ota().s[209]++;
            if (post) {
                cov_1k7pt80ota().b[37][0]++;
                // Render the post at the current indentation level
                // let childrenArray = [];
                // for (const child in childrenMap.get(path)) {
                //   const childWrapper: MessageWrapper = {message: postMap.get(child), children: postMap.get(child)};
                //   childrenArray.push(child);
                // }
                // const newMessageWrapper: MessageWrapper = {post, childrenArray}
                // this.messageMap.set(post.path, newMessageWrapper);
                const messageElement = (cov_1k7pt80ota().s[210]++, this.messageTemplate(post, indent));
                cov_1k7pt80ota().s[211]++;
                this.chatContainer.appendChild(messageElement);
                // Recursively render children, increasing the indentation
                const children = (cov_1k7pt80ota().s[212]++, childrenMap.get(path));
                cov_1k7pt80ota().s[213]++;
                if ((cov_1k7pt80ota().b[39][0]++, children) && (cov_1k7pt80ota().b[39][1]++, children.length > 0)) {
                    cov_1k7pt80ota().b[38][0]++;
                    cov_1k7pt80ota().s[214]++;
                    this.populateChat(postMap, childrenMap, path, indent + 1);
                } else cov_1k7pt80ota().b[38][1]++;
            } else cov_1k7pt80ota().b[37][1]++;
        }
    }
    /**
   * Load posts for a selected workspace and channel by calling the controller.
   * @param event - The event object that triggers the loading of posts.
   * @returns a promise that resolves when the posts are successfully loaded.
   */ async loadPosts(event) {
        cov_1k7pt80ota().f[27]++;
        const customEvent = (cov_1k7pt80ota().s[215]++, event);
        const { workspaceName, channel } = (cov_1k7pt80ota().s[216]++, customEvent.detail);
        cov_1k7pt80ota().s[217]++;
        (0, _slog.slog).info("MainContentComponent: loadPosts", [
            "workspace",
            workspaceName
        ], [
            "channel",
            channel
        ]);
        cov_1k7pt80ota().s[218]++;
        document.dispatchEvent(new CustomEvent("get-posts", {
            detail: {
                workspaceName,
                channel
            },
            bubbles: true,
            composed: true
        }));
    }
    /**
   * connectedCallback to add event listeners.
   */ connectedCallback() {
        cov_1k7pt80ota().f[28]++;
        cov_1k7pt80ota().s[219]++;
        // Listen for channel initialization event(autoselection for the first channel if no channel is selected)
        // Listen for channel selection event
        document.addEventListener("channel-select", this.updateHeader);
        cov_1k7pt80ota().s[220]++;
        document.addEventListener("channel-select", this.loadPosts);
        cov_1k7pt80ota().s[221]++;
        document.addEventListener("workspace-select", this.clearpost);
    }
    /**
   * disconnectedCallback to remove event listeners.
   */ disconnectedCallback() {
        cov_1k7pt80ota().f[29]++;
        cov_1k7pt80ota().s[222]++;
        // Clean up event listener
        document.removeEventListener("channel-select", this.updateHeader);
        cov_1k7pt80ota().s[223]++;
        document.removeEventListener("channel-select", this.loadPosts);
    }
    /**
   * Displays an error message.
   * @param message - The error message to display.
   */ showError(message) {
        cov_1k7pt80ota().f[30]++;
        cov_1k7pt80ota().s[224]++;
        // Clear any existing error messages
        this.errorContainerpost.innerHTML = "";
        // Create the error button
        const errorButton = (cov_1k7pt80ota().s[225]++, document.createElement("button"));
        cov_1k7pt80ota().s[226]++;
        errorButton.classList.add("error-button");
        cov_1k7pt80ota().s[227]++;
        errorButton.textContent = message;
        // Create the close icon
        const closeIcon = (cov_1k7pt80ota().s[228]++, document.createElement("span"));
        cov_1k7pt80ota().s[229]++;
        closeIcon.classList.add("close-icon");
        cov_1k7pt80ota().s[230]++;
        closeIcon.textContent = "\u2716"; // Unicode for "x"
        // Append the close icon to the error button
        cov_1k7pt80ota().s[231]++;
        errorButton.appendChild(closeIcon);
        // Add event listener to hide the error message when "x" is clicked
        cov_1k7pt80ota().s[232]++;
        closeIcon.addEventListener("click", ()=>{
            cov_1k7pt80ota().f[31]++;
            cov_1k7pt80ota().s[233]++;
            return this.hideError();
        });
        // Append the error button to the error container
        cov_1k7pt80ota().s[234]++;
        this.errorContainerpost.appendChild(errorButton);
        // Make the error container visible
        cov_1k7pt80ota().s[235]++;
        this.errorContainerpost.style.display = "block";
    }
    /**
   * Hides the error message.
   */ hideError() {
        cov_1k7pt80ota().f[32]++;
        cov_1k7pt80ota().s[236]++;
        this.errorContainerpost.style.display = "none";
        cov_1k7pt80ota().s[237]++;
        this.errorContainerpost.innerHTML = "";
    }
    /**
   * Creates and displays the birthday cake icon when called.
   */ showBirthdayCake() {
        cov_1k7pt80ota().f[33]++;
        // Create the birthday cake icon element
        const cakeIcon = (cov_1k7pt80ota().s[238]++, document.createElement("iconify-icon"));
        cov_1k7pt80ota().s[239]++;
        cakeIcon.setAttribute("icon", "twemoji:birthday-cake"); // Use a colorful birthday cake icon
        cov_1k7pt80ota().s[240]++;
        cakeIcon.classList.add("birthday-cake-icon");
        cov_1k7pt80ota().s[241]++;
        cakeIcon.setAttribute("role", "img");
        cov_1k7pt80ota().s[242]++;
        cakeIcon.setAttribute("aria-label", "Birthday Cake");
        // Append the icon to the shadow root for encapsulation
        cov_1k7pt80ota().s[243]++;
        if (this.shadowRoot) {
            cov_1k7pt80ota().b[40][0]++;
            cov_1k7pt80ota().s[244]++;
            this.shadowRoot.appendChild(cakeIcon);
            // Trigger the animation on the next animation frame
            cov_1k7pt80ota().s[245]++;
            requestAnimationFrame(()=>{
                cov_1k7pt80ota().f[34]++;
                cov_1k7pt80ota().s[246]++;
                cakeIcon.classList.add("show");
            });
            // Remove the icon after the animation completes (e.g., 2 seconds)
            cov_1k7pt80ota().s[247]++;
            setTimeout(()=>{
                cov_1k7pt80ota().f[35]++;
                cov_1k7pt80ota().s[248]++;
                cakeIcon.classList.remove("show");
                // Optionally, remove the element from the DOM after fading out
                cov_1k7pt80ota().s[249]++;
                setTimeout(()=>{
                    cov_1k7pt80ota().f[36]++;
                    cov_1k7pt80ota().s[250]++;
                    cakeIcon.remove();
                }, 500); // Matches the transition duration
            }, 2000); // Duration the icon stays visible
        } else {
            cov_1k7pt80ota().b[40][1]++;
            cov_1k7pt80ota().s[251]++;
            console.error("Shadow root not found.");
        }
    }
}

},{"../slog":"jExiC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Aff8i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A custom web component that represents a dialog for creating a workspace.
 * Extends HTMLElement and uses shadow DOM to encapsulate styles and behavior.
 * Provides functionality to display and manage the creation of a new workspace.
 */ parcelHelpers.export(exports, "CreateWorkspaceDialog", ()=>CreateWorkspaceDialog);
// src/components/CreateWorkspaceDialog.ts
var _slog = require("../slog");
function cov_ko4u1luo7() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/view/CreateWorkspaceDialog.ts";
    var hash = "dbd1db2977a621fbf55a51a038ed9f3c328aa0f3";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/view/CreateWorkspaceDialog.ts",
        statementMap: {
            "0": {
                start: {
                    line: 19,
                    column: 4
                },
                end: {
                    line: 19,
                    column: 12
                }
            },
            "1": {
                start: {
                    line: 20,
                    column: 4
                },
                end: {
                    line: 20,
                    column: 54
                }
            },
            "2": {
                start: {
                    line: 23,
                    column: 4
                },
                end: {
                    line: 23,
                    column: 57
                }
            },
            "3": {
                start: {
                    line: 24,
                    column: 4
                },
                end: {
                    line: 24,
                    column: 56
                }
            },
            "4": {
                start: {
                    line: 25,
                    column: 4
                },
                end: {
                    line: 32,
                    column: 6
                }
            },
            "5": {
                start: {
                    line: 33,
                    column: 4
                },
                end: {
                    line: 33,
                    column: 48
                }
            },
            "6": {
                start: {
                    line: 36,
                    column: 4
                },
                end: {
                    line: 36,
                    column: 50
                }
            },
            "7": {
                start: {
                    line: 39,
                    column: 18
                },
                end: {
                    line: 39,
                    column: 49
                }
            },
            "8": {
                start: {
                    line: 40,
                    column: 4
                },
                end: {
                    line: 103,
                    column: 6
                }
            },
            "9": {
                start: {
                    line: 104,
                    column: 4
                },
                end: {
                    line: 104,
                    column: 35
                }
            },
            "10": {
                start: {
                    line: 107,
                    column: 4
                },
                end: {
                    line: 109,
                    column: 64
                }
            },
            "11": {
                start: {
                    line: 109,
                    column: 40
                },
                end: {
                    line: 109,
                    column: 62
                }
            },
            "12": {
                start: {
                    line: 111,
                    column: 4
                },
                end: {
                    line: 113,
                    column: 60
                }
            },
            "13": {
                start: {
                    line: 113,
                    column: 40
                },
                end: {
                    line: 113,
                    column: 58
                }
            },
            "14": {
                start: {
                    line: 116,
                    column: 4
                },
                end: {
                    line: 116,
                    column: 75
                }
            },
            "15": {
                start: {
                    line: 116,
                    column: 56
                },
                end: {
                    line: 116,
                    column: 73
                }
            },
            "16": {
                start: {
                    line: 123,
                    column: 4
                },
                end: {
                    line: 123,
                    column: 49
                }
            },
            "17": {
                start: {
                    line: 124,
                    column: 21
                },
                end: {
                    line: 124,
                    column: 51
                }
            },
            "18": {
                start: {
                    line: 125,
                    column: 4
                },
                end: {
                    line: 128,
                    column: 5
                }
            },
            "19": {
                start: {
                    line: 126,
                    column: 6
                },
                end: {
                    line: 126,
                    column: 37
                }
            },
            "20": {
                start: {
                    line: 127,
                    column: 6
                },
                end: {
                    line: 127,
                    column: 44
                }
            },
            "21": {
                start: {
                    line: 135,
                    column: 4
                },
                end: {
                    line: 135,
                    column: 48
                }
            },
            "22": {
                start: {
                    line: 136,
                    column: 21
                },
                end: {
                    line: 136,
                    column: 51
                }
            },
            "23": {
                start: {
                    line: 137,
                    column: 4
                },
                end: {
                    line: 140,
                    column: 5
                }
            },
            "24": {
                start: {
                    line: 138,
                    column: 6
                },
                end: {
                    line: 138,
                    column: 40
                }
            },
            "25": {
                start: {
                    line: 139,
                    column: 6
                },
                end: {
                    line: 139,
                    column: 40
                }
            },
            "26": {
                start: {
                    line: 147,
                    column: 18
                },
                end: {
                    line: 149,
                    column: 25
                }
            },
            "27": {
                start: {
                    line: 150,
                    column: 26
                },
                end: {
                    line: 150,
                    column: 44
                }
            },
            "28": {
                start: {
                    line: 151,
                    column: 4
                },
                end: {
                    line: 166,
                    column: 5
                }
            },
            "29": {
                start: {
                    line: 152,
                    column: 6
                },
                end: {
                    line: 152,
                    column: 79
                }
            },
            "30": {
                start: {
                    line: 154,
                    column: 6
                },
                end: {
                    line: 160,
                    column: 8
                }
            },
            "31": {
                start: {
                    line: 162,
                    column: 6
                },
                end: {
                    line: 162,
                    column: 23
                }
            },
            "32": {
                start: {
                    line: 163,
                    column: 6
                },
                end: {
                    line: 163,
                    column: 25
                }
            },
            "33": {
                start: {
                    line: 165,
                    column: 6
                },
                end: {
                    line: 165,
                    column: 51
                }
            }
        },
        fnMap: {
            "0": {
                name: "(anonymous_0)",
                decl: {
                    start: {
                        line: 18,
                        column: 2
                    },
                    end: {
                        line: 18,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 18,
                        column: 16
                    },
                    end: {
                        line: 117,
                        column: 3
                    }
                },
                line: 18
            },
            "1": {
                name: "(anonymous_1)",
                decl: {
                    start: {
                        line: 109,
                        column: 34
                    },
                    end: {
                        line: 109,
                        column: 35
                    }
                },
                loc: {
                    start: {
                        line: 109,
                        column: 40
                    },
                    end: {
                        line: 109,
                        column: 62
                    }
                },
                line: 109
            },
            "2": {
                name: "(anonymous_2)",
                decl: {
                    start: {
                        line: 113,
                        column: 34
                    },
                    end: {
                        line: 113,
                        column: 35
                    }
                },
                loc: {
                    start: {
                        line: 113,
                        column: 40
                    },
                    end: {
                        line: 113,
                        column: 58
                    }
                },
                line: 113
            },
            "3": {
                name: "(anonymous_3)",
                decl: {
                    start: {
                        line: 116,
                        column: 50
                    },
                    end: {
                        line: 116,
                        column: 51
                    }
                },
                loc: {
                    start: {
                        line: 116,
                        column: 56
                    },
                    end: {
                        line: 116,
                        column: 73
                    }
                },
                line: 116
            },
            "4": {
                name: "(anonymous_4)",
                decl: {
                    start: {
                        line: 122,
                        column: 2
                    },
                    end: {
                        line: 122,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 122,
                        column: 28
                    },
                    end: {
                        line: 129,
                        column: 3
                    }
                },
                line: 122
            },
            "5": {
                name: "(anonymous_5)",
                decl: {
                    start: {
                        line: 134,
                        column: 2
                    },
                    end: {
                        line: 134,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 134,
                        column: 29
                    },
                    end: {
                        line: 141,
                        column: 3
                    }
                },
                line: 134
            },
            "6": {
                name: "(anonymous_6)",
                decl: {
                    start: {
                        line: 146,
                        column: 2
                    },
                    end: {
                        line: 146,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 146,
                        column: 34
                    },
                    end: {
                        line: 167,
                        column: 3
                    }
                },
                line: 146
            }
        },
        branchMap: {
            "0": {
                loc: {
                    start: {
                        line: 125,
                        column: 4
                    },
                    end: {
                        line: 128,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 125,
                            column: 4
                        },
                        end: {
                            line: 128,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 125
            },
            "1": {
                loc: {
                    start: {
                        line: 137,
                        column: 4
                    },
                    end: {
                        line: 140,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 137,
                            column: 4
                        },
                        end: {
                            line: 140,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 137
            },
            "2": {
                loc: {
                    start: {
                        line: 151,
                        column: 4
                    },
                    end: {
                        line: 166,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 151,
                            column: 4
                        },
                        end: {
                            line: 166,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: 164,
                            column: 11
                        },
                        end: {
                            line: 166,
                            column: 5
                        }
                    }
                ],
                line: 151
            }
        },
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0,
            "18": 0,
            "19": 0,
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "31": 0,
            "32": 0,
            "33": 0
        },
        f: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0
        },
        b: {
            "0": [
                0,
                0
            ],
            "1": [
                0,
                0
            ],
            "2": [
                0,
                0
            ]
        },
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "dbd1db2977a621fbf55a51a038ed9f3c328aa0f3"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_ko4u1luo7 = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_ko4u1luo7();
class CreateWorkspaceDialog extends HTMLElement {
    shadow;
    dialogContainer;
    /**
   * Initializes the CreateWorkspaceDialog component.
   * Attaches a shadow DOM and creates the dialog container element.
   */ constructor(){
        cov_ko4u1luo7().f[0]++;
        cov_ko4u1luo7().s[0]++;
        super();
        cov_ko4u1luo7().s[1]++;
        this.shadow = this.attachShadow({
            mode: "open"
        });
        // Create the dialog container
        cov_ko4u1luo7().s[2]++;
        this.dialogContainer = document.createElement("div");
        cov_ko4u1luo7().s[3]++;
        this.dialogContainer.classList.add("create-dialog");
        cov_ko4u1luo7().s[4]++;
        this.dialogContainer.innerHTML = `
      <div class="create-dialog-content">
        <h3>Create Workspace</h3>
        <input type="text" placeholder="Enter workspace name" class="workspace-input-box" />
        <button class="submit-workspace">Submit</button>
        <button class="cancel-create">Cancel</button>
      </div>
    `;
        cov_ko4u1luo7().s[5]++;
        this.dialogContainer.style.display = "none"; // Hidden by default
        // Append the dialog to the shadow DOM
        cov_ko4u1luo7().s[6]++;
        this.shadow.appendChild(this.dialogContainer);
        // Add styles
        const style = (cov_ko4u1luo7().s[7]++, document.createElement("style"));
        cov_ko4u1luo7().s[8]++;
        style.textContent = `
      .create-dialog {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #ffffff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        z-index: 3000;
        width: 300px;
        display: none; /* Hidden by default */
      }

      .create-dialog-content {
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      .create-dialog-content h3 {
        margin-bottom: 15px;
      }

      .workspace-input-box {
        padding: 10px;
        margin: 10px 0;
        width: 80%;
        border: 1px solid #ccc;
        border-radius: 5px;
      }

      .create-dialog-content button {
        background-color: #e5c3d1;
        color: white;
        border: none;
        padding: 10px 20px;
        margin: 5px 0;
        cursor: pointer;
        border-radius: 5px;
        width: 80%;
        font-size: 14px;
      }

      .create-dialog-content button:hover {
        background-color: #d4a8bb;
      }

      .cancel-create {
        background-color: #ccc;
        color: #333;
      }

      .cancel-create:hover {
        background-color: #bbb;
      }

      .blur {
        filter: blur(8px);
        -webkit-filter: blur(8px);
        
      }
    `;
        cov_ko4u1luo7().s[9]++;
        this.shadow.appendChild(style);
        // Bind event listeners
        cov_ko4u1luo7().s[10]++;
        this.shadow.querySelector(".submit-workspace")?.addEventListener("click", ()=>{
            cov_ko4u1luo7().f[1]++;
            cov_ko4u1luo7().s[11]++;
            return this.submitWorkspace();
        });
        cov_ko4u1luo7().s[12]++;
        this.shadow.querySelector(".cancel-create")?.addEventListener("click", ()=>{
            cov_ko4u1luo7().f[2]++;
            cov_ko4u1luo7().s[13]++;
            return this.closeDialog();
        });
        // Listen to "create-workspace" event
        cov_ko4u1luo7().s[14]++;
        document.addEventListener("create-workspace", ()=>{
            cov_ko4u1luo7().f[3]++;
            cov_ko4u1luo7().s[15]++;
            return this.openDialog();
        });
    }
    /**
   * Opens the Create Workspace dialog.
   */ openDialog() {
        cov_ko4u1luo7().f[4]++;
        cov_ko4u1luo7().s[16]++;
        this.dialogContainer.style.display = "block";
        const backPage = (cov_ko4u1luo7().s[17]++, document.getElementById("app"));
        cov_ko4u1luo7().s[18]++;
        if (backPage) {
            cov_ko4u1luo7().b[0][0]++;
            cov_ko4u1luo7().s[19]++;
            backPage.classList.add("blur");
            cov_ko4u1luo7().s[20]++;
            backPage.style.pointerEvents = "none";
        } else cov_ko4u1luo7().b[0][1]++;
    }
    /**
   * Closes the Create Workspace dialog.
   */ closeDialog() {
        cov_ko4u1luo7().f[5]++;
        cov_ko4u1luo7().s[21]++;
        this.dialogContainer.style.display = "none";
        const backPage = (cov_ko4u1luo7().s[22]++, document.getElementById("app"));
        cov_ko4u1luo7().s[23]++;
        if (backPage) {
            cov_ko4u1luo7().b[1][0]++;
            cov_ko4u1luo7().s[24]++;
            backPage.classList.remove("blur");
            cov_ko4u1luo7().s[25]++;
            backPage.style.pointerEvents = ""; // Restore interaction
        } else cov_ko4u1luo7().b[1][1]++;
    }
    /**
   * Handles the Submit button click.
   */ submitWorkspace() {
        cov_ko4u1luo7().f[6]++;
        const input = (cov_ko4u1luo7().s[26]++, this.shadow.querySelector(".workspace-input-box"));
        const workspaceName = (cov_ko4u1luo7().s[27]++, input.value.trim());
        cov_ko4u1luo7().s[28]++;
        if (workspaceName) {
            cov_ko4u1luo7().b[2][0]++;
            cov_ko4u1luo7().s[29]++;
            (0, _slog.slog).info("Submitting new workspace:", [
                "workspaceName",
                workspaceName
            ]);
            // Dispatch a custom event with the workspace name
            cov_ko4u1luo7().s[30]++;
            this.dispatchEvent(new CustomEvent("workspace-created", {
                detail: {
                    workspaceName
                },
                bubbles: true,
                composed: true
            }));
            //clear the input field
            cov_ko4u1luo7().s[31]++;
            input.value = "";
            cov_ko4u1luo7().s[32]++;
            this.closeDialog();
        } else {
            cov_ko4u1luo7().b[2][1]++;
            cov_ko4u1luo7().s[33]++;
            (0, _slog.slog).error("Please enter a workspace name.");
        }
    }
}

},{"../slog":"jExiC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gVgck":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A custom web component representing a button to edit a workspace.
 * Extends the `HTMLElement` class and provides functionality to open a dialog
 * for managing workspace settings when the button is clicked.
 */ parcelHelpers.export(exports, "EditWorkspaceButton", ()=>EditWorkspaceButton);
function cov_1rfuy36ofn() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/view/EditworkspaceComponents.ts";
    var hash = "1d1038e8e41ba33b1297976ccd27883f1d9d972a";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/view/EditworkspaceComponents.ts",
        statementMap: {
            "0": {
                start: {
                    line: 15,
                    column: 4
                },
                end: {
                    line: 15,
                    column: 12
                }
            },
            "1": {
                start: {
                    line: 16,
                    column: 4
                },
                end: {
                    line: 16,
                    column: 54
                }
            },
            "2": {
                start: {
                    line: 19,
                    column: 4
                },
                end: {
                    line: 19,
                    column: 56
                }
            },
            "3": {
                start: {
                    line: 20,
                    column: 4
                },
                end: {
                    line: 20,
                    column: 49
                }
            },
            "4": {
                start: {
                    line: 21,
                    column: 4
                },
                end: {
                    line: 28,
                    column: 6
                }
            },
            "5": {
                start: {
                    line: 29,
                    column: 4
                },
                end: {
                    line: 29,
                    column: 43
                }
            },
            "6": {
                start: {
                    line: 32,
                    column: 4
                },
                end: {
                    line: 32,
                    column: 40
                }
            },
            "7": {
                start: {
                    line: 35,
                    column: 18
                },
                end: {
                    line: 35,
                    column: 49
                }
            },
            "8": {
                start: {
                    line: 36,
                    column: 4
                },
                end: {
                    line: 103,
                    column: 6
                }
            },
            "9": {
                start: {
                    line: 104,
                    column: 4
                },
                end: {
                    line: 104,
                    column: 35
                }
            },
            "10": {
                start: {
                    line: 107,
                    column: 4
                },
                end: {
                    line: 109,
                    column: 70
                }
            },
            "11": {
                start: {
                    line: 109,
                    column: 40
                },
                end: {
                    line: 109,
                    column: 68
                }
            },
            "12": {
                start: {
                    line: 111,
                    column: 4
                },
                end: {
                    line: 113,
                    column: 70
                }
            },
            "13": {
                start: {
                    line: 113,
                    column: 40
                },
                end: {
                    line: 113,
                    column: 68
                }
            },
            "14": {
                start: {
                    line: 115,
                    column: 4
                },
                end: {
                    line: 117,
                    column: 64
                }
            },
            "15": {
                start: {
                    line: 117,
                    column: 40
                },
                end: {
                    line: 117,
                    column: 62
                }
            },
            "16": {
                start: {
                    line: 126,
                    column: 23
                },
                end: {
                    line: 128,
                    column: 26
                }
            },
            "17": {
                start: {
                    line: 129,
                    column: 4
                },
                end: {
                    line: 129,
                    column: 46
                }
            },
            "18": {
                start: {
                    line: 130,
                    column: 4
                },
                end: {
                    line: 130,
                    column: 40
                }
            },
            "19": {
                start: {
                    line: 131,
                    column: 4
                },
                end: {
                    line: 131,
                    column: 70
                }
            },
            "20": {
                start: {
                    line: 131,
                    column: 47
                },
                end: {
                    line: 131,
                    column: 68
                }
            },
            "21": {
                start: {
                    line: 138,
                    column: 4
                },
                end: {
                    line: 138,
                    column: 44
                }
            },
            "22": {
                start: {
                    line: 139,
                    column: 21
                },
                end: {
                    line: 139,
                    column: 51
                }
            },
            "23": {
                start: {
                    line: 140,
                    column: 4
                },
                end: {
                    line: 143,
                    column: 5
                }
            },
            "24": {
                start: {
                    line: 141,
                    column: 6
                },
                end: {
                    line: 141,
                    column: 37
                }
            },
            "25": {
                start: {
                    line: 142,
                    column: 6
                },
                end: {
                    line: 142,
                    column: 44
                }
            },
            "26": {
                start: {
                    line: 150,
                    column: 4
                },
                end: {
                    line: 150,
                    column: 43
                }
            },
            "27": {
                start: {
                    line: 151,
                    column: 21
                },
                end: {
                    line: 151,
                    column: 51
                }
            },
            "28": {
                start: {
                    line: 152,
                    column: 4
                },
                end: {
                    line: 155,
                    column: 5
                }
            },
            "29": {
                start: {
                    line: 153,
                    column: 6
                },
                end: {
                    line: 153,
                    column: 40
                }
            },
            "30": {
                start: {
                    line: 154,
                    column: 6
                },
                end: {
                    line: 154,
                    column: 40
                }
            },
            "31": {
                start: {
                    line: 162,
                    column: 4
                },
                end: {
                    line: 162,
                    column: 27
                }
            },
            "32": {
                start: {
                    line: 165,
                    column: 4
                },
                end: {
                    line: 170,
                    column: 6
                }
            },
            "33": {
                start: {
                    line: 177,
                    column: 4
                },
                end: {
                    line: 177,
                    column: 27
                }
            },
            "34": {
                start: {
                    line: 179,
                    column: 4
                },
                end: {
                    line: 184,
                    column: 6
                }
            }
        },
        fnMap: {
            "0": {
                name: "(anonymous_0)",
                decl: {
                    start: {
                        line: 14,
                        column: 2
                    },
                    end: {
                        line: 14,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 14,
                        column: 16
                    },
                    end: {
                        line: 118,
                        column: 3
                    }
                },
                line: 14
            },
            "1": {
                name: "(anonymous_1)",
                decl: {
                    start: {
                        line: 109,
                        column: 34
                    },
                    end: {
                        line: 109,
                        column: 35
                    }
                },
                loc: {
                    start: {
                        line: 109,
                        column: 40
                    },
                    end: {
                        line: 109,
                        column: 68
                    }
                },
                line: 109
            },
            "2": {
                name: "(anonymous_2)",
                decl: {
                    start: {
                        line: 113,
                        column: 34
                    },
                    end: {
                        line: 113,
                        column: 35
                    }
                },
                loc: {
                    start: {
                        line: 113,
                        column: 40
                    },
                    end: {
                        line: 113,
                        column: 68
                    }
                },
                line: 113
            },
            "3": {
                name: "(anonymous_3)",
                decl: {
                    start: {
                        line: 117,
                        column: 34
                    },
                    end: {
                        line: 117,
                        column: 35
                    }
                },
                loc: {
                    start: {
                        line: 117,
                        column: 40
                    },
                    end: {
                        line: 117,
                        column: 62
                    }
                },
                line: 117
            },
            "4": {
                name: "(anonymous_4)",
                decl: {
                    start: {
                        line: 125,
                        column: 2
                    },
                    end: {
                        line: 125,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 125,
                        column: 28
                    },
                    end: {
                        line: 132,
                        column: 3
                    }
                },
                line: 125
            },
            "5": {
                name: "(anonymous_5)",
                decl: {
                    start: {
                        line: 131,
                        column: 41
                    },
                    end: {
                        line: 131,
                        column: 42
                    }
                },
                loc: {
                    start: {
                        line: 131,
                        column: 47
                    },
                    end: {
                        line: 131,
                        column: 68
                    }
                },
                line: 131
            },
            "6": {
                name: "(anonymous_6)",
                decl: {
                    start: {
                        line: 137,
                        column: 2
                    },
                    end: {
                        line: 137,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 137,
                        column: 33
                    },
                    end: {
                        line: 144,
                        column: 3
                    }
                },
                line: 137
            },
            "7": {
                name: "(anonymous_7)",
                decl: {
                    start: {
                        line: 149,
                        column: 2
                    },
                    end: {
                        line: 149,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 149,
                        column: 34
                    },
                    end: {
                        line: 156,
                        column: 3
                    }
                },
                line: 149
            },
            "8": {
                name: "(anonymous_8)",
                decl: {
                    start: {
                        line: 161,
                        column: 2
                    },
                    end: {
                        line: 161,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 161,
                        column: 40
                    },
                    end: {
                        line: 171,
                        column: 3
                    }
                },
                line: 161
            },
            "9": {
                name: "(anonymous_9)",
                decl: {
                    start: {
                        line: 176,
                        column: 2
                    },
                    end: {
                        line: 176,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 176,
                        column: 40
                    },
                    end: {
                        line: 185,
                        column: 3
                    }
                },
                line: 176
            }
        },
        branchMap: {
            "0": {
                loc: {
                    start: {
                        line: 140,
                        column: 4
                    },
                    end: {
                        line: 143,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 140,
                            column: 4
                        },
                        end: {
                            line: 143,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 140
            },
            "1": {
                loc: {
                    start: {
                        line: 152,
                        column: 4
                    },
                    end: {
                        line: 155,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 152,
                            column: 4
                        },
                        end: {
                            line: 155,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 152
            }
        },
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0,
            "18": 0,
            "19": 0,
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "31": 0,
            "32": 0,
            "33": 0,
            "34": 0
        },
        f: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0
        },
        b: {
            "0": [
                0,
                0
            ],
            "1": [
                0,
                0
            ]
        },
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "1d1038e8e41ba33b1297976ccd27883f1d9d972a"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_1rfuy36ofn = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_1rfuy36ofn();
class EditWorkspaceButton extends HTMLElement {
    shadow;
    editDialog;
    /**
   * Initializes the `EditWorkspaceButton` component.
   * Sets up the shadow DOM and creates the edit dialog container.
   */ constructor(){
        cov_1rfuy36ofn().f[0]++;
        cov_1rfuy36ofn().s[0]++;
        super();
        cov_1rfuy36ofn().s[1]++;
        this.shadow = this.attachShadow({
            mode: "open"
        });
        // Create the edit dialog container
        cov_1rfuy36ofn().s[2]++;
        this.editDialog = document.createElement("section");
        cov_1rfuy36ofn().s[3]++;
        this.editDialog.classList.add("edit-dialog");
        cov_1rfuy36ofn().s[4]++;
        this.editDialog.innerHTML = `
      <section class="dialog-content">
        <h3>Edit Workspace</h3>
        <button class="create-workspace">Create Workspace</button>
        <button class="delete-workspace">Delete Workspace</button>
        <button class="close-dialog">Close</button>
      </section>
    `;
        cov_1rfuy36ofn().s[5]++;
        this.editDialog.style.display = "none"; // Hidden by default
        // Append elements to the shadow DOM
        cov_1rfuy36ofn().s[6]++;
        this.shadow.append(this.editDialog);
        // Add styles
        const style = (cov_1rfuy36ofn().s[7]++, document.createElement("style"));
        cov_1rfuy36ofn().s[8]++;
        style.textContent = `
      .editbtn {
        background-color: #e5c3d1;
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
        position: fixed;
        top: 10px;
        right: 200px; /* Adjusted to position next to "Workspace" button */
        margin-right: 5px;
      }

      .edit-dialog {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #ffffff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        z-index: 2000;
        width: 300px;
        display: none; /* Hidden by default */
      }

      .dialog-content {
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      .dialog-content h3 {
        margin-bottom: 15px;
      }

      .dialog-content button {
        background-color: #e5c3d1;
        color: white;
        border: none;
        padding: 10px 20px;
        margin: 10px 0;
        cursor: pointer;
        border-radius: 5px;
        width: 80%;
        font-size: 14px;
      }

      .dialog-content button:hover {
        background-color: #d4a8bb;
      }

      .close-dialog {
        background-color: #ccc;
        color: #333;
      }

      .close-dialog:hover {
        background-color: #bbb;
      }
      .blur {
        filter: blur(8px);
        -webkit-filter: blur(8px);
        
      }
    `;
        cov_1rfuy36ofn().s[9]++;
        this.shadow.appendChild(style);
        // Bind event listeners for dialog buttons
        cov_1rfuy36ofn().s[10]++;
        this.shadow.querySelector(".create-workspace")?.addEventListener("click", ()=>{
            cov_1rfuy36ofn().f[1]++;
            cov_1rfuy36ofn().s[11]++;
            return this.handleCreateWorkspace();
        });
        cov_1rfuy36ofn().s[12]++;
        this.shadow.querySelector(".delete-workspace")?.addEventListener("click", ()=>{
            cov_1rfuy36ofn().f[2]++;
            cov_1rfuy36ofn().s[13]++;
            return this.handleDeleteWorkspace();
        });
        cov_1rfuy36ofn().s[14]++;
        this.shadow.querySelector(".close-dialog")?.addEventListener("click", ()=>{
            cov_1rfuy36ofn().f[3]++;
            cov_1rfuy36ofn().s[15]++;
            return this.closeEditDialog();
        });
    }
    /**
   * Called when the `EditWorkspaceButton` element is added to the DOM.
   * Sets up the edit button by adding text, a CSS class, and an event listener
   * to open the edit dialog when clicked.
   */ connectedCallback() {
        cov_1rfuy36ofn().f[4]++;
        const editButton = (cov_1rfuy36ofn().s[16]++, document.getElementById("edit-workspace-button"));
        cov_1rfuy36ofn().s[17]++;
        editButton.textContent = "Edit Workspace";
        cov_1rfuy36ofn().s[18]++;
        editButton.classList.add("editbtn");
        cov_1rfuy36ofn().s[19]++;
        editButton.addEventListener("click", ()=>{
            cov_1rfuy36ofn().f[5]++;
            cov_1rfuy36ofn().s[20]++;
            return this.openEditDialog();
        });
    }
    /**
   * Opens the Edit Workspace dialog.
   */ openEditDialog() {
        cov_1rfuy36ofn().f[6]++;
        cov_1rfuy36ofn().s[21]++;
        this.editDialog.style.display = "block";
        const backPage = (cov_1rfuy36ofn().s[22]++, document.getElementById("app"));
        cov_1rfuy36ofn().s[23]++;
        if (backPage) {
            cov_1rfuy36ofn().b[0][0]++;
            cov_1rfuy36ofn().s[24]++;
            backPage.classList.add("blur");
            cov_1rfuy36ofn().s[25]++;
            backPage.style.pointerEvents = "none"; // Disable interaction
        } else cov_1rfuy36ofn().b[0][1]++;
    }
    /**
   * Closes the Edit Workspace dialog.
   */ closeEditDialog() {
        cov_1rfuy36ofn().f[7]++;
        cov_1rfuy36ofn().s[26]++;
        this.editDialog.style.display = "none";
        const backPage = (cov_1rfuy36ofn().s[27]++, document.getElementById("app"));
        cov_1rfuy36ofn().s[28]++;
        if (backPage) {
            cov_1rfuy36ofn().b[1][0]++;
            cov_1rfuy36ofn().s[29]++;
            backPage.classList.remove("blur");
            cov_1rfuy36ofn().s[30]++;
            backPage.style.pointerEvents = ""; // Restore interaction
        } else cov_1rfuy36ofn().b[1][1]++;
    }
    /**
   * Handles the Create Workspace button click.
   */ handleCreateWorkspace() {
        cov_1rfuy36ofn().f[8]++;
        cov_1rfuy36ofn().s[31]++;
        this.closeEditDialog();
        // Dispatch a custom event to notify parent components or other parts of the app
        cov_1rfuy36ofn().s[32]++;
        this.dispatchEvent(new CustomEvent("create-workspace", {
            bubbles: true,
            composed: true
        }));
    }
    /**
   * Handles the Delete Workspace button click.
   */ handleDeleteWorkspace() {
        cov_1rfuy36ofn().f[9]++;
        cov_1rfuy36ofn().s[33]++;
        this.closeEditDialog();
        // Dispatch a custom event to notify parent components or other parts of the app
        cov_1rfuy36ofn().s[34]++;
        this.dispatchEvent(new CustomEvent("delete-workspace", {
            bubbles: true,
            composed: true
        }));
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lkYA9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A custom web component for displaying a dialog to confirm the deletion of a workspace.
 * Extends `HTMLElement` and encapsulates the dialog's structure and behavior within the shadow DOM.
 */ parcelHelpers.export(exports, "DeleteWorkspaceDialog", ()=>DeleteWorkspaceDialog);
// src/components/DeleteWorkspaceDialog.ts
var _slog = require("../slog");
function cov_1hbjk6ke5y() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/view/DeleteWorkspaceDialog.ts";
    var hash = "16d9d01c1b78495d9adab343e590e4440ab3a44b";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/view/DeleteWorkspaceDialog.ts",
        statementMap: {
            "0": {
                start: {
                    line: 19,
                    column: 4
                },
                end: {
                    line: 19,
                    column: 12
                }
            },
            "1": {
                start: {
                    line: 20,
                    column: 4
                },
                end: {
                    line: 20,
                    column: 54
                }
            },
            "2": {
                start: {
                    line: 23,
                    column: 4
                },
                end: {
                    line: 23,
                    column: 57
                }
            },
            "3": {
                start: {
                    line: 24,
                    column: 4
                },
                end: {
                    line: 24,
                    column: 56
                }
            },
            "4": {
                start: {
                    line: 25,
                    column: 4
                },
                end: {
                    line: 32,
                    column: 6
                }
            },
            "5": {
                start: {
                    line: 33,
                    column: 4
                },
                end: {
                    line: 33,
                    column: 48
                }
            },
            "6": {
                start: {
                    line: 36,
                    column: 4
                },
                end: {
                    line: 36,
                    column: 50
                }
            },
            "7": {
                start: {
                    line: 39,
                    column: 18
                },
                end: {
                    line: 39,
                    column: 49
                }
            },
            "8": {
                start: {
                    line: 40,
                    column: 4
                },
                end: {
                    line: 107,
                    column: 6
                }
            },
            "9": {
                start: {
                    line: 108,
                    column: 4
                },
                end: {
                    line: 108,
                    column: 35
                }
            },
            "10": {
                start: {
                    line: 111,
                    column: 4
                },
                end: {
                    line: 113,
                    column: 62
                }
            },
            "11": {
                start: {
                    line: 113,
                    column: 40
                },
                end: {
                    line: 113,
                    column: 60
                }
            },
            "12": {
                start: {
                    line: 115,
                    column: 4
                },
                end: {
                    line: 117,
                    column: 60
                }
            },
            "13": {
                start: {
                    line: 117,
                    column: 40
                },
                end: {
                    line: 117,
                    column: 58
                }
            },
            "14": {
                start: {
                    line: 120,
                    column: 4
                },
                end: {
                    line: 122,
                    column: 6
                }
            },
            "15": {
                start: {
                    line: 121,
                    column: 6
                },
                end: {
                    line: 121,
                    column: 23
                }
            },
            "16": {
                start: {
                    line: 129,
                    column: 4
                },
                end: {
                    line: 129,
                    column: 49
                }
            },
            "17": {
                start: {
                    line: 130,
                    column: 21
                },
                end: {
                    line: 130,
                    column: 51
                }
            },
            "18": {
                start: {
                    line: 131,
                    column: 4
                },
                end: {
                    line: 134,
                    column: 5
                }
            },
            "19": {
                start: {
                    line: 132,
                    column: 6
                },
                end: {
                    line: 132,
                    column: 37
                }
            },
            "20": {
                start: {
                    line: 133,
                    column: 6
                },
                end: {
                    line: 133,
                    column: 44
                }
            },
            "21": {
                start: {
                    line: 141,
                    column: 4
                },
                end: {
                    line: 141,
                    column: 48
                }
            },
            "22": {
                start: {
                    line: 142,
                    column: 21
                },
                end: {
                    line: 142,
                    column: 51
                }
            },
            "23": {
                start: {
                    line: 143,
                    column: 4
                },
                end: {
                    line: 146,
                    column: 5
                }
            },
            "24": {
                start: {
                    line: 144,
                    column: 6
                },
                end: {
                    line: 144,
                    column: 40
                }
            },
            "25": {
                start: {
                    line: 145,
                    column: 6
                },
                end: {
                    line: 145,
                    column: 40
                }
            },
            "26": {
                start: {
                    line: 153,
                    column: 18
                },
                end: {
                    line: 155,
                    column: 25
                }
            },
            "27": {
                start: {
                    line: 156,
                    column: 26
                },
                end: {
                    line: 156,
                    column: 44
                }
            },
            "28": {
                start: {
                    line: 157,
                    column: 4
                },
                end: {
                    line: 174,
                    column: 5
                }
            },
            "29": {
                start: {
                    line: 158,
                    column: 6
                },
                end: {
                    line: 161,
                    column: 9
                }
            },
            "30": {
                start: {
                    line: 163,
                    column: 6
                },
                end: {
                    line: 169,
                    column: 8
                }
            },
            "31": {
                start: {
                    line: 170,
                    column: 6
                },
                end: {
                    line: 170,
                    column: 23
                }
            },
            "32": {
                start: {
                    line: 171,
                    column: 6
                },
                end: {
                    line: 171,
                    column: 25
                }
            },
            "33": {
                start: {
                    line: 173,
                    column: 6
                },
                end: {
                    line: 173,
                    column: 48
                }
            }
        },
        fnMap: {
            "0": {
                name: "(anonymous_0)",
                decl: {
                    start: {
                        line: 18,
                        column: 2
                    },
                    end: {
                        line: 18,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 18,
                        column: 16
                    },
                    end: {
                        line: 123,
                        column: 3
                    }
                },
                line: 18
            },
            "1": {
                name: "(anonymous_1)",
                decl: {
                    start: {
                        line: 113,
                        column: 34
                    },
                    end: {
                        line: 113,
                        column: 35
                    }
                },
                loc: {
                    start: {
                        line: 113,
                        column: 40
                    },
                    end: {
                        line: 113,
                        column: 60
                    }
                },
                line: 113
            },
            "2": {
                name: "(anonymous_2)",
                decl: {
                    start: {
                        line: 117,
                        column: 34
                    },
                    end: {
                        line: 117,
                        column: 35
                    }
                },
                loc: {
                    start: {
                        line: 117,
                        column: 40
                    },
                    end: {
                        line: 117,
                        column: 58
                    }
                },
                line: 117
            },
            "3": {
                name: "(anonymous_3)",
                decl: {
                    start: {
                        line: 120,
                        column: 50
                    },
                    end: {
                        line: 120,
                        column: 51
                    }
                },
                loc: {
                    start: {
                        line: 121,
                        column: 6
                    },
                    end: {
                        line: 121,
                        column: 23
                    }
                },
                line: 121
            },
            "4": {
                name: "(anonymous_4)",
                decl: {
                    start: {
                        line: 128,
                        column: 2
                    },
                    end: {
                        line: 128,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 128,
                        column: 28
                    },
                    end: {
                        line: 135,
                        column: 3
                    }
                },
                line: 128
            },
            "5": {
                name: "(anonymous_5)",
                decl: {
                    start: {
                        line: 140,
                        column: 2
                    },
                    end: {
                        line: 140,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 140,
                        column: 29
                    },
                    end: {
                        line: 147,
                        column: 3
                    }
                },
                line: 140
            },
            "6": {
                name: "(anonymous_6)",
                decl: {
                    start: {
                        line: 152,
                        column: 2
                    },
                    end: {
                        line: 152,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 152,
                        column: 32
                    },
                    end: {
                        line: 175,
                        column: 3
                    }
                },
                line: 152
            }
        },
        branchMap: {
            "0": {
                loc: {
                    start: {
                        line: 131,
                        column: 4
                    },
                    end: {
                        line: 134,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 131,
                            column: 4
                        },
                        end: {
                            line: 134,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 131
            },
            "1": {
                loc: {
                    start: {
                        line: 143,
                        column: 4
                    },
                    end: {
                        line: 146,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 143,
                            column: 4
                        },
                        end: {
                            line: 146,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 143
            },
            "2": {
                loc: {
                    start: {
                        line: 157,
                        column: 4
                    },
                    end: {
                        line: 174,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 157,
                            column: 4
                        },
                        end: {
                            line: 174,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: 172,
                            column: 11
                        },
                        end: {
                            line: 174,
                            column: 5
                        }
                    }
                ],
                line: 157
            }
        },
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0,
            "18": 0,
            "19": 0,
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "31": 0,
            "32": 0,
            "33": 0
        },
        f: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0
        },
        b: {
            "0": [
                0,
                0
            ],
            "1": [
                0,
                0
            ],
            "2": [
                0,
                0
            ]
        },
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "16d9d01c1b78495d9adab343e590e4440ab3a44b"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_1hbjk6ke5y = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_1hbjk6ke5y();
class DeleteWorkspaceDialog extends HTMLElement {
    shadow;
    dialogContainer;
    // private workspaceName: string = "";
    /**
   * Initializes the DeleteWorkspaceDialog component.
   * Attaches a shadow DOM and creates the dialog container element.
   */ constructor(){
        cov_1hbjk6ke5y().f[0]++;
        cov_1hbjk6ke5y().s[0]++;
        super();
        cov_1hbjk6ke5y().s[1]++;
        this.shadow = this.attachShadow({
            mode: "open"
        });
        // Create the dialog container
        cov_1hbjk6ke5y().s[2]++;
        this.dialogContainer = document.createElement("div");
        cov_1hbjk6ke5y().s[3]++;
        this.dialogContainer.classList.add("delete-dialog");
        cov_1hbjk6ke5y().s[4]++;
        this.dialogContainer.innerHTML = `
      <div class="delete-dialog-content">
        <h3>Delete Workspace</h3>
        <input type="text" placeholder="Enter workspace name" class="workspace-input" />
        <button class="confirm-delete-workspace">Delete</button>
        <button class="cancel-delete-workspace">Cancel</button>
      </div>
    `;
        cov_1hbjk6ke5y().s[5]++;
        this.dialogContainer.style.display = "none"; // Hidden by default
        // Append the dialog to the shadow DOM
        cov_1hbjk6ke5y().s[6]++;
        this.shadow.appendChild(this.dialogContainer);
        // Add styles
        const style = (cov_1hbjk6ke5y().s[7]++, document.createElement("style"));
        cov_1hbjk6ke5y().s[8]++;
        style.textContent = `
      .delete-dialog {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #ffffff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        z-index: 3000;
        width: 300px;
        display: none; /* Hidden by default */
      }

      .delete-dialog-content {
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      .delete-dialog-content h3 {
        margin-bottom: 15px;
      }

      .workspace-input {
        padding: 10px;
        margin: 10px 0;
        width: 80%;
        border: 1px solid #ccc;
        border-radius: 5px;
      }

      .delete-dialog-content p {
        margin-bottom: 20px;
        text-align: center;
      }

      .delete-dialog-content button {
        background-color: #e5c3d1;
        color: white;
        border: none;
        padding: 10px 20px;
        margin: 5px 0;
        cursor: pointer;
        border-radius: 5px;
        width: 80%;
        font-size: 14px;
      }

      .delete-dialog-content button:hover {
        background-color: #d4a8bb;
      }

      .cancel-delete {
        background-color: #ccc;
        color: #333;
      }

      .cancel-delete:hover {
        background-color: #bbb;
      }
      .blur {
        filter: blur(8px);
        -webkit-filter: blur(8px);
        
      }
    `;
        cov_1hbjk6ke5y().s[9]++;
        this.shadow.appendChild(style);
        // Bind event listeners
        cov_1hbjk6ke5y().s[10]++;
        this.shadow.querySelector(".confirm-delete-workspace")?.addEventListener("click", ()=>{
            cov_1hbjk6ke5y().f[1]++;
            cov_1hbjk6ke5y().s[11]++;
            return this.confirmDelete();
        });
        cov_1hbjk6ke5y().s[12]++;
        this.shadow.querySelector(".cancel-delete-workspace")?.addEventListener("click", ()=>{
            cov_1hbjk6ke5y().f[2]++;
            cov_1hbjk6ke5y().s[13]++;
            return this.closeDialog();
        });
        // Listen to "delete-workspace" event with detail
        cov_1hbjk6ke5y().s[14]++;
        document.addEventListener("delete-workspace", (event)=>{
            cov_1hbjk6ke5y().f[3]++;
            cov_1hbjk6ke5y().s[15]++;
            return this.openDialog();
        });
    }
    /**
   * Opens the Delete Workspace dialog.
   */ openDialog() {
        cov_1hbjk6ke5y().f[4]++;
        cov_1hbjk6ke5y().s[16]++;
        this.dialogContainer.style.display = "block";
        const backPage = (cov_1hbjk6ke5y().s[17]++, document.getElementById("app"));
        cov_1hbjk6ke5y().s[18]++;
        if (backPage) {
            cov_1hbjk6ke5y().b[0][0]++;
            cov_1hbjk6ke5y().s[19]++;
            backPage.classList.add("blur");
            cov_1hbjk6ke5y().s[20]++;
            backPage.style.pointerEvents = "none";
        } else cov_1hbjk6ke5y().b[0][1]++;
    }
    /**
   * Closes the Delete Workspace dialog.
   */ closeDialog() {
        cov_1hbjk6ke5y().f[5]++;
        cov_1hbjk6ke5y().s[21]++;
        this.dialogContainer.style.display = "none";
        const backPage = (cov_1hbjk6ke5y().s[22]++, document.getElementById("app"));
        cov_1hbjk6ke5y().s[23]++;
        if (backPage) {
            cov_1hbjk6ke5y().b[1][0]++;
            cov_1hbjk6ke5y().s[24]++;
            backPage.classList.remove("blur");
            cov_1hbjk6ke5y().s[25]++;
            backPage.style.pointerEvents = "";
        } else cov_1hbjk6ke5y().b[1][1]++;
    }
    /**
   * Handles the Delete button click.
   */ confirmDelete() {
        cov_1hbjk6ke5y().f[6]++;
        const input = (cov_1hbjk6ke5y().s[26]++, this.shadow.querySelector(".workspace-input"));
        const workspaceName = (cov_1hbjk6ke5y().s[27]++, input.value.trim());
        cov_1hbjk6ke5y().s[28]++;
        if (workspaceName) {
            cov_1hbjk6ke5y().b[2][0]++;
            cov_1hbjk6ke5y().s[29]++;
            (0, _slog.slog).info("Confirming workspace deletion:", [
                "workspaceName",
                workspaceName
            ]);
            // Dispatch a custom event to notify parent components or other parts of the app
            cov_1hbjk6ke5y().s[30]++;
            this.dispatchEvent(new CustomEvent("workspace-deleted", {
                detail: {
                    workspaceName: workspaceName
                },
                bubbles: true,
                composed: true
            }));
            cov_1hbjk6ke5y().s[31]++;
            input.value = ""; // Clear the input field
            cov_1hbjk6ke5y().s[32]++;
            this.closeDialog();
        } else {
            cov_1hbjk6ke5y().b[2][1]++;
            cov_1hbjk6ke5y().s[33]++;
            (0, _slog.slog).error("Workspace name is required.");
        }
    }
}

},{"../slog":"jExiC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cU8E5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A custom web component representing a button to edit a channel.
 * Extends the `HTMLElement` class and provides functionality to open a dialog
 * for managing channels when the button is clicked.
 */ parcelHelpers.export(exports, "EditChannelButton", ()=>EditChannelButton);
function cov_25xlsfuzn() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/view/EditChannelButton.ts";
    var hash = "f6089b0afc6dd003d039c7e9e1efd7a2eff8d2eb";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/view/EditChannelButton.ts",
        statementMap: {
            "0": {
                start: {
                    line: 17,
                    column: 4
                },
                end: {
                    line: 17,
                    column: 12
                }
            },
            "1": {
                start: {
                    line: 18,
                    column: 4
                },
                end: {
                    line: 18,
                    column: 54
                }
            },
            "2": {
                start: {
                    line: 21,
                    column: 23
                },
                end: {
                    line: 23,
                    column: 26
                }
            },
            "3": {
                start: {
                    line: 24,
                    column: 4
                },
                end: {
                    line: 24,
                    column: 47
                }
            },
            "4": {
                start: {
                    line: 26,
                    column: 4
                },
                end: {
                    line: 26,
                    column: 73
                }
            },
            "5": {
                start: {
                    line: 26,
                    column: 47
                },
                end: {
                    line: 26,
                    column: 71
                }
            },
            "6": {
                start: {
                    line: 29,
                    column: 4
                },
                end: {
                    line: 29,
                    column: 59
                }
            },
            "7": {
                start: {
                    line: 30,
                    column: 4
                },
                end: {
                    line: 30,
                    column: 55
                }
            },
            "8": {
                start: {
                    line: 31,
                    column: 4
                },
                end: {
                    line: 38,
                    column: 8
                }
            },
            "9": {
                start: {
                    line: 39,
                    column: 4
                },
                end: {
                    line: 39,
                    column: 46
                }
            },
            "10": {
                start: {
                    line: 42,
                    column: 4
                },
                end: {
                    line: 42,
                    column: 43
                }
            },
            "11": {
                start: {
                    line: 46,
                    column: 18
                },
                end: {
                    line: 46,
                    column: 49
                }
            },
            "12": {
                start: {
                    line: 47,
                    column: 4
                },
                end: {
                    line: 123,
                    column: 8
                }
            },
            "13": {
                start: {
                    line: 124,
                    column: 4
                },
                end: {
                    line: 124,
                    column: 35
                }
            },
            "14": {
                start: {
                    line: 127,
                    column: 4
                },
                end: {
                    line: 129,
                    column: 68
                }
            },
            "15": {
                start: {
                    line: 129,
                    column: 40
                },
                end: {
                    line: 129,
                    column: 66
                }
            },
            "16": {
                start: {
                    line: 131,
                    column: 4
                },
                end: {
                    line: 133,
                    column: 68
                }
            },
            "17": {
                start: {
                    line: 133,
                    column: 40
                },
                end: {
                    line: 133,
                    column: 66
                }
            },
            "18": {
                start: {
                    line: 135,
                    column: 4
                },
                end: {
                    line: 137,
                    column: 67
                }
            },
            "19": {
                start: {
                    line: 137,
                    column: 40
                },
                end: {
                    line: 137,
                    column: 65
                }
            },
            "20": {
                start: {
                    line: 153,
                    column: 4
                },
                end: {
                    line: 153,
                    column: 47
                }
            },
            "21": {
                start: {
                    line: 154,
                    column: 21
                },
                end: {
                    line: 154,
                    column: 51
                }
            },
            "22": {
                start: {
                    line: 155,
                    column: 4
                },
                end: {
                    line: 158,
                    column: 5
                }
            },
            "23": {
                start: {
                    line: 156,
                    column: 6
                },
                end: {
                    line: 156,
                    column: 37
                }
            },
            "24": {
                start: {
                    line: 157,
                    column: 6
                },
                end: {
                    line: 157,
                    column: 44
                }
            },
            "25": {
                start: {
                    line: 165,
                    column: 4
                },
                end: {
                    line: 165,
                    column: 46
                }
            },
            "26": {
                start: {
                    line: 166,
                    column: 21
                },
                end: {
                    line: 166,
                    column: 51
                }
            },
            "27": {
                start: {
                    line: 167,
                    column: 4
                },
                end: {
                    line: 170,
                    column: 5
                }
            },
            "28": {
                start: {
                    line: 168,
                    column: 6
                },
                end: {
                    line: 168,
                    column: 40
                }
            },
            "29": {
                start: {
                    line: 169,
                    column: 6
                },
                end: {
                    line: 169,
                    column: 40
                }
            },
            "30": {
                start: {
                    line: 177,
                    column: 4
                },
                end: {
                    line: 177,
                    column: 30
                }
            },
            "31": {
                start: {
                    line: 180,
                    column: 4
                },
                end: {
                    line: 185,
                    column: 6
                }
            },
            "32": {
                start: {
                    line: 192,
                    column: 4
                },
                end: {
                    line: 192,
                    column: 30
                }
            },
            "33": {
                start: {
                    line: 195,
                    column: 4
                },
                end: {
                    line: 200,
                    column: 6
                }
            }
        },
        fnMap: {
            "0": {
                name: "(anonymous_0)",
                decl: {
                    start: {
                        line: 16,
                        column: 2
                    },
                    end: {
                        line: 16,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 16,
                        column: 16
                    },
                    end: {
                        line: 138,
                        column: 3
                    }
                },
                line: 16
            },
            "1": {
                name: "(anonymous_1)",
                decl: {
                    start: {
                        line: 26,
                        column: 41
                    },
                    end: {
                        line: 26,
                        column: 42
                    }
                },
                loc: {
                    start: {
                        line: 26,
                        column: 47
                    },
                    end: {
                        line: 26,
                        column: 71
                    }
                },
                line: 26
            },
            "2": {
                name: "(anonymous_2)",
                decl: {
                    start: {
                        line: 129,
                        column: 34
                    },
                    end: {
                        line: 129,
                        column: 35
                    }
                },
                loc: {
                    start: {
                        line: 129,
                        column: 40
                    },
                    end: {
                        line: 129,
                        column: 66
                    }
                },
                line: 129
            },
            "3": {
                name: "(anonymous_3)",
                decl: {
                    start: {
                        line: 133,
                        column: 34
                    },
                    end: {
                        line: 133,
                        column: 35
                    }
                },
                loc: {
                    start: {
                        line: 133,
                        column: 40
                    },
                    end: {
                        line: 133,
                        column: 66
                    }
                },
                line: 133
            },
            "4": {
                name: "(anonymous_4)",
                decl: {
                    start: {
                        line: 137,
                        column: 34
                    },
                    end: {
                        line: 137,
                        column: 35
                    }
                },
                loc: {
                    start: {
                        line: 137,
                        column: 40
                    },
                    end: {
                        line: 137,
                        column: 65
                    }
                },
                line: 137
            },
            "5": {
                name: "(anonymous_5)",
                decl: {
                    start: {
                        line: 152,
                        column: 2
                    },
                    end: {
                        line: 152,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 152,
                        column: 36
                    },
                    end: {
                        line: 159,
                        column: 3
                    }
                },
                line: 152
            },
            "6": {
                name: "(anonymous_6)",
                decl: {
                    start: {
                        line: 164,
                        column: 2
                    },
                    end: {
                        line: 164,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 164,
                        column: 37
                    },
                    end: {
                        line: 171,
                        column: 3
                    }
                },
                line: 164
            },
            "7": {
                name: "(anonymous_7)",
                decl: {
                    start: {
                        line: 176,
                        column: 2
                    },
                    end: {
                        line: 176,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 176,
                        column: 38
                    },
                    end: {
                        line: 186,
                        column: 3
                    }
                },
                line: 176
            },
            "8": {
                name: "(anonymous_8)",
                decl: {
                    start: {
                        line: 191,
                        column: 2
                    },
                    end: {
                        line: 191,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 191,
                        column: 38
                    },
                    end: {
                        line: 201,
                        column: 3
                    }
                },
                line: 191
            }
        },
        branchMap: {
            "0": {
                loc: {
                    start: {
                        line: 155,
                        column: 4
                    },
                    end: {
                        line: 158,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 155,
                            column: 4
                        },
                        end: {
                            line: 158,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 155
            },
            "1": {
                loc: {
                    start: {
                        line: 167,
                        column: 4
                    },
                    end: {
                        line: 170,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 167,
                            column: 4
                        },
                        end: {
                            line: 170,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 167
            }
        },
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0,
            "18": 0,
            "19": 0,
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "31": 0,
            "32": 0,
            "33": 0
        },
        f: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0
        },
        b: {
            "0": [
                0,
                0
            ],
            "1": [
                0,
                0
            ]
        },
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "f6089b0afc6dd003d039c7e9e1efd7a2eff8d2eb"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_25xlsfuzn = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_25xlsfuzn();
class EditChannelButton extends HTMLElement {
    shadow;
    channelDialog;
    // private editButton: HTMLElement | null;
    /**
   * Initializes the EditChannelButton component.
   * Sets up the shadow DOM for the component and attaches event listeners.
   * Creates an "Edit Channel" button that, when clicked, opens the channel dialog for managing channels.
   */ constructor(){
        cov_25xlsfuzn().f[0]++;
        cov_25xlsfuzn().s[0]++;
        super();
        cov_25xlsfuzn().s[1]++;
        this.shadow = this.attachShadow({
            mode: "open"
        });
        // Create edit channel button
        const editButton = (cov_25xlsfuzn().s[2]++, document.getElementById("edit-channel-button"));
        cov_25xlsfuzn().s[3]++;
        editButton.textContent = "Manage Channels";
        // editButton.classList.add("editbtn");
        cov_25xlsfuzn().s[4]++;
        editButton.addEventListener("click", ()=>{
            cov_25xlsfuzn().f[1]++;
            cov_25xlsfuzn().s[5]++;
            return this.openChannelDialog();
        });
        // Create the channel dialog container
        cov_25xlsfuzn().s[6]++;
        this.channelDialog = document.createElement("section");
        cov_25xlsfuzn().s[7]++;
        this.channelDialog.classList.add("channel-dialog");
        cov_25xlsfuzn().s[8]++;
        this.channelDialog.innerHTML = `
        <section class="dialog-content">
          <h3>Manage Channels</h3>
          <button class="create-channel">Create Channel</button>
          <button class="delete-channel">Delete Channel</button>
          <button class="close-dialog">Close</button>
        </section>
      `;
        cov_25xlsfuzn().s[9]++;
        this.channelDialog.style.display = "none"; // Hidden by default
        // Append elements to the shadow DOM
        cov_25xlsfuzn().s[10]++;
        this.shadow.append(this.channelDialog);
        // Append elements to the shadow DOM
        // Add styles
        const style = (cov_25xlsfuzn().s[11]++, document.createElement("style"));
        cov_25xlsfuzn().s[12]++;
        style.textContent = `
        .editbtn {
          background-color: #e5c3d1;
          color: white;
          border: none;
          padding: 10px;
          border-radius: 5px;
          cursor: pointer;
          top-margin: 400px;
        }

        .create-channel-btn {
          background-color: #e5c3d1;
          color: white;
          border: none;
          padding: 10px;
          border-radius: 5px;
          cursor: pointer;
          width: 100%;

        }
  
        .channel-dialog {
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          background-color: #ffffff;
          padding: 20px;
          border-radius: 10px;
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
          z-index: 2000;
          width: 300px;
          display: none; /* Hidden by default */
        }
  
        .dialog-content {
          display: flex;
          flex-direction: column;
          align-items: center;
        }
  
        .dialog-content h3 {
          color: black;
          margin-bottom: 15px;
        }
  
        .dialog-content button {
          background-color: #e5c3d1;
          color: white;
          border: none;
          padding: 10px 20px;
          margin: 10px 0;
          cursor: pointer;
          border-radius: 5px;
          width: 80%;
          font-size: 14px;
        }
  
        .dialog-content button:hover {
          background-color: #d4a8bb;
        }
  
        .close-dialog {
          background-color: #ccc;
          color: #333;
        }
  
        .close-dialog:hover {
          background-color: #bbb;
        }
          
        .blur {
          filter: blur(8px);
          -webkit-filter: blur(8px);
        }
      `;
        cov_25xlsfuzn().s[13]++;
        this.shadow.appendChild(style);
        // Bind event listeners for dialog buttons
        cov_25xlsfuzn().s[14]++;
        this.shadow.querySelector(".create-channel")?.addEventListener("click", ()=>{
            cov_25xlsfuzn().f[2]++;
            cov_25xlsfuzn().s[15]++;
            return this.handleCreateChannel();
        });
        cov_25xlsfuzn().s[16]++;
        this.shadow.querySelector(".delete-channel")?.addEventListener("click", ()=>{
            cov_25xlsfuzn().f[3]++;
            cov_25xlsfuzn().s[17]++;
            return this.handleDeleteChannel();
        });
        cov_25xlsfuzn().s[18]++;
        this.shadow.querySelector(".close-dialog")?.addEventListener("click", ()=>{
            cov_25xlsfuzn().f[4]++;
            cov_25xlsfuzn().s[19]++;
            return this.closeChannelDialog();
        });
    }
    // connectedCallback(): void {
    //   const editButton = document.getElementById(
    //     "edit-channel-button",
    //   ) as HTMLButtonElement;
    //   editButton.textContent = "Manage Channels";
    //   editButton.classList.add("editbtn");
    //   editButton.addEventListener("click", () => this.openChannelDialog());
    // }
    /**
   * Opens the Channel Management dialog.ff
   */ openChannelDialog() {
        cov_25xlsfuzn().f[5]++;
        cov_25xlsfuzn().s[20]++;
        this.channelDialog.style.display = "block";
        const backPage = (cov_25xlsfuzn().s[21]++, document.getElementById("app"));
        cov_25xlsfuzn().s[22]++;
        if (backPage) {
            cov_25xlsfuzn().b[0][0]++;
            cov_25xlsfuzn().s[23]++;
            backPage.classList.add("blur");
            cov_25xlsfuzn().s[24]++;
            backPage.style.pointerEvents = "none"; // Disable interaction
        } else cov_25xlsfuzn().b[0][1]++;
    }
    /**
   * Closes the Channel Management dialog.
   */ closeChannelDialog() {
        cov_25xlsfuzn().f[6]++;
        cov_25xlsfuzn().s[25]++;
        this.channelDialog.style.display = "none";
        const backPage = (cov_25xlsfuzn().s[26]++, document.getElementById("app"));
        cov_25xlsfuzn().s[27]++;
        if (backPage) {
            cov_25xlsfuzn().b[1][0]++;
            cov_25xlsfuzn().s[28]++;
            backPage.classList.remove("blur");
            cov_25xlsfuzn().s[29]++;
            backPage.style.pointerEvents = ""; // Restore interaction
        } else cov_25xlsfuzn().b[1][1]++;
    }
    /**
   * Handles the Create Channel button click.
   */ handleCreateChannel() {
        cov_25xlsfuzn().f[7]++;
        cov_25xlsfuzn().s[30]++;
        this.closeChannelDialog();
        // Dispatch a custom event to notify other components
        cov_25xlsfuzn().s[31]++;
        this.dispatchEvent(new CustomEvent("create-channel", {
            bubbles: true,
            composed: true
        }));
    }
    /**
   * Handles the Delete Channel button click.
   */ handleDeleteChannel() {
        cov_25xlsfuzn().f[8]++;
        cov_25xlsfuzn().s[32]++;
        this.closeChannelDialog();
        // Dispatch a custom event to notify other components
        cov_25xlsfuzn().s[33]++;
        this.dispatchEvent(new CustomEvent("delete-channel", {
            bubbles: true,
            composed: true
        }));
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lNNBj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A custom web component that represents a dialog for creating a new channel.
 * Extends HTMLElement and uses shadow DOM to encapsulate styles and behavior.
 * Provides functionality to display and manage the creation of a channel within a workspace.
 */ parcelHelpers.export(exports, "CreateChannelDialog", ()=>CreateChannelDialog) // Register the custom element
;
var _slog = require("../slog");
function cov_18n84mh5p9() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/view/CreateChannelDialog.ts";
    var hash = "bb8c2e6fb045ce646c709191167f87ac6e647c9f";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/view/CreateChannelDialog.ts",
        statementMap: {
            "0": {
                start: {
                    line: 17,
                    column: 4
                },
                end: {
                    line: 17,
                    column: 12
                }
            },
            "1": {
                start: {
                    line: 18,
                    column: 4
                },
                end: {
                    line: 18,
                    column: 54
                }
            },
            "2": {
                start: {
                    line: 21,
                    column: 4
                },
                end: {
                    line: 21,
                    column: 57
                }
            },
            "3": {
                start: {
                    line: 22,
                    column: 4
                },
                end: {
                    line: 22,
                    column: 64
                }
            },
            "4": {
                start: {
                    line: 23,
                    column: 4
                },
                end: {
                    line: 30,
                    column: 6
                }
            },
            "5": {
                start: {
                    line: 31,
                    column: 4
                },
                end: {
                    line: 31,
                    column: 48
                }
            },
            "6": {
                start: {
                    line: 34,
                    column: 4
                },
                end: {
                    line: 34,
                    column: 50
                }
            },
            "7": {
                start: {
                    line: 37,
                    column: 18
                },
                end: {
                    line: 37,
                    column: 49
                }
            },
            "8": {
                start: {
                    line: 38,
                    column: 4
                },
                end: {
                    line: 100,
                    column: 6
                }
            },
            "9": {
                start: {
                    line: 101,
                    column: 4
                },
                end: {
                    line: 101,
                    column: 35
                }
            },
            "10": {
                start: {
                    line: 104,
                    column: 4
                },
                end: {
                    line: 106,
                    column: 62
                }
            },
            "11": {
                start: {
                    line: 106,
                    column: 40
                },
                end: {
                    line: 106,
                    column: 60
                }
            },
            "12": {
                start: {
                    line: 108,
                    column: 4
                },
                end: {
                    line: 110,
                    column: 60
                }
            },
            "13": {
                start: {
                    line: 110,
                    column: 40
                },
                end: {
                    line: 110,
                    column: 58
                }
            },
            "14": {
                start: {
                    line: 113,
                    column: 4
                },
                end: {
                    line: 113,
                    column: 73
                }
            },
            "15": {
                start: {
                    line: 113,
                    column: 54
                },
                end: {
                    line: 113,
                    column: 71
                }
            },
            "16": {
                start: {
                    line: 120,
                    column: 4
                },
                end: {
                    line: 120,
                    column: 49
                }
            },
            "17": {
                start: {
                    line: 121,
                    column: 21
                },
                end: {
                    line: 121,
                    column: 51
                }
            },
            "18": {
                start: {
                    line: 122,
                    column: 4
                },
                end: {
                    line: 125,
                    column: 5
                }
            },
            "19": {
                start: {
                    line: 123,
                    column: 6
                },
                end: {
                    line: 123,
                    column: 37
                }
            },
            "20": {
                start: {
                    line: 124,
                    column: 6
                },
                end: {
                    line: 124,
                    column: 44
                }
            },
            "21": {
                start: {
                    line: 132,
                    column: 4
                },
                end: {
                    line: 132,
                    column: 48
                }
            },
            "22": {
                start: {
                    line: 133,
                    column: 21
                },
                end: {
                    line: 133,
                    column: 51
                }
            },
            "23": {
                start: {
                    line: 134,
                    column: 4
                },
                end: {
                    line: 137,
                    column: 5
                }
            },
            "24": {
                start: {
                    line: 135,
                    column: 6
                },
                end: {
                    line: 135,
                    column: 40
                }
            },
            "25": {
                start: {
                    line: 136,
                    column: 6
                },
                end: {
                    line: 136,
                    column: 40
                }
            },
            "26": {
                start: {
                    line: 144,
                    column: 18
                },
                end: {
                    line: 146,
                    column: 25
                }
            },
            "27": {
                start: {
                    line: 147,
                    column: 24
                },
                end: {
                    line: 147,
                    column: 42
                }
            },
            "28": {
                start: {
                    line: 148,
                    column: 4
                },
                end: {
                    line: 162,
                    column: 5
                }
            },
            "29": {
                start: {
                    line: 149,
                    column: 6
                },
                end: {
                    line: 149,
                    column: 73
                }
            },
            "30": {
                start: {
                    line: 151,
                    column: 6
                },
                end: {
                    line: 157,
                    column: 8
                }
            },
            "31": {
                start: {
                    line: 158,
                    column: 6
                },
                end: {
                    line: 158,
                    column: 23
                }
            },
            "32": {
                start: {
                    line: 159,
                    column: 6
                },
                end: {
                    line: 159,
                    column: 25
                }
            },
            "33": {
                start: {
                    line: 161,
                    column: 6
                },
                end: {
                    line: 161,
                    column: 46
                }
            }
        },
        fnMap: {
            "0": {
                name: "(anonymous_0)",
                decl: {
                    start: {
                        line: 16,
                        column: 2
                    },
                    end: {
                        line: 16,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 16,
                        column: 16
                    },
                    end: {
                        line: 114,
                        column: 3
                    }
                },
                line: 16
            },
            "1": {
                name: "(anonymous_1)",
                decl: {
                    start: {
                        line: 106,
                        column: 34
                    },
                    end: {
                        line: 106,
                        column: 35
                    }
                },
                loc: {
                    start: {
                        line: 106,
                        column: 40
                    },
                    end: {
                        line: 106,
                        column: 60
                    }
                },
                line: 106
            },
            "2": {
                name: "(anonymous_2)",
                decl: {
                    start: {
                        line: 110,
                        column: 34
                    },
                    end: {
                        line: 110,
                        column: 35
                    }
                },
                loc: {
                    start: {
                        line: 110,
                        column: 40
                    },
                    end: {
                        line: 110,
                        column: 58
                    }
                },
                line: 110
            },
            "3": {
                name: "(anonymous_3)",
                decl: {
                    start: {
                        line: 113,
                        column: 48
                    },
                    end: {
                        line: 113,
                        column: 49
                    }
                },
                loc: {
                    start: {
                        line: 113,
                        column: 54
                    },
                    end: {
                        line: 113,
                        column: 71
                    }
                },
                line: 113
            },
            "4": {
                name: "(anonymous_4)",
                decl: {
                    start: {
                        line: 119,
                        column: 2
                    },
                    end: {
                        line: 119,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 119,
                        column: 29
                    },
                    end: {
                        line: 126,
                        column: 3
                    }
                },
                line: 119
            },
            "5": {
                name: "(anonymous_5)",
                decl: {
                    start: {
                        line: 131,
                        column: 2
                    },
                    end: {
                        line: 131,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 131,
                        column: 30
                    },
                    end: {
                        line: 138,
                        column: 3
                    }
                },
                line: 131
            },
            "6": {
                name: "(anonymous_6)",
                decl: {
                    start: {
                        line: 143,
                        column: 2
                    },
                    end: {
                        line: 143,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 143,
                        column: 32
                    },
                    end: {
                        line: 163,
                        column: 3
                    }
                },
                line: 143
            }
        },
        branchMap: {
            "0": {
                loc: {
                    start: {
                        line: 122,
                        column: 4
                    },
                    end: {
                        line: 125,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 122,
                            column: 4
                        },
                        end: {
                            line: 125,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 122
            },
            "1": {
                loc: {
                    start: {
                        line: 134,
                        column: 4
                    },
                    end: {
                        line: 137,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 134,
                            column: 4
                        },
                        end: {
                            line: 137,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 134
            },
            "2": {
                loc: {
                    start: {
                        line: 148,
                        column: 4
                    },
                    end: {
                        line: 162,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 148,
                            column: 4
                        },
                        end: {
                            line: 162,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: 160,
                            column: 11
                        },
                        end: {
                            line: 162,
                            column: 5
                        }
                    }
                ],
                line: 148
            }
        },
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0,
            "18": 0,
            "19": 0,
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "31": 0,
            "32": 0,
            "33": 0
        },
        f: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0
        },
        b: {
            "0": [
                0,
                0
            ],
            "1": [
                0,
                0
            ],
            "2": [
                0,
                0
            ]
        },
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "bb8c2e6fb045ce646c709191167f87ac6e647c9f"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_18n84mh5p9 = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_18n84mh5p9();
class CreateChannelDialog extends HTMLElement {
    shadow;
    dialogContainer;
    /**
   * Initializes the CreateChannelDialog component.
   * Sets up the shadow DOM for the component and creates the dialog container.
   */ constructor(){
        cov_18n84mh5p9().f[0]++;
        cov_18n84mh5p9().s[0]++;
        super();
        cov_18n84mh5p9().s[1]++;
        this.shadow = this.attachShadow({
            mode: "open"
        });
        // Create the dialog container
        cov_18n84mh5p9().s[2]++;
        this.dialogContainer = document.createElement("div");
        cov_18n84mh5p9().s[3]++;
        this.dialogContainer.classList.add("create-channel-dialog");
        cov_18n84mh5p9().s[4]++;
        this.dialogContainer.innerHTML = `
      <div class="create-dialog-content">
        <h3>Create Channel</h3>
        <input type="text" placeholder="Enter channel name" class="channel-input-box" />
        <button class="submit-channel">Submit</button>
        <button class="cancel-create">Cancel</button>
      </div>
    `;
        cov_18n84mh5p9().s[5]++;
        this.dialogContainer.style.display = "none"; // Hidden by default
        // Append the dialog to the shadow DOM
        cov_18n84mh5p9().s[6]++;
        this.shadow.appendChild(this.dialogContainer);
        // Add styles
        const style = (cov_18n84mh5p9().s[7]++, document.createElement("style"));
        cov_18n84mh5p9().s[8]++;
        style.textContent = `
      .create-channel-dialog {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #ffffff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        z-index: 3000;
        width: 300px;
        display: none; /* Hidden by default */
      }

      .create-dialog-content {
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      .create-dialog-content h3 {
        margin-bottom: 15px;
      }

      .channel-input-box {
        padding: 10px;
        margin: 10px 0;
        width: 80%;
        border: 1px solid #ccc;
        border-radius: 5px;
      }

      .create-dialog-content button {
        background-color: #e5c3d1;
        color: white;
        border: none;
        padding: 10px 20px;
        margin: 5px 0;
        cursor: pointer;
        border-radius: 5px;
        width: 80%;
        font-size: 14px;
      }

      .create-dialog-content button:hover {
        background-color: #d4a8bb;
      }

      .cancel-create {
        background-color: #ccc;
        color: #333;
      }

      .cancel-create:hover {
        background-color: #bbb;
      }

      .blur {
        filter: blur(8px);
        -webkit-filter: blur(8px);
      }
    `;
        cov_18n84mh5p9().s[9]++;
        this.shadow.appendChild(style);
        // Bind event listeners
        cov_18n84mh5p9().s[10]++;
        this.shadow.querySelector(".submit-channel")?.addEventListener("click", ()=>{
            cov_18n84mh5p9().f[1]++;
            cov_18n84mh5p9().s[11]++;
            return this.submitChannel();
        });
        cov_18n84mh5p9().s[12]++;
        this.shadow.querySelector(".cancel-create")?.addEventListener("click", ()=>{
            cov_18n84mh5p9().f[2]++;
            cov_18n84mh5p9().s[13]++;
            return this.closeDialog();
        });
        // Listen to "create-channel" event
        cov_18n84mh5p9().s[14]++;
        document.addEventListener("create-channel", ()=>{
            cov_18n84mh5p9().f[3]++;
            cov_18n84mh5p9().s[15]++;
            return this.openDialog();
        });
    }
    /**
   * Opens the Create Channel dialog.
   */ openDialog() {
        cov_18n84mh5p9().f[4]++;
        cov_18n84mh5p9().s[16]++;
        this.dialogContainer.style.display = "block";
        const backPage = (cov_18n84mh5p9().s[17]++, document.getElementById("app"));
        cov_18n84mh5p9().s[18]++;
        if (backPage) {
            cov_18n84mh5p9().b[0][0]++;
            cov_18n84mh5p9().s[19]++;
            backPage.classList.add("blur");
            cov_18n84mh5p9().s[20]++;
            backPage.style.pointerEvents = "none";
        } else cov_18n84mh5p9().b[0][1]++;
    }
    /**
   * Closes the Create Channel dialog.
   */ closeDialog() {
        cov_18n84mh5p9().f[5]++;
        cov_18n84mh5p9().s[21]++;
        this.dialogContainer.style.display = "none";
        const backPage = (cov_18n84mh5p9().s[22]++, document.getElementById("app"));
        cov_18n84mh5p9().s[23]++;
        if (backPage) {
            cov_18n84mh5p9().b[1][0]++;
            cov_18n84mh5p9().s[24]++;
            backPage.classList.remove("blur");
            cov_18n84mh5p9().s[25]++;
            backPage.style.pointerEvents = ""; // Restore interaction
        } else cov_18n84mh5p9().b[1][1]++;
    }
    /**
   * Handles the Submit button click.
   */ submitChannel() {
        cov_18n84mh5p9().f[6]++;
        const input = (cov_18n84mh5p9().s[26]++, this.shadow.querySelector(".channel-input-box"));
        const channelName = (cov_18n84mh5p9().s[27]++, input.value.trim());
        cov_18n84mh5p9().s[28]++;
        if (channelName) {
            cov_18n84mh5p9().b[2][0]++;
            cov_18n84mh5p9().s[29]++;
            (0, _slog.slog).info("Submitting new channel:", [
                "channelName",
                channelName
            ]);
            // Dispatch a custom event with the channel name
            cov_18n84mh5p9().s[30]++;
            this.dispatchEvent(new CustomEvent("channel-created", {
                detail: {
                    channelName
                },
                bubbles: true,
                composed: true
            }));
            cov_18n84mh5p9().s[31]++;
            input.value = ""; // Clear the input field
            cov_18n84mh5p9().s[32]++;
            this.closeDialog();
        } else {
            cov_18n84mh5p9().b[2][1]++;
            cov_18n84mh5p9().s[33]++;
            (0, _slog.slog).error("Channel name is required.");
        }
    }
}

},{"../slog":"jExiC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"euRwK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A custom web component for displaying a dialog to confirm the deletion of a channel.
 * Extends `HTMLElement` and encapsulates the dialog's structure and behavior within the shadow DOM.
 */ parcelHelpers.export(exports, "DeleteChannelDialog", ()=>DeleteChannelDialog);
var _slog = require("../slog");
function cov_221jvr3mrx() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/view/DeleteChannelDialog.ts";
    var hash = "7e3a71b0736d34e2564c0c9a3a7dee40d9ef7b9f";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/view/DeleteChannelDialog.ts",
        statementMap: {
            "0": {
                start: {
                    line: 16,
                    column: 4
                },
                end: {
                    line: 16,
                    column: 12
                }
            },
            "1": {
                start: {
                    line: 17,
                    column: 4
                },
                end: {
                    line: 17,
                    column: 54
                }
            },
            "2": {
                start: {
                    line: 20,
                    column: 4
                },
                end: {
                    line: 20,
                    column: 57
                }
            },
            "3": {
                start: {
                    line: 21,
                    column: 4
                },
                end: {
                    line: 21,
                    column: 64
                }
            },
            "4": {
                start: {
                    line: 22,
                    column: 4
                },
                end: {
                    line: 29,
                    column: 6
                }
            },
            "5": {
                start: {
                    line: 30,
                    column: 4
                },
                end: {
                    line: 30,
                    column: 48
                }
            },
            "6": {
                start: {
                    line: 33,
                    column: 4
                },
                end: {
                    line: 33,
                    column: 50
                }
            },
            "7": {
                start: {
                    line: 36,
                    column: 18
                },
                end: {
                    line: 36,
                    column: 49
                }
            },
            "8": {
                start: {
                    line: 37,
                    column: 4
                },
                end: {
                    line: 99,
                    column: 6
                }
            },
            "9": {
                start: {
                    line: 100,
                    column: 4
                },
                end: {
                    line: 100,
                    column: 35
                }
            },
            "10": {
                start: {
                    line: 103,
                    column: 4
                },
                end: {
                    line: 105,
                    column: 62
                }
            },
            "11": {
                start: {
                    line: 105,
                    column: 40
                },
                end: {
                    line: 105,
                    column: 60
                }
            },
            "12": {
                start: {
                    line: 107,
                    column: 4
                },
                end: {
                    line: 109,
                    column: 60
                }
            },
            "13": {
                start: {
                    line: 109,
                    column: 40
                },
                end: {
                    line: 109,
                    column: 58
                }
            },
            "14": {
                start: {
                    line: 112,
                    column: 4
                },
                end: {
                    line: 112,
                    column: 73
                }
            },
            "15": {
                start: {
                    line: 112,
                    column: 54
                },
                end: {
                    line: 112,
                    column: 71
                }
            },
            "16": {
                start: {
                    line: 119,
                    column: 4
                },
                end: {
                    line: 119,
                    column: 49
                }
            },
            "17": {
                start: {
                    line: 120,
                    column: 21
                },
                end: {
                    line: 120,
                    column: 51
                }
            },
            "18": {
                start: {
                    line: 121,
                    column: 4
                },
                end: {
                    line: 124,
                    column: 5
                }
            },
            "19": {
                start: {
                    line: 122,
                    column: 6
                },
                end: {
                    line: 122,
                    column: 37
                }
            },
            "20": {
                start: {
                    line: 123,
                    column: 6
                },
                end: {
                    line: 123,
                    column: 44
                }
            },
            "21": {
                start: {
                    line: 131,
                    column: 4
                },
                end: {
                    line: 131,
                    column: 48
                }
            },
            "22": {
                start: {
                    line: 132,
                    column: 21
                },
                end: {
                    line: 132,
                    column: 51
                }
            },
            "23": {
                start: {
                    line: 133,
                    column: 4
                },
                end: {
                    line: 136,
                    column: 5
                }
            },
            "24": {
                start: {
                    line: 134,
                    column: 6
                },
                end: {
                    line: 134,
                    column: 40
                }
            },
            "25": {
                start: {
                    line: 135,
                    column: 6
                },
                end: {
                    line: 135,
                    column: 40
                }
            },
            "26": {
                start: {
                    line: 143,
                    column: 18
                },
                end: {
                    line: 145,
                    column: 25
                }
            },
            "27": {
                start: {
                    line: 146,
                    column: 24
                },
                end: {
                    line: 146,
                    column: 42
                }
            },
            "28": {
                start: {
                    line: 147,
                    column: 4
                },
                end: {
                    line: 161,
                    column: 5
                }
            },
            "29": {
                start: {
                    line: 148,
                    column: 6
                },
                end: {
                    line: 148,
                    column: 78
                }
            },
            "30": {
                start: {
                    line: 150,
                    column: 6
                },
                end: {
                    line: 156,
                    column: 8
                }
            },
            "31": {
                start: {
                    line: 157,
                    column: 6
                },
                end: {
                    line: 157,
                    column: 23
                }
            },
            "32": {
                start: {
                    line: 158,
                    column: 6
                },
                end: {
                    line: 158,
                    column: 25
                }
            },
            "33": {
                start: {
                    line: 160,
                    column: 6
                },
                end: {
                    line: 160,
                    column: 49
                }
            }
        },
        fnMap: {
            "0": {
                name: "(anonymous_0)",
                decl: {
                    start: {
                        line: 15,
                        column: 2
                    },
                    end: {
                        line: 15,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 15,
                        column: 16
                    },
                    end: {
                        line: 113,
                        column: 3
                    }
                },
                line: 15
            },
            "1": {
                name: "(anonymous_1)",
                decl: {
                    start: {
                        line: 105,
                        column: 34
                    },
                    end: {
                        line: 105,
                        column: 35
                    }
                },
                loc: {
                    start: {
                        line: 105,
                        column: 40
                    },
                    end: {
                        line: 105,
                        column: 60
                    }
                },
                line: 105
            },
            "2": {
                name: "(anonymous_2)",
                decl: {
                    start: {
                        line: 109,
                        column: 34
                    },
                    end: {
                        line: 109,
                        column: 35
                    }
                },
                loc: {
                    start: {
                        line: 109,
                        column: 40
                    },
                    end: {
                        line: 109,
                        column: 58
                    }
                },
                line: 109
            },
            "3": {
                name: "(anonymous_3)",
                decl: {
                    start: {
                        line: 112,
                        column: 48
                    },
                    end: {
                        line: 112,
                        column: 49
                    }
                },
                loc: {
                    start: {
                        line: 112,
                        column: 54
                    },
                    end: {
                        line: 112,
                        column: 71
                    }
                },
                line: 112
            },
            "4": {
                name: "(anonymous_4)",
                decl: {
                    start: {
                        line: 118,
                        column: 2
                    },
                    end: {
                        line: 118,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 118,
                        column: 28
                    },
                    end: {
                        line: 125,
                        column: 3
                    }
                },
                line: 118
            },
            "5": {
                name: "(anonymous_5)",
                decl: {
                    start: {
                        line: 130,
                        column: 2
                    },
                    end: {
                        line: 130,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 130,
                        column: 29
                    },
                    end: {
                        line: 137,
                        column: 3
                    }
                },
                line: 130
            },
            "6": {
                name: "(anonymous_6)",
                decl: {
                    start: {
                        line: 142,
                        column: 2
                    },
                    end: {
                        line: 142,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 142,
                        column: 32
                    },
                    end: {
                        line: 162,
                        column: 3
                    }
                },
                line: 142
            }
        },
        branchMap: {
            "0": {
                loc: {
                    start: {
                        line: 121,
                        column: 4
                    },
                    end: {
                        line: 124,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 121,
                            column: 4
                        },
                        end: {
                            line: 124,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 121
            },
            "1": {
                loc: {
                    start: {
                        line: 133,
                        column: 4
                    },
                    end: {
                        line: 136,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 133,
                            column: 4
                        },
                        end: {
                            line: 136,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 133
            },
            "2": {
                loc: {
                    start: {
                        line: 147,
                        column: 4
                    },
                    end: {
                        line: 161,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 147,
                            column: 4
                        },
                        end: {
                            line: 161,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: 159,
                            column: 11
                        },
                        end: {
                            line: 161,
                            column: 5
                        }
                    }
                ],
                line: 147
            }
        },
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0,
            "18": 0,
            "19": 0,
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "31": 0,
            "32": 0,
            "33": 0
        },
        f: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0
        },
        b: {
            "0": [
                0,
                0
            ],
            "1": [
                0,
                0
            ],
            "2": [
                0,
                0
            ]
        },
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "7e3a71b0736d34e2564c0c9a3a7dee40d9ef7b9f"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_221jvr3mrx = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_221jvr3mrx();
class DeleteChannelDialog extends HTMLElement {
    shadow;
    dialogContainer;
    /**
   * Initializes the DeleteChannelDialog component.
   * Sets up the shadow DOM and prepares the dialog container for use.
   */ constructor(){
        cov_221jvr3mrx().f[0]++;
        cov_221jvr3mrx().s[0]++;
        super();
        cov_221jvr3mrx().s[1]++;
        this.shadow = this.attachShadow({
            mode: "open"
        });
        // Create the dialog container
        cov_221jvr3mrx().s[2]++;
        this.dialogContainer = document.createElement("div");
        cov_221jvr3mrx().s[3]++;
        this.dialogContainer.classList.add("delete-channel-dialog");
        cov_221jvr3mrx().s[4]++;
        this.dialogContainer.innerHTML = `
      <div class="delete-dialog-content">
        <h3>Delete Channel</h3>
        <input type="text" placeholder="Enter channel name" class="channel-input" />
        <button class="confirm-delete-channel">Delete</button>
        <button class="cancel-delete-channel">Cancel</button>
      </div>
    `;
        cov_221jvr3mrx().s[5]++;
        this.dialogContainer.style.display = "none"; // Hidden by default
        // Append the dialog to the shadow DOM
        cov_221jvr3mrx().s[6]++;
        this.shadow.appendChild(this.dialogContainer);
        // Add styles
        const style = (cov_221jvr3mrx().s[7]++, document.createElement("style"));
        cov_221jvr3mrx().s[8]++;
        style.textContent = `
      .delete-channel-dialog {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #ffffff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        z-index: 3000;
        width: 300px;
        display: none; /* Hidden by default */
      }

      .delete-dialog-content {
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      .delete-dialog-content h3 {
        margin-bottom: 15px;
      }

      .channel-input {
        padding: 10px;
        margin: 10px 0;
        width: 80%;
        border: 1px solid #ccc;
        border-radius: 5px;
      }

      .delete-dialog-content button {
        background-color: #e5c3d1;
        color: white;
        border: none;
        padding: 10px 20px;
        margin: 5px 0;
        cursor: pointer;
        border-radius: 5px;
        width: 80%;
        font-size: 14px;
      }

      .delete-dialog-content button:hover {
        background-color: #d4a8bb;
      }

      .cancel-delete {
        background-color: #ccc;
        color: #333;
      }

      .cancel-delete:hover {
        background-color: #bbb;
      }

      .blur {
        filter: blur(8px);
        -webkit-filter: blur(8px);
      }
    `;
        cov_221jvr3mrx().s[9]++;
        this.shadow.appendChild(style);
        // Bind event listeners
        cov_221jvr3mrx().s[10]++;
        this.shadow.querySelector(".confirm-delete-channel")?.addEventListener("click", ()=>{
            cov_221jvr3mrx().f[1]++;
            cov_221jvr3mrx().s[11]++;
            return this.confirmDelete();
        });
        cov_221jvr3mrx().s[12]++;
        this.shadow.querySelector(".cancel-delete-channel")?.addEventListener("click", ()=>{
            cov_221jvr3mrx().f[2]++;
            cov_221jvr3mrx().s[13]++;
            return this.closeDialog();
        });
        // Listen to "delete-channel" event
        cov_221jvr3mrx().s[14]++;
        document.addEventListener("delete-channel", ()=>{
            cov_221jvr3mrx().f[3]++;
            cov_221jvr3mrx().s[15]++;
            return this.openDialog();
        });
    }
    /**
   * Opens the Delete Channel dialog.
   */ openDialog() {
        cov_221jvr3mrx().f[4]++;
        cov_221jvr3mrx().s[16]++;
        this.dialogContainer.style.display = "block";
        const backPage = (cov_221jvr3mrx().s[17]++, document.getElementById("app"));
        cov_221jvr3mrx().s[18]++;
        if (backPage) {
            cov_221jvr3mrx().b[0][0]++;
            cov_221jvr3mrx().s[19]++;
            backPage.classList.add("blur");
            cov_221jvr3mrx().s[20]++;
            backPage.style.pointerEvents = "none";
        } else cov_221jvr3mrx().b[0][1]++;
    }
    /**
   * Closes the Delete Channel dialog.
   */ closeDialog() {
        cov_221jvr3mrx().f[5]++;
        cov_221jvr3mrx().s[21]++;
        this.dialogContainer.style.display = "none";
        const backPage = (cov_221jvr3mrx().s[22]++, document.getElementById("app"));
        cov_221jvr3mrx().s[23]++;
        if (backPage) {
            cov_221jvr3mrx().b[1][0]++;
            cov_221jvr3mrx().s[24]++;
            backPage.classList.remove("blur");
            cov_221jvr3mrx().s[25]++;
            backPage.style.pointerEvents = ""; // Restore interaction
        } else cov_221jvr3mrx().b[1][1]++;
    }
    /**
   * Handles the Delete button click.
   */ confirmDelete() {
        cov_221jvr3mrx().f[6]++;
        const input = (cov_221jvr3mrx().s[26]++, this.shadow.querySelector(".channel-input"));
        const channelName = (cov_221jvr3mrx().s[27]++, input.value.trim());
        cov_221jvr3mrx().s[28]++;
        if (channelName) {
            cov_221jvr3mrx().b[2][0]++;
            cov_221jvr3mrx().s[29]++;
            (0, _slog.slog).info("Confirming channel deletion:", [
                "channelName",
                channelName
            ]);
            // Dispatch a custom event to notify other components
            cov_221jvr3mrx().s[30]++;
            this.dispatchEvent(new CustomEvent("channel-deleted", {
                detail: {
                    channelName
                },
                bubbles: true,
                composed: true
            }));
            cov_221jvr3mrx().s[31]++;
            input.value = "";
            cov_221jvr3mrx().s[32]++;
            this.closeDialog();
        } else {
            cov_221jvr3mrx().b[2][1]++;
            cov_221jvr3mrx().s[33]++;
            (0, _slog.slog).error("Please enter a channel name.");
        }
    }
}

},{"../slog":"jExiC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3F2sy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A custom web component representing a chat input field with various formatting and emoji buttons.
 * It extends `HTMLElement` and provides functionality to format text and insert emojis into the input area.
 */ parcelHelpers.export(exports, "ChatInputComponent", ()=>ChatInputComponent);
var _slog = require("../slog");
function cov_1jadhvpkg4() {
    var path = "/Users/roger/Desktop/m3ssag1n8-p2group64/src/view/ChatInputComponent.ts";
    var hash = "0ab7d1a51fb82408949cf466672704dccebbea17";
    var global = new Function("return this")();
    var gcv = "__coverage__";
    var coverageData = {
        path: "/Users/roger/Desktop/m3ssag1n8-p2group64/src/view/ChatInputComponent.ts",
        statementMap: {
            "0": {
                start: {
                    line: 32,
                    column: 4
                },
                end: {
                    line: 32,
                    column: 12
                }
            },
            "1": {
                start: {
                    line: 33,
                    column: 4
                },
                end: {
                    line: 33,
                    column: 54
                }
            },
            "2": {
                start: {
                    line: 34,
                    column: 4
                },
                end: {
                    line: 34,
                    column: 49
                }
            },
            "3": {
                start: {
                    line: 37,
                    column: 4
                },
                end: {
                    line: 37,
                    column: 51
                }
            },
            "4": {
                start: {
                    line: 38,
                    column: 4
                },
                end: {
                    line: 38,
                    column: 51
                }
            },
            "5": {
                start: {
                    line: 41,
                    column: 4
                },
                end: {
                    line: 41,
                    column: 49
                }
            },
            "6": {
                start: {
                    line: 42,
                    column: 4
                },
                end: {
                    line: 42,
                    column: 47
                }
            },
            "7": {
                start: {
                    line: 45,
                    column: 4
                },
                end: {
                    line: 45,
                    column: 55
                }
            },
            "8": {
                start: {
                    line: 46,
                    column: 4
                },
                end: {
                    line: 46,
                    column: 54
                }
            },
            "9": {
                start: {
                    line: 47,
                    column: 4
                },
                end: {
                    line: 48,
                    column: 61
                }
            },
            "10": {
                start: {
                    line: 49,
                    column: 4
                },
                end: {
                    line: 49,
                    column: 35
                }
            },
            "11": {
                start: {
                    line: 51,
                    column: 4
                },
                end: {
                    line: 51,
                    column: 57
                }
            },
            "12": {
                start: {
                    line: 52,
                    column: 4
                },
                end: {
                    line: 52,
                    column: 58
                }
            },
            "13": {
                start: {
                    line: 53,
                    column: 4
                },
                end: {
                    line: 54,
                    column: 63
                }
            },
            "14": {
                start: {
                    line: 55,
                    column: 4
                },
                end: {
                    line: 55,
                    column: 39
                }
            },
            "15": {
                start: {
                    line: 57,
                    column: 4
                },
                end: {
                    line: 57,
                    column: 55
                }
            },
            "16": {
                start: {
                    line: 58,
                    column: 4
                },
                end: {
                    line: 58,
                    column: 54
                }
            },
            "17": {
                start: {
                    line: 59,
                    column: 4
                },
                end: {
                    line: 60,
                    column: 62
                }
            },
            "18": {
                start: {
                    line: 61,
                    column: 4
                },
                end: {
                    line: 61,
                    column: 35
                }
            },
            "19": {
                start: {
                    line: 64,
                    column: 4
                },
                end: {
                    line: 64,
                    column: 56
                }
            },
            "20": {
                start: {
                    line: 65,
                    column: 4
                },
                end: {
                    line: 65,
                    column: 56
                }
            },
            "21": {
                start: {
                    line: 66,
                    column: 4
                },
                end: {
                    line: 67,
                    column: 66
                }
            },
            "22": {
                start: {
                    line: 68,
                    column: 4
                },
                end: {
                    line: 68,
                    column: 39
                }
            },
            "23": {
                start: {
                    line: 70,
                    column: 4
                },
                end: {
                    line: 70,
                    column: 56
                }
            },
            "24": {
                start: {
                    line: 71,
                    column: 4
                },
                end: {
                    line: 71,
                    column: 56
                }
            },
            "25": {
                start: {
                    line: 72,
                    column: 4
                },
                end: {
                    line: 73,
                    column: 67
                }
            },
            "26": {
                start: {
                    line: 74,
                    column: 4
                },
                end: {
                    line: 74,
                    column: 39
                }
            },
            "27": {
                start: {
                    line: 76,
                    column: 4
                },
                end: {
                    line: 76,
                    column: 55
                }
            },
            "28": {
                start: {
                    line: 77,
                    column: 4
                },
                end: {
                    line: 77,
                    column: 54
                }
            },
            "29": {
                start: {
                    line: 78,
                    column: 4
                },
                end: {
                    line: 79,
                    column: 63
                }
            },
            "30": {
                start: {
                    line: 80,
                    column: 4
                },
                end: {
                    line: 80,
                    column: 37
                }
            },
            "31": {
                start: {
                    line: 82,
                    column: 4
                },
                end: {
                    line: 82,
                    column: 60
                }
            },
            "32": {
                start: {
                    line: 83,
                    column: 4
                },
                end: {
                    line: 83,
                    column: 64
                }
            },
            "33": {
                start: {
                    line: 84,
                    column: 4
                },
                end: {
                    line: 85,
                    column: 66
                }
            },
            "34": {
                start: {
                    line: 86,
                    column: 4
                },
                end: {
                    line: 86,
                    column: 47
                }
            },
            "35": {
                start: {
                    line: 89,
                    column: 4
                },
                end: {
                    line: 89,
                    column: 46
                }
            },
            "36": {
                start: {
                    line: 90,
                    column: 4
                },
                end: {
                    line: 90,
                    column: 48
                }
            },
            "37": {
                start: {
                    line: 91,
                    column: 4
                },
                end: {
                    line: 91,
                    column: 46
                }
            },
            "38": {
                start: {
                    line: 92,
                    column: 4
                },
                end: {
                    line: 92,
                    column: 47
                }
            },
            "39": {
                start: {
                    line: 93,
                    column: 4
                },
                end: {
                    line: 93,
                    column: 47
                }
            },
            "40": {
                start: {
                    line: 94,
                    column: 4
                },
                end: {
                    line: 94,
                    column: 46
                }
            },
            "41": {
                start: {
                    line: 95,
                    column: 4
                },
                end: {
                    line: 95,
                    column: 51
                }
            },
            "42": {
                start: {
                    line: 98,
                    column: 4
                },
                end: {
                    line: 98,
                    column: 60
                }
            },
            "43": {
                start: {
                    line: 99,
                    column: 4
                },
                end: {
                    line: 99,
                    column: 67
                }
            },
            "44": {
                start: {
                    line: 102,
                    column: 4
                },
                end: {
                    line: 102,
                    column: 55
                }
            },
            "45": {
                start: {
                    line: 103,
                    column: 4
                },
                end: {
                    line: 103,
                    column: 54
                }
            },
            "46": {
                start: {
                    line: 104,
                    column: 4
                },
                end: {
                    line: 104,
                    column: 41
                }
            },
            "47": {
                start: {
                    line: 106,
                    column: 4
                },
                end: {
                    line: 106,
                    column: 59
                }
            },
            "48": {
                start: {
                    line: 107,
                    column: 4
                },
                end: {
                    line: 107,
                    column: 55
                }
            },
            "49": {
                start: {
                    line: 108,
                    column: 4
                },
                end: {
                    line: 108,
                    column: 79
                }
            },
            "50": {
                start: {
                    line: 110,
                    column: 4
                },
                end: {
                    line: 110,
                    column: 56
                }
            },
            "51": {
                start: {
                    line: 111,
                    column: 4
                },
                end: {
                    line: 111,
                    column: 56
                }
            },
            "52": {
                start: {
                    line: 112,
                    column: 4
                },
                end: {
                    line: 112,
                    column: 43
                }
            },
            "53": {
                start: {
                    line: 115,
                    column: 4
                },
                end: {
                    line: 115,
                    column: 55
                }
            },
            "54": {
                start: {
                    line: 116,
                    column: 4
                },
                end: {
                    line: 116,
                    column: 53
                }
            },
            "55": {
                start: {
                    line: 117,
                    column: 4
                },
                end: {
                    line: 117,
                    column: 54
                }
            },
            "56": {
                start: {
                    line: 120,
                    column: 4
                },
                end: {
                    line: 120,
                    column: 45
                }
            },
            "57": {
                start: {
                    line: 121,
                    column: 4
                },
                end: {
                    line: 121,
                    column: 52
                }
            },
            "58": {
                start: {
                    line: 124,
                    column: 4
                },
                end: {
                    line: 124,
                    column: 44
                }
            },
            "59": {
                start: {
                    line: 127,
                    column: 18
                },
                end: {
                    line: 127,
                    column: 49
                }
            },
            "60": {
                start: {
                    line: 128,
                    column: 4
                },
                end: {
                    line: 203,
                    column: 6
                }
            },
            "61": {
                start: {
                    line: 204,
                    column: 4
                },
                end: {
                    line: 204,
                    column: 35
                }
            },
            "62": {
                start: {
                    line: 207,
                    column: 4
                },
                end: {
                    line: 207,
                    column: 78
                }
            },
            "63": {
                start: {
                    line: 207,
                    column: 52
                },
                end: {
                    line: 207,
                    column: 76
                }
            },
            "64": {
                start: {
                    line: 208,
                    column: 4
                },
                end: {
                    line: 210,
                    column: 6
                }
            },
            "65": {
                start: {
                    line: 209,
                    column: 6
                },
                end: {
                    line: 209,
                    column: 31
                }
            },
            "66": {
                start: {
                    line: 213,
                    column: 4
                },
                end: {
                    line: 213,
                    column: 71
                }
            },
            "67": {
                start: {
                    line: 213,
                    column: 52
                },
                end: {
                    line: 213,
                    column: 69
                }
            },
            "68": {
                start: {
                    line: 214,
                    column: 4
                },
                end: {
                    line: 214,
                    column: 75
                }
            },
            "69": {
                start: {
                    line: 214,
                    column: 54
                },
                end: {
                    line: 214,
                    column: 73
                }
            },
            "70": {
                start: {
                    line: 215,
                    column: 4
                },
                end: {
                    line: 215,
                    column: 71
                }
            },
            "71": {
                start: {
                    line: 215,
                    column: 52
                },
                end: {
                    line: 215,
                    column: 69
                }
            },
            "72": {
                start: {
                    line: 218,
                    column: 4
                },
                end: {
                    line: 220,
                    column: 6
                }
            },
            "73": {
                start: {
                    line: 219,
                    column: 6
                },
                end: {
                    line: 219,
                    column: 36
                }
            },
            "74": {
                start: {
                    line: 221,
                    column: 4
                },
                end: {
                    line: 223,
                    column: 6
                }
            },
            "75": {
                start: {
                    line: 222,
                    column: 6
                },
                end: {
                    line: 222,
                    column: 36
                }
            },
            "76": {
                start: {
                    line: 224,
                    column: 4
                },
                end: {
                    line: 226,
                    column: 6
                }
            },
            "77": {
                start: {
                    line: 225,
                    column: 6
                },
                end: {
                    line: 225,
                    column: 35
                }
            },
            "78": {
                start: {
                    line: 227,
                    column: 4
                },
                end: {
                    line: 229,
                    column: 6
                }
            },
            "79": {
                start: {
                    line: 228,
                    column: 6
                },
                end: {
                    line: 228,
                    column: 40
                }
            },
            "80": {
                start: {
                    line: 237,
                    column: 4
                },
                end: {
                    line: 241,
                    column: 5
                }
            },
            "81": {
                start: {
                    line: 239,
                    column: 6
                },
                end: {
                    line: 239,
                    column: 29
                }
            },
            "82": {
                start: {
                    line: 240,
                    column: 6
                },
                end: {
                    line: 240,
                    column: 31
                }
            },
            "83": {
                start: {
                    line: 249,
                    column: 20
                },
                end: {
                    line: 249,
                    column: 51
                }
            },
            "84": {
                start: {
                    line: 250,
                    column: 4
                },
                end: {
                    line: 250,
                    column: 56
                }
            },
            "85": {
                start: {
                    line: 253,
                    column: 4
                },
                end: {
                    line: 266,
                    column: 5
                }
            },
            "86": {
                start: {
                    line: 255,
                    column: 6
                },
                end: {
                    line: 261,
                    column: 8
                }
            },
            "87": {
                start: {
                    line: 264,
                    column: 6
                },
                end: {
                    line: 264,
                    column: 35
                }
            },
            "88": {
                start: {
                    line: 274,
                    column: 21
                },
                end: {
                    line: 274,
                    column: 38
                }
            },
            "89": {
                start: {
                    line: 275,
                    column: 18
                },
                end: {
                    line: 275,
                    column: 41
                }
            },
            "90": {
                start: {
                    line: 276,
                    column: 16
                },
                end: {
                    line: 276,
                    column: 37
                }
            },
            "91": {
                start: {
                    line: 278,
                    column: 22
                },
                end: {
                    line: 278,
                    column: 58
                }
            },
            "92": {
                start: {
                    line: 280,
                    column: 20
                },
                end: {
                    line: 280,
                    column: 49
                }
            },
            "93": {
                start: {
                    line: 283,
                    column: 4
                },
                end: {
                    line: 283,
                    column: 35
                }
            },
            "94": {
                start: {
                    line: 291,
                    column: 21
                },
                end: {
                    line: 291,
                    column: 38
                }
            },
            "95": {
                start: {
                    line: 292,
                    column: 18
                },
                end: {
                    line: 292,
                    column: 41
                }
            },
            "96": {
                start: {
                    line: 293,
                    column: 16
                },
                end: {
                    line: 293,
                    column: 37
                }
            },
            "97": {
                start: {
                    line: 296,
                    column: 19
                },
                end: {
                    line: 296,
                    column: 53
                }
            },
            "98": {
                start: {
                    line: 297,
                    column: 18
                },
                end: {
                    line: 297,
                    column: 47
                }
            },
            "99": {
                start: {
                    line: 300,
                    column: 4
                },
                end: {
                    line: 300,
                    column: 43
                }
            },
            "100": {
                start: {
                    line: 303,
                    column: 30
                },
                end: {
                    line: 303,
                    column: 49
                }
            },
            "101": {
                start: {
                    line: 304,
                    column: 4
                },
                end: {
                    line: 304,
                    column: 72
                }
            },
            "102": {
                start: {
                    line: 307,
                    column: 4
                },
                end: {
                    line: 307,
                    column: 21
                }
            },
            "103": {
                start: {
                    line: 315,
                    column: 21
                },
                end: {
                    line: 315,
                    column: 38
                }
            },
            "104": {
                start: {
                    line: 316,
                    column: 18
                },
                end: {
                    line: 316,
                    column: 41
                }
            },
            "105": {
                start: {
                    line: 317,
                    column: 16
                },
                end: {
                    line: 317,
                    column: 37
                }
            },
            "106": {
                start: {
                    line: 320,
                    column: 19
                },
                end: {
                    line: 320,
                    column: 53
                }
            },
            "107": {
                start: {
                    line: 321,
                    column: 18
                },
                end: {
                    line: 321,
                    column: 47
                }
            },
            "108": {
                start: {
                    line: 324,
                    column: 4
                },
                end: {
                    line: 324,
                    column: 43
                }
            },
            "109": {
                start: {
                    line: 327,
                    column: 30
                },
                end: {
                    line: 327,
                    column: 49
                }
            },
            "110": {
                start: {
                    line: 328,
                    column: 4
                },
                end: {
                    line: 328,
                    column: 72
                }
            },
            "111": {
                start: {
                    line: 331,
                    column: 4
                },
                end: {
                    line: 331,
                    column: 21
                }
            },
            "112": {
                start: {
                    line: 338,
                    column: 4
                },
                end: {
                    line: 338,
                    column: 29
                }
            },
            "113": {
                start: {
                    line: 345,
                    column: 4
                },
                end: {
                    line: 345,
                    column: 28
                }
            },
            "114": {
                start: {
                    line: 352,
                    column: 21
                },
                end: {
                    line: 352,
                    column: 38
                }
            },
            "115": {
                start: {
                    line: 353,
                    column: 18
                },
                end: {
                    line: 353,
                    column: 41
                }
            },
            "116": {
                start: {
                    line: 354,
                    column: 16
                },
                end: {
                    line: 354,
                    column: 37
                }
            },
            "117": {
                start: {
                    line: 356,
                    column: 22
                },
                end: {
                    line: 356,
                    column: 58
                }
            },
            "118": {
                start: {
                    line: 358,
                    column: 20
                },
                end: {
                    line: 358,
                    column: 48
                }
            },
            "119": {
                start: {
                    line: 361,
                    column: 4
                },
                end: {
                    line: 361,
                    column: 35
                }
            }
        },
        fnMap: {
            "0": {
                name: "(anonymous_0)",
                decl: {
                    start: {
                        line: 31,
                        column: 2
                    },
                    end: {
                        line: 31,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 31,
                        column: 16
                    },
                    end: {
                        line: 230,
                        column: 3
                    }
                },
                line: 31
            },
            "1": {
                name: "(anonymous_1)",
                decl: {
                    start: {
                        line: 207,
                        column: 46
                    },
                    end: {
                        line: 207,
                        column: 47
                    }
                },
                loc: {
                    start: {
                        line: 207,
                        column: 52
                    },
                    end: {
                        line: 207,
                        column: 76
                    }
                },
                line: 207
            },
            "2": {
                name: "(anonymous_2)",
                decl: {
                    start: {
                        line: 208,
                        column: 50
                    },
                    end: {
                        line: 208,
                        column: 51
                    }
                },
                loc: {
                    start: {
                        line: 209,
                        column: 6
                    },
                    end: {
                        line: 209,
                        column: 31
                    }
                },
                line: 209
            },
            "3": {
                name: "(anonymous_3)",
                decl: {
                    start: {
                        line: 213,
                        column: 46
                    },
                    end: {
                        line: 213,
                        column: 47
                    }
                },
                loc: {
                    start: {
                        line: 213,
                        column: 52
                    },
                    end: {
                        line: 213,
                        column: 69
                    }
                },
                line: 213
            },
            "4": {
                name: "(anonymous_4)",
                decl: {
                    start: {
                        line: 214,
                        column: 48
                    },
                    end: {
                        line: 214,
                        column: 49
                    }
                },
                loc: {
                    start: {
                        line: 214,
                        column: 54
                    },
                    end: {
                        line: 214,
                        column: 73
                    }
                },
                line: 214
            },
            "5": {
                name: "(anonymous_5)",
                decl: {
                    start: {
                        line: 215,
                        column: 46
                    },
                    end: {
                        line: 215,
                        column: 47
                    }
                },
                loc: {
                    start: {
                        line: 215,
                        column: 52
                    },
                    end: {
                        line: 215,
                        column: 69
                    }
                },
                line: 215
            },
            "6": {
                name: "(anonymous_6)",
                decl: {
                    start: {
                        line: 218,
                        column: 47
                    },
                    end: {
                        line: 218,
                        column: 48
                    }
                },
                loc: {
                    start: {
                        line: 219,
                        column: 6
                    },
                    end: {
                        line: 219,
                        column: 36
                    }
                },
                line: 219
            },
            "7": {
                name: "(anonymous_7)",
                decl: {
                    start: {
                        line: 221,
                        column: 47
                    },
                    end: {
                        line: 221,
                        column: 48
                    }
                },
                loc: {
                    start: {
                        line: 222,
                        column: 6
                    },
                    end: {
                        line: 222,
                        column: 36
                    }
                },
                line: 222
            },
            "8": {
                name: "(anonymous_8)",
                decl: {
                    start: {
                        line: 224,
                        column: 46
                    },
                    end: {
                        line: 224,
                        column: 47
                    }
                },
                loc: {
                    start: {
                        line: 225,
                        column: 6
                    },
                    end: {
                        line: 225,
                        column: 35
                    }
                },
                line: 225
            },
            "9": {
                name: "(anonymous_9)",
                decl: {
                    start: {
                        line: 227,
                        column: 51
                    },
                    end: {
                        line: 227,
                        column: 52
                    }
                },
                loc: {
                    start: {
                        line: 228,
                        column: 6
                    },
                    end: {
                        line: 228,
                        column: 40
                    }
                },
                line: 228
            },
            "10": {
                name: "(anonymous_10)",
                decl: {
                    start: {
                        line: 236,
                        column: 2
                    },
                    end: {
                        line: 236,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 236,
                        column: 52
                    },
                    end: {
                        line: 243,
                        column: 3
                    }
                },
                line: 236
            },
            "11": {
                name: "(anonymous_11)",
                decl: {
                    start: {
                        line: 248,
                        column: 2
                    },
                    end: {
                        line: 248,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 248,
                        column: 36
                    },
                    end: {
                        line: 267,
                        column: 3
                    }
                },
                line: 248
            },
            "12": {
                name: "(anonymous_12)",
                decl: {
                    start: {
                        line: 273,
                        column: 2
                    },
                    end: {
                        line: 273,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 273,
                        column: 47
                    },
                    end: {
                        line: 284,
                        column: 3
                    }
                },
                line: 273
            },
            "13": {
                name: "(anonymous_13)",
                decl: {
                    start: {
                        line: 290,
                        column: 2
                    },
                    end: {
                        line: 290,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 290,
                        column: 47
                    },
                    end: {
                        line: 308,
                        column: 3
                    }
                },
                line: 290
            },
            "14": {
                name: "(anonymous_14)",
                decl: {
                    start: {
                        line: 314,
                        column: 2
                    },
                    end: {
                        line: 314,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 314,
                        column: 45
                    },
                    end: {
                        line: 332,
                        column: 3
                    }
                },
                line: 314
            },
            "15": {
                name: "(anonymous_15)",
                decl: {
                    start: {
                        line: 337,
                        column: 2
                    },
                    end: {
                        line: 337,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 337,
                        column: 29
                    },
                    end: {
                        line: 339,
                        column: 3
                    }
                },
                line: 337
            },
            "16": {
                name: "(anonymous_16)",
                decl: {
                    start: {
                        line: 344,
                        column: 2
                    },
                    end: {
                        line: 344,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 344,
                        column: 31
                    },
                    end: {
                        line: 346,
                        column: 3
                    }
                },
                line: 344
            },
            "17": {
                name: "(anonymous_17)",
                decl: {
                    start: {
                        line: 351,
                        column: 2
                    },
                    end: {
                        line: 351,
                        column: 3
                    }
                },
                loc: {
                    start: {
                        line: 351,
                        column: 29
                    },
                    end: {
                        line: 362,
                        column: 3
                    }
                },
                line: 351
            }
        },
        branchMap: {
            "0": {
                loc: {
                    start: {
                        line: 237,
                        column: 4
                    },
                    end: {
                        line: 241,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 237,
                            column: 4
                        },
                        end: {
                            line: 241,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: undefined,
                            column: undefined
                        },
                        end: {
                            line: undefined,
                            column: undefined
                        }
                    }
                ],
                line: 237
            },
            "1": {
                loc: {
                    start: {
                        line: 237,
                        column: 8
                    },
                    end: {
                        line: 237,
                        column: 48
                    }
                },
                type: "binary-expr",
                locations: [
                    {
                        start: {
                            line: 237,
                            column: 8
                        },
                        end: {
                            line: 237,
                            column: 29
                        }
                    },
                    {
                        start: {
                            line: 237,
                            column: 33
                        },
                        end: {
                            line: 237,
                            column: 48
                        }
                    }
                ],
                line: 237
            },
            "2": {
                loc: {
                    start: {
                        line: 253,
                        column: 4
                    },
                    end: {
                        line: 266,
                        column: 5
                    }
                },
                type: "if",
                locations: [
                    {
                        start: {
                            line: 253,
                            column: 4
                        },
                        end: {
                            line: 266,
                            column: 5
                        }
                    },
                    {
                        start: {
                            line: 265,
                            column: 11
                        },
                        end: {
                            line: 266,
                            column: 5
                        }
                    }
                ],
                line: 253
            }
        },
        s: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0,
            "18": 0,
            "19": 0,
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "31": 0,
            "32": 0,
            "33": 0,
            "34": 0,
            "35": 0,
            "36": 0,
            "37": 0,
            "38": 0,
            "39": 0,
            "40": 0,
            "41": 0,
            "42": 0,
            "43": 0,
            "44": 0,
            "45": 0,
            "46": 0,
            "47": 0,
            "48": 0,
            "49": 0,
            "50": 0,
            "51": 0,
            "52": 0,
            "53": 0,
            "54": 0,
            "55": 0,
            "56": 0,
            "57": 0,
            "58": 0,
            "59": 0,
            "60": 0,
            "61": 0,
            "62": 0,
            "63": 0,
            "64": 0,
            "65": 0,
            "66": 0,
            "67": 0,
            "68": 0,
            "69": 0,
            "70": 0,
            "71": 0,
            "72": 0,
            "73": 0,
            "74": 0,
            "75": 0,
            "76": 0,
            "77": 0,
            "78": 0,
            "79": 0,
            "80": 0,
            "81": 0,
            "82": 0,
            "83": 0,
            "84": 0,
            "85": 0,
            "86": 0,
            "87": 0,
            "88": 0,
            "89": 0,
            "90": 0,
            "91": 0,
            "92": 0,
            "93": 0,
            "94": 0,
            "95": 0,
            "96": 0,
            "97": 0,
            "98": 0,
            "99": 0,
            "100": 0,
            "101": 0,
            "102": 0,
            "103": 0,
            "104": 0,
            "105": 0,
            "106": 0,
            "107": 0,
            "108": 0,
            "109": 0,
            "110": 0,
            "111": 0,
            "112": 0,
            "113": 0,
            "114": 0,
            "115": 0,
            "116": 0,
            "117": 0,
            "118": 0,
            "119": 0
        },
        f: {
            "0": 0,
            "1": 0,
            "2": 0,
            "3": 0,
            "4": 0,
            "5": 0,
            "6": 0,
            "7": 0,
            "8": 0,
            "9": 0,
            "10": 0,
            "11": 0,
            "12": 0,
            "13": 0,
            "14": 0,
            "15": 0,
            "16": 0,
            "17": 0
        },
        b: {
            "0": [
                0,
                0
            ],
            "1": [
                0,
                0
            ],
            "2": [
                0,
                0
            ]
        },
        _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
        hash: "0ab7d1a51fb82408949cf466672704dccebbea17"
    };
    var coverage = global[gcv] || (global[gcv] = {});
    if (!coverage[path] || coverage[path].hash !== hash) coverage[path] = coverageData;
    var actualCoverage = coverage[path];
    // @ts-ignore
    cov_1jadhvpkg4 = function() {
        return actualCoverage;
    };
    return actualCoverage;
}
cov_1jadhvpkg4();
class ChatInputComponent extends HTMLElement {
    shadow;
    container;
    toolbar;
    inputContainer;
    sendButton;
    inputElement;
    closeButton;
    // Formatting buttons
    boldButton;
    italicButton;
    linkButton;
    // Emoji buttons
    smileButton;
    frownButton;
    likeButton;
    celebrateButton;
    /**
   * Initializes the `ChatInputComponent` by setting up the shadow DOM
   * and preparing the necessary elements for the input area, toolbar, and buttons.
   */ constructor(){
        cov_1jadhvpkg4().f[0]++;
        cov_1jadhvpkg4().s[0]++;
        super();
        cov_1jadhvpkg4().s[1]++;
        this.shadow = this.attachShadow({
            mode: "open"
        });
        cov_1jadhvpkg4().s[2]++;
        (0, _slog.slog).info("Initializing ChatInputComponent");
        // Create the main container
        cov_1jadhvpkg4().s[3]++;
        this.container = document.createElement("div");
        cov_1jadhvpkg4().s[4]++;
        this.container.setAttribute("id", "container");
        // Create the toolbar
        cov_1jadhvpkg4().s[5]++;
        this.toolbar = document.createElement("div");
        cov_1jadhvpkg4().s[6]++;
        this.toolbar.setAttribute("id", "toolbar");
        // Create formatting buttons
        cov_1jadhvpkg4().s[7]++;
        this.boldButton = document.createElement("button");
        cov_1jadhvpkg4().s[8]++;
        this.boldButton.setAttribute("id", "bold-button");
        cov_1jadhvpkg4().s[9]++;
        this.boldButton.innerHTML = '<iconify-icon icon="mdi:format-bold"></iconify-icon>';
        cov_1jadhvpkg4().s[10]++;
        this.boldButton.title = "Bold";
        cov_1jadhvpkg4().s[11]++;
        this.italicButton = document.createElement("button");
        cov_1jadhvpkg4().s[12]++;
        this.italicButton.setAttribute("id", "italic-button");
        cov_1jadhvpkg4().s[13]++;
        this.italicButton.innerHTML = '<iconify-icon icon="mdi:format-italic"></iconify-icon>';
        cov_1jadhvpkg4().s[14]++;
        this.italicButton.title = "Italic";
        cov_1jadhvpkg4().s[15]++;
        this.linkButton = document.createElement("button");
        cov_1jadhvpkg4().s[16]++;
        this.linkButton.setAttribute("id", "link-button");
        cov_1jadhvpkg4().s[17]++;
        this.linkButton.innerHTML = '<iconify-icon icon="mdi:link-variant"></iconify-icon>';
        cov_1jadhvpkg4().s[18]++;
        this.linkButton.title = "Link";
        // Create emoji buttons
        cov_1jadhvpkg4().s[19]++;
        this.smileButton = document.createElement("button");
        cov_1jadhvpkg4().s[20]++;
        this.smileButton.setAttribute("id", "smile-button");
        cov_1jadhvpkg4().s[21]++;
        this.smileButton.innerHTML = '<iconify-icon icon="twemoji:smiling-face"></iconify-icon>';
        cov_1jadhvpkg4().s[22]++;
        this.smileButton.title = ":smile:";
        cov_1jadhvpkg4().s[23]++;
        this.frownButton = document.createElement("button");
        cov_1jadhvpkg4().s[24]++;
        this.frownButton.setAttribute("id", "frown-button");
        cov_1jadhvpkg4().s[25]++;
        this.frownButton.innerHTML = '<iconify-icon icon="twemoji:frowning-face"></iconify-icon>';
        cov_1jadhvpkg4().s[26]++;
        this.frownButton.title = ":frown:";
        cov_1jadhvpkg4().s[27]++;
        this.likeButton = document.createElement("button");
        cov_1jadhvpkg4().s[28]++;
        this.likeButton.setAttribute("id", "like-button");
        cov_1jadhvpkg4().s[29]++;
        this.likeButton.innerHTML = '<iconify-icon icon="twemoji:thumbs-up"></iconify-icon>';
        cov_1jadhvpkg4().s[30]++;
        this.likeButton.title = ":like:";
        cov_1jadhvpkg4().s[31]++;
        this.celebrateButton = document.createElement("button");
        cov_1jadhvpkg4().s[32]++;
        this.celebrateButton.setAttribute("id", "celebrate-button");
        cov_1jadhvpkg4().s[33]++;
        this.celebrateButton.innerHTML = '<iconify-icon icon="twemoji:party-popper"></iconify-icon>';
        cov_1jadhvpkg4().s[34]++;
        this.celebrateButton.title = ":celebrate:";
        // Append buttons to toolbar
        cov_1jadhvpkg4().s[35]++;
        this.toolbar.appendChild(this.boldButton);
        cov_1jadhvpkg4().s[36]++;
        this.toolbar.appendChild(this.italicButton);
        cov_1jadhvpkg4().s[37]++;
        this.toolbar.appendChild(this.linkButton);
        cov_1jadhvpkg4().s[38]++;
        this.toolbar.appendChild(this.smileButton);
        cov_1jadhvpkg4().s[39]++;
        this.toolbar.appendChild(this.frownButton);
        cov_1jadhvpkg4().s[40]++;
        this.toolbar.appendChild(this.likeButton);
        cov_1jadhvpkg4().s[41]++;
        this.toolbar.appendChild(this.celebrateButton);
        // Create the input container
        cov_1jadhvpkg4().s[42]++;
        this.inputContainer = document.createElement("section");
        cov_1jadhvpkg4().s[43]++;
        this.inputContainer.setAttribute("id", "chat-input-container");
        // Initialize the send button and input element
        cov_1jadhvpkg4().s[44]++;
        this.sendButton = document.createElement("button");
        cov_1jadhvpkg4().s[45]++;
        this.sendButton.setAttribute("id", "send-button");
        cov_1jadhvpkg4().s[46]++;
        this.sendButton.textContent = "Post";
        cov_1jadhvpkg4().s[47]++;
        this.inputElement = document.createElement("textarea");
        cov_1jadhvpkg4().s[48]++;
        this.inputElement.setAttribute("id", "chat-input");
        cov_1jadhvpkg4().s[49]++;
        this.inputElement.setAttribute("placeholder", "Type your message here...");
        cov_1jadhvpkg4().s[50]++;
        this.closeButton = document.createElement("button");
        cov_1jadhvpkg4().s[51]++;
        this.closeButton.setAttribute("id", "close-button");
        cov_1jadhvpkg4().s[52]++;
        this.closeButton.textContent = "Close";
        // Append input and buttons to the input container
        cov_1jadhvpkg4().s[53]++;
        this.inputContainer.appendChild(this.inputElement);
        cov_1jadhvpkg4().s[54]++;
        this.inputContainer.appendChild(this.sendButton);
        cov_1jadhvpkg4().s[55]++;
        this.inputContainer.appendChild(this.closeButton);
        // Append toolbar and input container to the main container
        cov_1jadhvpkg4().s[56]++;
        this.container.appendChild(this.toolbar);
        cov_1jadhvpkg4().s[57]++;
        this.container.appendChild(this.inputContainer);
        // Append the container to the shadow DOM
        cov_1jadhvpkg4().s[58]++;
        this.shadow.appendChild(this.container);
        // Add styles
        const style = (cov_1jadhvpkg4().s[59]++, document.createElement("style"));
        cov_1jadhvpkg4().s[60]++;
        style.textContent = `
      #container {
        display: flex;
        flex-direction: column;
      }

      #toolbar {
        display: flex;
        align-items: center;
        background-color: #e0e0e0;
        padding: 5px;
        border-radius: 4px;
        border-bottom: 0.7px solid #ccc;
      }

      #toolbar button {
        background: none;
        border: none;
        cursor: pointer;
        margin-right: 5px;
        font-size: 1.2em;
      }

      #toolbar button:hover {
        background-color: #d0d0d0;
      }

      #toolbar button .iconify {
        font-size: 1.2em;
      }

      #chat-input-container {
        display: flex;
        align-items: center;
        padding: 10px;
        background-color: #e0e0e0;
      }
      
      #chat-input-container textarea {
        flex-grow: 1;
        padding: 10px;
        font-size: 1em;
        resize: vertical; /* Allow vertical resizing */
        height: 60px;
        border-radius: 5px;
        border: 1px solid #ccc;
        font-family: inherit; /* Match the font to the rest of the app */
      }
      #send-button {
        background-color: #420e39;
        color: white;
        border: none;
        padding: 10px 20px;
        margin-left: 10px;
        cursor: pointer;
        border-radius: 5px;
      }
      #send-button:hover {
        background-color: #292643;
      }

      #close-button {
        background-color: #ff4d4d;
        color: white;
        border: none;
        padding: 10px 20px;
        cursor: pointer;
        border-radius: 5px;
        visibility: hidden; /* Hidden by default */
        margin-left: 5px;
      }
      
      #close-button:hover {
        background-color: #e60000;
      }
    `;
        cov_1jadhvpkg4().s[61]++;
        this.shadow.appendChild(style);
        // Event listeners
        cov_1jadhvpkg4().s[62]++;
        this.sendButton.addEventListener("click", ()=>{
            cov_1jadhvpkg4().f[1]++;
            cov_1jadhvpkg4().s[63]++;
            return this.handleSendMessage();
        });
        cov_1jadhvpkg4().s[64]++;
        this.inputElement.addEventListener("keydown", (event)=>{
            cov_1jadhvpkg4().f[2]++;
            cov_1jadhvpkg4().s[65]++;
            return this.handleKeyDown(event);
        });
        // Formatting button event listeners
        cov_1jadhvpkg4().s[66]++;
        this.boldButton.addEventListener("click", ()=>{
            cov_1jadhvpkg4().f[3]++;
            cov_1jadhvpkg4().s[67]++;
            return this.handleBold();
        });
        cov_1jadhvpkg4().s[68]++;
        this.italicButton.addEventListener("click", ()=>{
            cov_1jadhvpkg4().f[4]++;
            cov_1jadhvpkg4().s[69]++;
            return this.handleItalic();
        });
        cov_1jadhvpkg4().s[70]++;
        this.linkButton.addEventListener("click", ()=>{
            cov_1jadhvpkg4().f[5]++;
            cov_1jadhvpkg4().s[71]++;
            return this.handleLink();
        });
        // Emoji button event listeners
        cov_1jadhvpkg4().s[72]++;
        this.smileButton.addEventListener("click", ()=>{
            cov_1jadhvpkg4().f[6]++;
            cov_1jadhvpkg4().s[73]++;
            return this.insertAtCursor(":smile:");
        });
        cov_1jadhvpkg4().s[74]++;
        this.frownButton.addEventListener("click", ()=>{
            cov_1jadhvpkg4().f[7]++;
            cov_1jadhvpkg4().s[75]++;
            return this.insertAtCursor(":frown:");
        });
        cov_1jadhvpkg4().s[76]++;
        this.likeButton.addEventListener("click", ()=>{
            cov_1jadhvpkg4().f[8]++;
            cov_1jadhvpkg4().s[77]++;
            return this.insertAtCursor(":like:");
        });
        cov_1jadhvpkg4().s[78]++;
        this.celebrateButton.addEventListener("click", ()=>{
            cov_1jadhvpkg4().f[9]++;
            cov_1jadhvpkg4().s[79]++;
            return this.insertAtCursor(":celebrate:");
        });
    }
    /**
   * Handles the `keydown` event for the chat input field.
   * @param event - The `KeyboardEvent` triggered when a key is pressed.
   */ handleKeyDown(event) {
        cov_1jadhvpkg4().f[10]++;
        cov_1jadhvpkg4().s[80]++;
        if ((cov_1jadhvpkg4().b[1][0]++, event.key === "Enter") && (cov_1jadhvpkg4().b[1][1]++, !event.shiftKey)) {
            cov_1jadhvpkg4().b[0][0]++;
            cov_1jadhvpkg4().s[81]++;
            // Prevent default behavior of adding a newline
            event.preventDefault();
            cov_1jadhvpkg4().s[82]++;
            this.handleSendMessage();
        } else cov_1jadhvpkg4().b[0][1]++;
    // If Shift+Enter, allow the newline to be inserted
    }
    /**
   * Handles the sending of a message from the chat input field.
   */ handleSendMessage() {
        cov_1jadhvpkg4().f[11]++;
        const message = (cov_1jadhvpkg4().s[83]++, this.inputElement?.value.trim());
        cov_1jadhvpkg4().s[84]++;
        (0, _slog.slog).info("Sending message:", [
            "message",
            message
        ]);
        // Only send the message if it's not empty, need to think about this.
        cov_1jadhvpkg4().s[85]++;
        if (message) {
            cov_1jadhvpkg4().b[2][0]++;
            cov_1jadhvpkg4().s[86]++;
            // Dispatch a custom event with the message
            this.dispatchEvent(new CustomEvent("post-message", {
                detail: {
                    message
                },
                bubbles: true,
                composed: true
            }));
            // Clear the input field after sending
            cov_1jadhvpkg4().s[87]++;
            this.inputElement.value = "";
        } else cov_1jadhvpkg4().b[2][1]++;
    }
    /**
   * Wraps the currently selected text in the input element with the specified wrapper.
   * @param wrapper - The string that will wrap the selected text (e.g., "**" for bold).
   */ wrapSelection(wrapper) {
        cov_1jadhvpkg4().f[12]++;
        const textarea = (cov_1jadhvpkg4().s[88]++, this.inputElement);
        const start = (cov_1jadhvpkg4().s[89]++, textarea.selectionStart);
        const end = (cov_1jadhvpkg4().s[90]++, textarea.selectionEnd);
        const selection = (cov_1jadhvpkg4().s[91]++, textarea.value.substring(start, end));
        const newText = (cov_1jadhvpkg4().s[92]++, wrapper + selection + wrapper);
        // Replace the selected text with the new text
        cov_1jadhvpkg4().s[93]++;
        this.replaceSelection(newText);
    }
    /**
   * Replaces the currently selected text in the input element with the specified text.
   * @param text - The text that will replace the selected text in the input element.
   */ replaceSelection(text) {
        cov_1jadhvpkg4().f[13]++;
        const textarea = (cov_1jadhvpkg4().s[94]++, this.inputElement);
        const start = (cov_1jadhvpkg4().s[95]++, textarea.selectionStart);
        const end = (cov_1jadhvpkg4().s[96]++, textarea.selectionEnd);
        // Get the text before and after the selection
        const before = (cov_1jadhvpkg4().s[97]++, textarea.value.substring(0, start));
        const after = (cov_1jadhvpkg4().s[98]++, textarea.value.substring(end));
        // Set the new value
        cov_1jadhvpkg4().s[99]++;
        textarea.value = before + text + after;
        // Update the cursor position
        const newCursorPosition = (cov_1jadhvpkg4().s[100]++, start + text.length);
        cov_1jadhvpkg4().s[101]++;
        textarea.selectionStart = textarea.selectionEnd = newCursorPosition;
        // Focus the textarea
        cov_1jadhvpkg4().s[102]++;
        textarea.focus();
    }
    /**
   * Inserts the specified text at the current cursor position in the input element.
   * @param text - The text to be inserted at the cursor position.
   */ insertAtCursor(text) {
        cov_1jadhvpkg4().f[14]++;
        const textarea = (cov_1jadhvpkg4().s[103]++, this.inputElement);
        const start = (cov_1jadhvpkg4().s[104]++, textarea.selectionStart);
        const end = (cov_1jadhvpkg4().s[105]++, textarea.selectionEnd);
        // Get the text before and after the selection
        const before = (cov_1jadhvpkg4().s[106]++, textarea.value.substring(0, start));
        const after = (cov_1jadhvpkg4().s[107]++, textarea.value.substring(end));
        // Set the new value
        cov_1jadhvpkg4().s[108]++;
        textarea.value = before + text + after;
        // Set the cursor position
        const newCursorPosition = (cov_1jadhvpkg4().s[109]++, start + text.length);
        cov_1jadhvpkg4().s[110]++;
        textarea.selectionStart = textarea.selectionEnd = newCursorPosition;
        // Focus the textarea
        cov_1jadhvpkg4().s[111]++;
        textarea.focus();
    }
    /**
   * Wraps the selected text with double asterisks to format it as bold.
   */ handleBold() {
        cov_1jadhvpkg4().f[15]++;
        cov_1jadhvpkg4().s[112]++;
        this.wrapSelection("**");
    }
    /**
   * Wraps the selected text with single asterisks to format it as italic.
   */ handleItalic() {
        cov_1jadhvpkg4().f[16]++;
        cov_1jadhvpkg4().s[113]++;
        this.wrapSelection("*");
    }
    /**
   * Inserts a Markdown-style link around the selected text or at the cursor.
   */ handleLink() {
        cov_1jadhvpkg4().f[17]++;
        const textarea = (cov_1jadhvpkg4().s[114]++, this.inputElement);
        const start = (cov_1jadhvpkg4().s[115]++, textarea.selectionStart);
        const end = (cov_1jadhvpkg4().s[116]++, textarea.selectionEnd);
        const selection = (cov_1jadhvpkg4().s[117]++, textarea.value.substring(start, end));
        const newText = (cov_1jadhvpkg4().s[118]++, "[" + selection + "]" + "()");
        // Replace the selected text with the new text
        cov_1jadhvpkg4().s[119]++;
        this.replaceSelection(newText);
    }
}

},{"../slog":"jExiC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}]},["jljck","jeorp"], "jeorp", "parcelRequirec16f")

//# sourceMappingURL=index.b7a05eb9.js.map
